"use strict";

exports.__esModule = true;
exports.default = applyDomain;

var _inferElementTypeFromUnionOfArrayTypes = _interopRequireDefault(require("../../utils/inferElementTypeFromUnionOfArrayTypes"));

var _Scale = require("../../typeGuards/Scale");

var _combineCategories = _interopRequireDefault(require("../../utils/combineCategories"));

var _parseDateTimeIfPossible = _interopRequireDefault(require("../parseDateTimeIfPossible"));

var _parseContinuousDomain = _interopRequireDefault(require("../domain/parseContinuousDomain"));

var _parseDiscreteDomain = _interopRequireDefault(require("../domain/parseDiscreteDomain"));

var _combineContinuousDomains = _interopRequireDefault(require("../../utils/combineContinuousDomains"));

var _removeUndefinedAndNull = _interopRequireDefault(require("../../utils/removeUndefinedAndNull"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createOrderFunction(reverse) {
  return reverse ? array => array.concat().reverse() : array => array;
}

function applyDomain(config, scale, domainFromDataset) {
  const {
    domain,
    reverse,
    type
  } = config;
  const order = createOrderFunction(reverse);
  const inputDomain = (domainFromDataset == null ? void 0 : domainFromDataset.length) ? (0, _inferElementTypeFromUnionOfArrayTypes.default)(domainFromDataset) : undefined;

  if (domain == null ? void 0 : domain.length) {
    const fixedDomain = (0, _inferElementTypeFromUnionOfArrayTypes.default)(domain).map(_parseDateTimeIfPossible.default);

    if ((0, _Scale.isContinuousScale)(scale, type) || (0, _Scale.isDiscretizingScale)(scale, type)) {
      const combined = (0, _combineContinuousDomains.default)((0, _parseContinuousDomain.default)(fixedDomain, type), inputDomain && (0, _removeUndefinedAndNull.default)((0, _parseContinuousDomain.default)(inputDomain, type)));

      if (combined) {
        scale.domain(order(combined));
      }
    } else {
      scale.domain(order((0, _combineCategories.default)((0, _parseDiscreteDomain.default)(fixedDomain), inputDomain && (0, _parseDiscreteDomain.default)(inputDomain))));
    }
  } else if (inputDomain) {
    if ((0, _Scale.isContinuousScale)(scale, type) || (0, _Scale.isDiscretizingScale)(scale, type)) {
      scale.domain(order((0, _removeUndefinedAndNull.default)((0, _parseContinuousDomain.default)(inputDomain, type))));
    } else {
      scale.domain(order((0, _parseDiscreteDomain.default)(inputDomain)));
    }
  }
}