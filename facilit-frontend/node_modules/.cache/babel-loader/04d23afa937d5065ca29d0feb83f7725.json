{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Unless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nnimport { t } from '@superset-ui/translation';\n\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../modules/dates';\nimport {\naddToObject,\nalterInObject,\nalterInArr,\nremoveFromArr,\ngetFromArr,\naddToArr,\nextendArr } from\n'../../reduxUtils';\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {var _context;\n      const tabHistory = _sliceInstanceProperty(_context = state.tabHistory).call(_context);\n      tabHistory.push(action.queryEditor.id);\n      const newState = _Object$assign({}, state, { tabHistory });\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {var _context2;\n      const { query, result } = action;\n      const existing = _findInstanceProperty(_context2 = state.queryEditors).call(_context2, qe => qe.id === query.id);\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      {\n        remoteId: result.remoteId,\n        title: query.title },\n\n      'id');\n\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {var _context3;\n      const id = action.alterations.remoteId;\n      const existing = _findInstanceProperty(_context3 = state.queryEditors).call(_context3, qe => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      action.alterations,\n      'remoteId');\n\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {var _context4;\n      const progenitor = _findInstanceProperty(_context4 = state.queryEditors).call(_context4,\n      qe => qe.id === state.tabHistory[state.tabHistory.length - 1]);\n\n      const qe = {\n        remoteId: progenitor.remoteId,\n        title: t('Copy of %s', progenitor.title),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow };\n\n      return sqlLabReducer(state, actions.addQueryEditor(qe));\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {var _context5, _context6, _context7, _context8;\n      let newState = removeFromArr(state, 'queryEditors', action.queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = _mapInstanceProperty(_context5 = newState.queryEditors).call(_context5, qe => qe.id);\n\n      const queries = {};\n      _forEachInstanceProperty(_context6 = _Object$keys(state.queries)).call(_context6, k => {\n        const query = state.queries[k];\n        if (_indexOfInstanceProperty(qeIds).call(qeIds, query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = _sliceInstanceProperty(_context7 = state.tabHistory).call(_context7);\n      tabHistory = _filterInstanceProperty(tabHistory).call(tabHistory, id => _indexOfInstanceProperty(qeIds).call(qeIds, id) > -1);\n\n      // Remove associated table schemas\n      const tables = _filterInstanceProperty(_context8 = state.tables).call(_context8,\n      table => table.queryEditorId !== action.queryEditor.id);\n\n\n      newState = _Object$assign({}, newState, { tabHistory, tables, queries });\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = _Object$assign({}, state.queries);\n      delete newQueries[action.query.id];\n      return _Object$assign({}, state, { queries: newQueries });\n    },\n    [actions.RESET_STATE]() {\n      return _Object$assign({}, getInitialState());\n    },\n    [actions.MERGE_TABLE]() {var _context9;\n      const at = _Object$assign({}, action.table);\n      let existingTable;\n      _forEachInstanceProperty(_context9 = state.tables).call(_context9, xt => {\n        if (\n        xt.dbId === at.dbId &&\n        xt.queryEditorId === at.queryEditorId &&\n        xt.schema === at.schema &&\n        xt.name === at.name)\n        {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at);\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id });\n\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = _Object$assign({}, state.queries);\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null });\n\n      return _Object$assign({}, newState, { queries });\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {var _context10;\n      const queries = _Object$assign({}, state.queries);\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      _forEachInstanceProperty(_context10 = state.tables).call(_context10, xt => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push(_Object$assign({}, xt, { dataPreviewQueryId: action.newQuery.id }));\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return _Object$assign({},\n      state, {\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id });\n\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLE]() {\n      return removeFromArr(state, 'tables', action.table);\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [],\n          completed: false } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: action.results,\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n          {\n            line_number: 1,\n            start_column: 1,\n            end_column: 1,\n            message: \"The server failed to validate your query.\\n\" + action.message }],\n\n\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: true,\n          cost: action.json,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: action.error } });\n\n\n      return newState;\n    },\n    [actions.START_QUERY]() {\n      let newState = _Object$assign({}, state);\n      if (action.query.sqlEditorId) {\n        const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = _Object$assign({},\n          state.queries[qe.latestQueryId].results, {\n            data: [],\n            query: null });\n\n          const q = _Object$assign({}, state.queries[qe.latestQueryId], { results: newResults });\n          const queries = _Object$assign({}, state.queries, { [q.id]: q });\n          newState = _Object$assign({}, state, { queries });\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      return alterInArr(newState, 'queryEditors', sqlEditor, {\n        latestQueryId: action.query.id });\n\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'stopped',\n        results: [] });\n\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = _Object$assign({}, action.query.results);\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true });\n\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'fetching' });\n\n    },\n    [actions.QUERY_SUCCESS]() {\n      let rows;\n      if (action.results.data) {\n        rows = action.results.data.length;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows,\n        state: 'success',\n        errorMessage: null,\n        cached: false };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        state: 'failed',\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {var _context11;\n      const qeIds = _mapInstanceProperty(_context11 = state.queryEditors).call(_context11, qe => qe.id);\n      if (\n      _indexOfInstanceProperty(qeIds).call(qeIds, action.queryEditor.id) > -1 &&\n      state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id)\n      {var _context12;\n        const tabHistory = _sliceInstanceProperty(_context12 = state.tabHistory).call(_context12);\n        tabHistory.push(action.queryEditor.id);\n        return _Object$assign({}, state, { tabHistory });\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, _Object$assign({},\n      action.queryEditor));\n\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return _Object$assign({}, state, { activeSouthPaneTab: action.tabId });\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {var _context13;\n      // remove migrated query editor from localStorage\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.queryEditors = _filterInstanceProperty(_context13 = sqlLab.queryEditors).call(_context13,\n      qe => qe.id !== action.oldQueryEditor.id);\n\n      localStorage.setItem('redux', _JSON$stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n      removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n      'queryEditors',\n      action.newQueryEditor);\n\n    },\n    [actions.MIGRATE_TABLE]() {var _context14;\n      // remove migrated table from localStorage\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.tables = _filterInstanceProperty(_context14 = sqlLab.tables).call(_context14,\n      table => table.id !== action.oldTable.id);\n\n      localStorage.setItem('redux', _JSON$stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n      removeFromArr(state, 'tables', action.oldTable),\n      'tables',\n      action.newTable);\n\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {var _context15, _context16;\n      // remove migrated tab from localStorage tabHistory\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.tabHistory = _filterInstanceProperty(_context15 = sqlLab.tabHistory).call(_context15,\n      tabId => tabId !== action.oldId);\n\n      localStorage.setItem('redux', _JSON$stringify({ sqlLab }));\n      const tabHistory = _filterInstanceProperty(_context16 = state.tabHistory).call(_context16,\n      tabId => tabId !== action.oldId);\n\n      tabHistory.push(action.newId);\n      return _Object$assign({}, state, { tabHistory });\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = _Object$assign({},\n      state.queries[action.queryId], {\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId });\n\n      const queries = _Object$assign({}, state.queries, { [query.id]: query });\n      return _Object$assign({}, state, { queries });\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        dbId: action.dbId });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schema: action.schema });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schemaOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TABLE_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        tableOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        title: action.title });\n\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        sql: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        queryLimit: action.queryLimit });\n\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        templateParams: action.templateParams });\n\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        selectedText: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        autorun: action.autorun });\n\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        northPercent: action.northPercent,\n        southPercent: action.southPercent });\n\n    },\n    [actions.SET_DATABASES]() {var _context17;\n      const databases = {};\n      _forEachInstanceProperty(_context17 = action.databases).call(_context17, db => {\n        databases[db.id] = db;\n      });\n      return _Object$assign({}, state, { databases });\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = _Object$assign({}, state.queries);\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let queriesLastUpdate = state.queriesLastUpdate;\n      for (const id in action.alteredQueries) {\n        const changedQuery = action.alteredQueries[id];\n        if (\n        !state.queries.hasOwnProperty(id) ||\n        state.queries[id].state !== 'stopped' &&\n        state.queries[id].state !== 'failed')\n        {\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          newQueries[id] = _Object$assign({}, state.queries[id], {}, changedQuery);\n          change = true;\n        }\n      }\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return _Object$assign({}, state, { queries: newQueries, queriesLastUpdate });\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return _Object$assign({}, state, { offline: action.offline });\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return _Object$assign({}, state, { isDatasourceLoading: true, errorMessage: null });\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return _Object$assign({},\n      state, {\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource });\n\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return _Object$assign({}, state, { isDatasourceLoading: false, errorMessage: action.err });\n    } };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sqlLabReducer, \"sqlLabReducer\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/SqlLab/reducers/sqlLab.js"],"names":["t","getInitialState","actions","now","addToObject","alterInObject","alterInArr","removeFromArr","getFromArr","addToArr","extendArr","sqlLabReducer","state","action","actionHandlers","ADD_QUERY_EDITOR","tabHistory","push","queryEditor","id","newState","QUERY_EDITOR_SAVED","query","result","existing","queryEditors","qe","remoteId","title","UPDATE_QUERY_EDITOR","alterations","CLONE_QUERY_TO_NEW_TAB","progenitor","length","dbId","schema","autorun","sql","queryLimit","maxRow","addQueryEditor","REMOVE_QUERY_EDITOR","qeIds","queries","k","sqlEditorId","tables","table","queryEditorId","REMOVE_QUERY","newQueries","RESET_STATE","MERGE_TABLE","at","existingTable","xt","name","dataPreviewQueryId","EXPAND_TABLE","expanded","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","oldQueryId","newTables","newQuery","activeSouthPaneTab","COLLAPSE_TABLE","REMOVE_TABLE","START_QUERY_VALIDATION","sqlEditor","validationResult","errors","completed","QUERY_VALIDATION_RETURNED","results","QUERY_VALIDATION_FAILED","line_number","start_column","end_column","message","COST_ESTIMATE_STARTED","queryCostEstimate","cost","error","COST_ESTIMATE_RETURNED","json","COST_ESTIMATE_FAILED","START_QUERY","latestQueryId","newResults","data","q","STOP_QUERY","CLEAR_QUERY_RESULTS","cached","REQUEST_QUERY_RESULTS","QUERY_SUCCESS","rows","alts","endDttm","progress","errorMessage","QUERY_FAILED","msg","link","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","tabId","MIGRATE_QUERY_EDITOR","sqlLab","JSON","parse","localStorage","getItem","oldQueryEditor","setItem","newQueryEditor","MIGRATE_TABLE","oldTable","newTable","MIGRATE_TAB_HISTORY","oldId","newId","MIGRATE_QUERY","queryId","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_SCHEMA_OPTIONS","schemaOptions","options","QUERY_EDITOR_SET_TABLE_OPTIONS","tableOptions","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","templateParams","QUERY_EDITOR_SET_SELECTED_TEXT","selectedText","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_PERSIST_HEIGHT","northPercent","southPercent","SET_DATABASES","databases","db","REFRESH_QUERIES","change","queriesLastUpdate","alteredQueries","changedQuery","hasOwnProperty","changedOn","SET_USER_OFFLINE","offline","CREATE_DATASOURCE_STARTED","isDatasourceLoading","CREATE_DATASOURCE_SUCCESS","datasource","CREATE_DATASOURCE_FAILED","err","type"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/translation';\n\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../modules/dates';\nimport {\n  addToObject,\n  alterInObject,\n  alterInArr,\n  removeFromArr,\n  getFromArr,\n  addToArr,\n  extendArr,\n} from '../../reduxUtils';\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const tabHistory = state.tabHistory.slice();\n      tabHistory.push(action.queryEditor.id);\n      const newState = { ...state, tabHistory };\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result } = action;\n      const existing = state.queryEditors.find(qe => qe.id === query.id);\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        {\n          remoteId: result.remoteId,\n          title: query.title,\n        },\n        'id',\n      );\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find(qe => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        action.alterations,\n        'remoteId',\n      );\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const progenitor = state.queryEditors.find(\n        qe => qe.id === state.tabHistory[state.tabHistory.length - 1],\n      );\n      const qe = {\n        remoteId: progenitor.remoteId,\n        title: t('Copy of %s', progenitor.title),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow,\n      };\n      return sqlLabReducer(state, actions.addQueryEditor(qe));\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      let newState = removeFromArr(state, 'queryEditors', action.queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map(qe => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach(k => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter(id => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n        table => table.queryEditorId !== action.queryEditor.id,\n      );\n\n      newState = { ...newState, tabHistory, tables, queries };\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...getInitialState() };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      let existingTable;\n      state.tables.forEach(xt => {\n        if (\n          xt.dbId === at.dbId &&\n          xt.queryEditorId === at.queryEditorId &&\n          xt.schema === at.schema &&\n          xt.name === at.name\n        ) {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at);\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id,\n        });\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null,\n      });\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach(xt => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id,\n      };\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLE]() {\n      return removeFromArr(state, 'tables', action.table);\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [],\n          completed: false,\n        },\n      });\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: action.results,\n          completed: true,\n        },\n      });\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n            {\n              line_number: 1,\n              start_column: 1,\n              end_column: 1,\n              message: `The server failed to validate your query.\\n${action.message}`,\n            },\n          ],\n          completed: true,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: null,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: true,\n          cost: action.json,\n          error: null,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: action.error,\n        },\n      });\n      return newState;\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null,\n          };\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      return alterInArr(newState, 'queryEditors', sqlEditor, {\n        latestQueryId: action.query.id,\n      });\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'stopped',\n        results: [],\n      });\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true,\n      });\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'fetching',\n      });\n    },\n    [actions.QUERY_SUCCESS]() {\n      let rows;\n      if (action.results.data) {\n        rows = action.results.data.length;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows,\n        state: 'success',\n        errorMessage: null,\n        cached: false,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        state: 'failed',\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {\n      const qeIds = state.queryEditors.map(qe => qe.id);\n      if (\n        qeIds.indexOf(action.queryEditor.id) > -1 &&\n        state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id\n      ) {\n        const tabHistory = state.tabHistory.slice();\n        tabHistory.push(action.queryEditor.id);\n        return { ...state, tabHistory };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor,\n      });\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      // remove migrated query editor from localStorage\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.queryEditors = sqlLab.queryEditors.filter(\n        qe => qe.id !== action.oldQueryEditor.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n        removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n        'queryEditors',\n        action.newQueryEditor,\n      );\n    },\n    [actions.MIGRATE_TABLE]() {\n      // remove migrated table from localStorage\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.tables = sqlLab.tables.filter(\n        table => table.id !== action.oldTable.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n        removeFromArr(state, 'tables', action.oldTable),\n        'tables',\n        action.newTable,\n      );\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      // remove migrated tab from localStorage tabHistory\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.tabHistory = sqlLab.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      const tabHistory = state.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      tabHistory.push(action.newId);\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId,\n      };\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        dbId: action.dbId,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schema: action.schema,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schemaOptions: action.options,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TABLE_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        tableOptions: action.options,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        title: action.title,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        sql: action.sql,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        queryLimit: action.queryLimit,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        templateParams: action.templateParams,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        selectedText: action.sql,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        autorun: action.autorun,\n      });\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        northPercent: action.northPercent,\n        southPercent: action.southPercent,\n      });\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach(db => {\n        databases[db.id] = db;\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let queriesLastUpdate = state.queriesLastUpdate;\n      for (const id in action.alteredQueries) {\n        const changedQuery = action.alteredQueries[id];\n        if (\n          !state.queries.hasOwnProperty(id) ||\n          (state.queries[id].state !== 'stopped' &&\n            state.queries[id].state !== 'failed')\n        ) {\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          newQueries[id] = { ...state.queries[id], ...changedQuery };\n          change = true;\n        }\n      }\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource,\n      };\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    },\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}