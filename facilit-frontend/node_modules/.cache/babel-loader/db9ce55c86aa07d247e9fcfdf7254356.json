{"ast":null,"code":"import \"core-js/modules/es.promise\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * KIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nnimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, AsyncSelect } from 'src/components/Select';\nimport { ControlLabel, Label } from 'react-bootstrap';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\n\nimport SupersetAsyncSelect from './AsyncSelect';\nimport RefreshLabel from './RefreshLabel';\nimport './TableSelector.less';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  dbId: PropTypes.number.isRequired,\n  schema: PropTypes.string,\n  onSchemaChange: PropTypes.func,\n  onDbChange: PropTypes.func,\n  onSchemasLoad: PropTypes.func,\n  onTablesLoad: PropTypes.func,\n  getDbList: PropTypes.func,\n  onTableChange: PropTypes.func,\n  tableNameSticky: PropTypes.bool,\n  tableName: PropTypes.string,\n  database: PropTypes.object,\n  sqlLabMode: PropTypes.bool,\n  onChange: PropTypes.func,\n  clearable: PropTypes.bool,\n  handleError: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  onDbChange: () => {},\n  onSchemaChange: () => {},\n  onSchemasLoad: () => {},\n  onTablesLoad: () => {},\n  getDbList: () => {},\n  onTableChange: () => {},\n  onChange: () => {},\n  tableNameSticky: true,\n  sqlLabMode: true,\n  clearable: true };\n\n\nexport default class TableSelector extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6;\n    super(props);\n    this.state = {\n      schemaLoading: false,\n      schemaOptions: [],\n      tableLoading: false,\n      tableOptions: [],\n      dbId: props.dbId,\n      schema: props.schema,\n      tableName: props.tableName };\n\n    this.onDatabaseChange = _bindInstanceProperty(_context = this.onDatabaseChange).call(_context, this);\n    this.onSchemaChange = _bindInstanceProperty(_context2 = this.onSchemaChange).call(_context2, this);\n    this.changeTable = _bindInstanceProperty(_context3 = this.changeTable).call(_context3, this);\n    this.dbMutator = _bindInstanceProperty(_context4 = this.dbMutator).call(_context4, this);\n    this.getTableNamesBySubStr = _bindInstanceProperty(_context5 = this.getTableNamesBySubStr).call(_context5, this);\n    this.onChange = _bindInstanceProperty(_context6 = this.onChange).call(_context6, this);\n  }\n\n  componentDidMount() {\n    this.fetchSchemas(this.state.dbId);\n    this.fetchTables();\n  }\n\n  onChange() {\n    this.props.onChange({\n      dbId: this.state.dbId,\n      schema: this.state.schema,\n      tableName: this.state.tableName });\n\n  }\n\n  onDatabaseChange(db, selectChangeMeta) {\n    return this.changeDataBase(db);\n  }\n\n  onSchemaChange(schemaOpt, selectActionMeta) {\n    return this.changeSchema(schemaOpt);\n  }\n\n  getTableNamesBySubStr(substr = 'undefined') {\n    if (!this.props.dbId || !substr) {\n      const options = [];\n      return _Promise.resolve({ options });\n    }\n    const encodedSchema = encodeURIComponent(this.props.schema);\n    const encodedSubstr = encodeURIComponent(substr);\n    return SupersetClient.get({\n      endpoint: encodeURI(\"/superset/tables/\" +\n      this.props.dbId + \"/\" + encodedSchema + \"/\" + encodedSubstr) }).\n\n    then(({ json }) => {var _context7;\n      const options = _mapInstanceProperty(_context7 = json.options).call(_context7, o => ({\n        value: o.value,\n        schema: o.schema,\n        label: o.label,\n        title: o.title,\n        type: o.type }));\n\n      return { options };\n    });\n  }\n\n  dbMutator(data) {var _context8;\n    this.props.getDbList(data.result);\n    if (data.result.length === 0) {\n      this.props.handleError(\n      t(\"It seems you don't have access to any database\"));\n\n    }\n    return _mapInstanceProperty(_context8 = data.result).call(_context8, row => _Object$assign({},\n    row, {\n      // label is used for the typeahead\n      label: row.backend + \" \" + row.database_name }));\n\n  }\n\n  fetchTables(forceRefresh = false, substr = 'undefined') {\n    const { dbId, schema } = this.state;\n    const encodedSchema = encodeURIComponent(schema);\n    const encodedSubstr = encodeURIComponent(substr);\n    if (dbId && schema) {\n      this.setState(() => ({ tableLoading: true, tableOptions: [] }));\n      const endpoint = encodeURI(\"/superset/tables/\" +\n      dbId + \"/\" + encodedSchema + \"/\" + encodedSubstr + \"/\" + !!forceRefresh + \"/\");\n\n      return SupersetClient.get({ endpoint }).\n      then(({ json }) => {var _context9;\n        const options = _mapInstanceProperty(_context9 = json.options).call(_context9, o => ({\n          value: o.value,\n          schema: o.schema,\n          label: o.label,\n          title: o.title,\n          type: o.type }));\n\n        this.setState(() => ({\n          tableLoading: false,\n          tableOptions: options }));\n\n        this.props.onTablesLoad(json.options);\n      }).\n      catch(() => {\n        this.setState(() => ({ tableLoading: false, tableOptions: [] }));\n        this.props.handleError(t('Error while fetching table list'));\n      });\n    }\n    this.setState(() => ({ tableLoading: false, tableOptions: [] }));\n    return _Promise.resolve();\n  }\n\n  fetchSchemas(dbId, forceRefresh = false) {\n    const actualDbId = dbId || this.props.dbId;\n    if (actualDbId) {\n      this.setState({ schemaLoading: true });\n      const endpoint = \"/superset/schemas/\" + actualDbId + \"/\" + forceRefresh + \"/\";\n      return SupersetClient.get({ endpoint }).\n      then(({ json }) => {var _context10;\n        const schemaOptions = _mapInstanceProperty(_context10 = json.schemas).call(_context10, s => ({\n          value: s,\n          label: s,\n          title: s }));\n\n        this.setState({ schemaOptions, schemaLoading: false });\n        this.props.onSchemasLoad(schemaOptions);\n      }).\n      catch(() => {\n        this.setState({ schemaLoading: false, schemaOptions: [] });\n        this.props.handleError(t('Error while fetching schema list'));\n      });\n    }\n    return _Promise.resolve();\n  }\n\n  changeDataBase(db, force = false) {\n    const dbId = db ? db.id : null;\n    this.setState({ schemaOptions: [] });\n    this.props.onSchemaChange(null);\n    this.props.onDbChange(db);\n    this.fetchSchemas(dbId, force);\n    this.setState({ dbId, schema: null, tableOptions: [] }, this.onChange);\n  }\n\n  changeSchema(schemaOpt, force = false) {\n    const schema = schemaOpt ? schemaOpt.value : null;\n    this.props.onSchemaChange(schema);\n    this.setState({ schema }, () => {\n      this.fetchTables(force);\n      this.onChange();\n    });\n  }\n\n  changeTable(tableOpt) {\n    if (!tableOpt) {\n      this.setState({ tableName: '' });\n      return;\n    }\n    const schemaName = tableOpt.schema;\n    const tableName = tableOpt.value;\n    if (this.props.tableNameSticky) {\n      this.setState({ tableName }, this.onChange);\n    }\n    this.props.onTableChange(tableName, schemaName);\n  }\n\n  renderDatabaseOption(db) {\n    return (\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(Label, { bsStyle: \"default\", className: \"m-r-5\" },\n      db.backend),\n\n      db.database_name));\n\n\n  }\n\n  renderTableOption(option) {\n    return (\n      ___EmotionJSX(\"span\", { className: \"TableLabel\" },\n      ___EmotionJSX(\"span\", { className: \"m-r-5\" },\n      ___EmotionJSX(\"small\", { className: \"text-muted\" },\n      ___EmotionJSX(\"i\", {\n        className: \"fa fa-\" + (option.type === 'view' ? 'eye' : 'table') }))),\n\n\n\n      option.label));\n\n\n  }\n\n  renderSelectRow(select, refreshBtn) {\n    return (\n      ___EmotionJSX(\"div\", { className: \"section\" },\n      ___EmotionJSX(\"span\", { className: \"select\" }, select),\n      ___EmotionJSX(\"span\", { className: \"refresh-col\" }, refreshBtn)));\n\n\n  }\n\n  renderDatabaseSelect() {\n    return this.renderSelectRow(\n    ___EmotionJSX(SupersetAsyncSelect, {\n      dataEndpoint:\n      '/api/v1/database/?q=' +\n      '(keys:!(none),' +\n      'filters:!((col:expose_in_sqllab,opr:eq,value:!t)),' +\n      'order_columns:database_name,order_direction:asc,page:0,page_size:-1)',\n\n      onChange: this.onDatabaseChange,\n      onAsyncError: () =>\n      this.props.handleError(t('Error while fetching database list')),\n\n      clearable: false,\n      value: this.state.dbId,\n      valueKey: \"id\",\n      valueRenderer: (db) =>\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", { className: \"text-muted m-r-5\" }, t('Database:')),\n      this.renderDatabaseOption(db)),\n\n\n      optionRenderer: this.renderDatabaseOption,\n      mutator: this.dbMutator,\n      placeholder: t('Select a database'),\n      autoSelect: true }));\n\n\n  }\n\n  renderSchema() {\n    return this.renderSelectRow(\n    ___EmotionJSX(Select, {\n      name: \"select-schema\",\n      placeholder: t('Select a schema (%s)', this.state.schemaOptions.length),\n      options: this.state.schemaOptions,\n      value: this.props.schema,\n      valueRenderer: (o) =>\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", { className: \"text-muted\" }, t('Schema:')), \" \", o.label),\n\n\n      isLoading: this.state.schemaLoading,\n      autosize: false,\n      onChange: this.onSchemaChange }),\n\n    ___EmotionJSX(RefreshLabel, {\n      onClick: () => this.onDatabaseChange({ id: this.props.dbId }, true),\n      tooltipContent: t('Force refresh schema list') }));\n\n\n  }\n\n  renderTable() {\n    let tableSelectPlaceholder;\n    let tableSelectDisabled = false;\n    if (\n    this.props.database &&\n    this.props.database.allow_multi_schema_metadata_fetch)\n    {\n      tableSelectPlaceholder = t('Type to search ...');\n    } else {\n      tableSelectPlaceholder = t('Select table ');\n      tableSelectDisabled = true;\n    }\n    const options = this.state.tableOptions;\n    const select = this.props.schema ?\n    ___EmotionJSX(Select, {\n      name: \"select-table\",\n      isLoading: this.state.tableLoading,\n      ignoreAccents: false,\n      placeholder: t('Select table or type table name'),\n      autosize: false,\n      onChange: this.changeTable,\n      options: options,\n      value: this.state.tableName,\n      optionRenderer: this.renderTableOption }) :\n\n\n    ___EmotionJSX(AsyncSelect, {\n      name: \"async-select-table\",\n      placeholder: tableSelectPlaceholder,\n      disabled: tableSelectDisabled,\n      autosize: false,\n      onChange: this.changeTable,\n      value: this.state.tableName,\n      loadOptions: this.getTableNamesBySubStr,\n      optionRenderer: this.renderTableOption });\n\n\n    return this.renderSelectRow(\n    select,\n    ___EmotionJSX(RefreshLabel, {\n      onClick: () => this.changeSchema({ value: this.props.schema }, true),\n      tooltipContent: t('Force refresh table list') }));\n\n\n  }\n\n  renderSeeTableLabel() {\n    return (\n      ___EmotionJSX(\"div\", { className: \"section\" },\n      ___EmotionJSX(ControlLabel, null,\n      t('See table schema'), ' ',\n      this.props.schema &&\n      ___EmotionJSX(\"small\", null, \"(\",\n      this.state.tableOptions.length, \" in \", ___EmotionJSX(\"i\", null, this.props.schema), \")\"))));\n\n\n\n\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"div\", { className: \"TableSelector\" },\n      this.renderDatabaseSelect(),\n      this.renderSchema(),\n      ___EmotionJSX(\"div\", { className: \"divider\" }),\n      this.props.sqlLabMode && this.renderSeeTableLabel(),\n      this.renderTable()));\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}TableSelector.propTypes = propTypes;\nTableSelector.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/TableSelector.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/TableSelector.jsx\");reactHotLoader.register(TableSelector, \"TableSelector\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/TableSelector.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/TableSelector.jsx"],"names":["React","PropTypes","Select","AsyncSelect","ControlLabel","Label","t","SupersetClient","SupersetAsyncSelect","RefreshLabel","propTypes","dbId","number","isRequired","schema","string","onSchemaChange","func","onDbChange","onSchemasLoad","onTablesLoad","getDbList","onTableChange","tableNameSticky","bool","tableName","database","object","sqlLabMode","onChange","clearable","handleError","defaultProps","TableSelector","PureComponent","constructor","props","state","schemaLoading","schemaOptions","tableLoading","tableOptions","onDatabaseChange","changeTable","dbMutator","getTableNamesBySubStr","componentDidMount","fetchSchemas","fetchTables","db","selectChangeMeta","changeDataBase","schemaOpt","selectActionMeta","changeSchema","substr","options","resolve","encodedSchema","encodeURIComponent","encodedSubstr","get","endpoint","encodeURI","then","json","o","value","label","title","type","data","result","length","row","backend","database_name","forceRefresh","setState","catch","actualDbId","schemas","s","force","id","tableOpt","schemaName","renderDatabaseOption","renderTableOption","option","renderSelectRow","select","refreshBtn","renderDatabaseSelect","renderSchema","renderTable","tableSelectPlaceholder","tableSelectDisabled","allow_multi_schema_metadata_fetch","renderSeeTableLabel","render"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, AsyncSelect } from 'src/components/Select';\nimport { ControlLabel, Label } from 'react-bootstrap';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\n\nimport SupersetAsyncSelect from './AsyncSelect';\nimport RefreshLabel from './RefreshLabel';\nimport './TableSelector.less';\n\nconst propTypes = {\n  dbId: PropTypes.number.isRequired,\n  schema: PropTypes.string,\n  onSchemaChange: PropTypes.func,\n  onDbChange: PropTypes.func,\n  onSchemasLoad: PropTypes.func,\n  onTablesLoad: PropTypes.func,\n  getDbList: PropTypes.func,\n  onTableChange: PropTypes.func,\n  tableNameSticky: PropTypes.bool,\n  tableName: PropTypes.string,\n  database: PropTypes.object,\n  sqlLabMode: PropTypes.bool,\n  onChange: PropTypes.func,\n  clearable: PropTypes.bool,\n  handleError: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  onDbChange: () => {},\n  onSchemaChange: () => {},\n  onSchemasLoad: () => {},\n  onTablesLoad: () => {},\n  getDbList: () => {},\n  onTableChange: () => {},\n  onChange: () => {},\n  tableNameSticky: true,\n  sqlLabMode: true,\n  clearable: true,\n};\n\nexport default class TableSelector extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      schemaLoading: false,\n      schemaOptions: [],\n      tableLoading: false,\n      tableOptions: [],\n      dbId: props.dbId,\n      schema: props.schema,\n      tableName: props.tableName,\n    };\n    this.onDatabaseChange = this.onDatabaseChange.bind(this);\n    this.onSchemaChange = this.onSchemaChange.bind(this);\n    this.changeTable = this.changeTable.bind(this);\n    this.dbMutator = this.dbMutator.bind(this);\n    this.getTableNamesBySubStr = this.getTableNamesBySubStr.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSchemas(this.state.dbId);\n    this.fetchTables();\n  }\n\n  onChange() {\n    this.props.onChange({\n      dbId: this.state.dbId,\n      schema: this.state.schema,\n      tableName: this.state.tableName,\n    });\n  }\n\n  onDatabaseChange(db, selectChangeMeta) {\n    return this.changeDataBase(db);\n  }\n\n  onSchemaChange(schemaOpt, selectActionMeta) {\n    return this.changeSchema(schemaOpt);\n  }\n\n  getTableNamesBySubStr(substr = 'undefined') {\n    if (!this.props.dbId || !substr) {\n      const options = [];\n      return Promise.resolve({ options });\n    }\n    const encodedSchema = encodeURIComponent(this.props.schema);\n    const encodedSubstr = encodeURIComponent(substr);\n    return SupersetClient.get({\n      endpoint: encodeURI(\n        `/superset/tables/${this.props.dbId}/${encodedSchema}/${encodedSubstr}`,\n      ),\n    }).then(({ json }) => {\n      const options = json.options.map(o => ({\n        value: o.value,\n        schema: o.schema,\n        label: o.label,\n        title: o.title,\n        type: o.type,\n      }));\n      return { options };\n    });\n  }\n\n  dbMutator(data) {\n    this.props.getDbList(data.result);\n    if (data.result.length === 0) {\n      this.props.handleError(\n        t(\"It seems you don't have access to any database\"),\n      );\n    }\n    return data.result.map(row => ({\n      ...row,\n      // label is used for the typeahead\n      label: `${row.backend} ${row.database_name}`,\n    }));\n  }\n\n  fetchTables(forceRefresh = false, substr = 'undefined') {\n    const { dbId, schema } = this.state;\n    const encodedSchema = encodeURIComponent(schema);\n    const encodedSubstr = encodeURIComponent(substr);\n    if (dbId && schema) {\n      this.setState(() => ({ tableLoading: true, tableOptions: [] }));\n      const endpoint = encodeURI(\n        `/superset/tables/${dbId}/${encodedSchema}/${encodedSubstr}/${!!forceRefresh}/`,\n      );\n      return SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options = json.options.map(o => ({\n            value: o.value,\n            schema: o.schema,\n            label: o.label,\n            title: o.title,\n            type: o.type,\n          }));\n          this.setState(() => ({\n            tableLoading: false,\n            tableOptions: options,\n          }));\n          this.props.onTablesLoad(json.options);\n        })\n        .catch(() => {\n          this.setState(() => ({ tableLoading: false, tableOptions: [] }));\n          this.props.handleError(t('Error while fetching table list'));\n        });\n    }\n    this.setState(() => ({ tableLoading: false, tableOptions: [] }));\n    return Promise.resolve();\n  }\n\n  fetchSchemas(dbId, forceRefresh = false) {\n    const actualDbId = dbId || this.props.dbId;\n    if (actualDbId) {\n      this.setState({ schemaLoading: true });\n      const endpoint = `/superset/schemas/${actualDbId}/${forceRefresh}/`;\n      return SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const schemaOptions = json.schemas.map(s => ({\n            value: s,\n            label: s,\n            title: s,\n          }));\n          this.setState({ schemaOptions, schemaLoading: false });\n          this.props.onSchemasLoad(schemaOptions);\n        })\n        .catch(() => {\n          this.setState({ schemaLoading: false, schemaOptions: [] });\n          this.props.handleError(t('Error while fetching schema list'));\n        });\n    }\n    return Promise.resolve();\n  }\n\n  changeDataBase(db, force = false) {\n    const dbId = db ? db.id : null;\n    this.setState({ schemaOptions: [] });\n    this.props.onSchemaChange(null);\n    this.props.onDbChange(db);\n    this.fetchSchemas(dbId, force);\n    this.setState({ dbId, schema: null, tableOptions: [] }, this.onChange);\n  }\n\n  changeSchema(schemaOpt, force = false) {\n    const schema = schemaOpt ? schemaOpt.value : null;\n    this.props.onSchemaChange(schema);\n    this.setState({ schema }, () => {\n      this.fetchTables(force);\n      this.onChange();\n    });\n  }\n\n  changeTable(tableOpt) {\n    if (!tableOpt) {\n      this.setState({ tableName: '' });\n      return;\n    }\n    const schemaName = tableOpt.schema;\n    const tableName = tableOpt.value;\n    if (this.props.tableNameSticky) {\n      this.setState({ tableName }, this.onChange);\n    }\n    this.props.onTableChange(tableName, schemaName);\n  }\n\n  renderDatabaseOption(db) {\n    return (\n      <span>\n        <Label bsStyle=\"default\" className=\"m-r-5\">\n          {db.backend}\n        </Label>\n        {db.database_name}\n      </span>\n    );\n  }\n\n  renderTableOption(option) {\n    return (\n      <span className=\"TableLabel\">\n        <span className=\"m-r-5\">\n          <small className=\"text-muted\">\n            <i\n              className={`fa fa-${option.type === 'view' ? 'eye' : 'table'}`}\n            />\n          </small>\n        </span>\n        {option.label}\n      </span>\n    );\n  }\n\n  renderSelectRow(select, refreshBtn) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh-col\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  renderDatabaseSelect() {\n    return this.renderSelectRow(\n      <SupersetAsyncSelect\n        dataEndpoint={\n          '/api/v1/database/?q=' +\n          '(keys:!(none),' +\n          'filters:!((col:expose_in_sqllab,opr:eq,value:!t)),' +\n          'order_columns:database_name,order_direction:asc,page:0,page_size:-1)'\n        }\n        onChange={this.onDatabaseChange}\n        onAsyncError={() =>\n          this.props.handleError(t('Error while fetching database list'))\n        }\n        clearable={false}\n        value={this.state.dbId}\n        valueKey=\"id\"\n        valueRenderer={db => (\n          <div>\n            <span className=\"text-muted m-r-5\">{t('Database:')}</span>\n            {this.renderDatabaseOption(db)}\n          </div>\n        )}\n        optionRenderer={this.renderDatabaseOption}\n        mutator={this.dbMutator}\n        placeholder={t('Select a database')}\n        autoSelect\n      />,\n    );\n  }\n\n  renderSchema() {\n    return this.renderSelectRow(\n      <Select\n        name=\"select-schema\"\n        placeholder={t('Select a schema (%s)', this.state.schemaOptions.length)}\n        options={this.state.schemaOptions}\n        value={this.props.schema}\n        valueRenderer={o => (\n          <div>\n            <span className=\"text-muted\">{t('Schema:')}</span> {o.label}\n          </div>\n        )}\n        isLoading={this.state.schemaLoading}\n        autosize={false}\n        onChange={this.onSchemaChange}\n      />,\n      <RefreshLabel\n        onClick={() => this.onDatabaseChange({ id: this.props.dbId }, true)}\n        tooltipContent={t('Force refresh schema list')}\n      />,\n    );\n  }\n\n  renderTable() {\n    let tableSelectPlaceholder;\n    let tableSelectDisabled = false;\n    if (\n      this.props.database &&\n      this.props.database.allow_multi_schema_metadata_fetch\n    ) {\n      tableSelectPlaceholder = t('Type to search ...');\n    } else {\n      tableSelectPlaceholder = t('Select table ');\n      tableSelectDisabled = true;\n    }\n    const options = this.state.tableOptions;\n    const select = this.props.schema ? (\n      <Select\n        name=\"select-table\"\n        isLoading={this.state.tableLoading}\n        ignoreAccents={false}\n        placeholder={t('Select table or type table name')}\n        autosize={false}\n        onChange={this.changeTable}\n        options={options}\n        value={this.state.tableName}\n        optionRenderer={this.renderTableOption}\n      />\n    ) : (\n      <AsyncSelect\n        name=\"async-select-table\"\n        placeholder={tableSelectPlaceholder}\n        disabled={tableSelectDisabled}\n        autosize={false}\n        onChange={this.changeTable}\n        value={this.state.tableName}\n        loadOptions={this.getTableNamesBySubStr}\n        optionRenderer={this.renderTableOption}\n      />\n    );\n    return this.renderSelectRow(\n      select,\n      <RefreshLabel\n        onClick={() => this.changeSchema({ value: this.props.schema }, true)}\n        tooltipContent={t('Force refresh table list')}\n      />,\n    );\n  }\n\n  renderSeeTableLabel() {\n    return (\n      <div className=\"section\">\n        <ControlLabel>\n          {t('See table schema')}{' '}\n          {this.props.schema && (\n            <small>\n              ({this.state.tableOptions.length} in <i>{this.props.schema}</i>)\n            </small>\n          )}\n        </ControlLabel>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"TableSelector\">\n        {this.renderDatabaseSelect()}\n        {this.renderSchema()}\n        <div className=\"divider\" />\n        {this.props.sqlLabMode && this.renderSeeTableLabel()}\n        {this.renderTable()}\n      </div>\n    );\n  }\n}\nTableSelector.propTypes = propTypes;\nTableSelector.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}