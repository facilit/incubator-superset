{"ast":null,"code":"import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _flatMapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/flat-map\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nind Option value that matches a possibly string value.\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        * Translate possible string values to `OptionType` objects, fallback to value\nitself if cannot be found in the options list.\nnlways returns an array.\nnexport function findValue(value, options = [], valueKey = 'value') {var _context;\n  if (value === null || value === undefined || value === '') {\n    return [];\n  }\n  const isGroup = _Array$isArray((options[0] || {}).options);\n  const flatOptions = isGroup ?\n  _flatMapInstanceProperty(options).call(options, x => x.options || []) :\n  options;\n  const find = val => {\n    const realVal = (value || {}).hasOwnProperty(valueKey) ?\n    val[valueKey] :\n    val;\n    return _findInstanceProperty(flatOptions).call(flatOptions, x => x === realVal || x[valueKey] === realVal) || val;\n  };\n  // If value is a single string, must return an Array so `cleanValue` won't be\n  // empty: https://github.com/JedWatson/react-select/blob/32ad5c040bdd96cd1ca71010c2558842d684629c/packages/react-select/src/utils.js#L64\n  return _mapInstanceProperty(_context = _Array$isArray(value) ? value : [value]).call(_context, find);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(findValue, \"findValue\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/Select/utils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}