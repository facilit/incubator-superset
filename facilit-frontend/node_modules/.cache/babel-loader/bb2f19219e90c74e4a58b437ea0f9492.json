{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";var _jsxFileName = \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * or more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * with the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * software distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Badge, Col, Label, Tabs, Tab, Well } from 'react-bootstrap';\nimport shortid from 'shortid';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\nimport getClientErrorObject from '../utils/getClientErrorObject';\n\nimport Button from '../components/Button';\nimport Loading from '../components/Loading';\nimport TableSelector from '../components/TableSelector';\nimport CheckboxControl from '../explore/components/controls/CheckboxControl';\nimport TextControl from '../explore/components/controls/TextControl';\nimport SelectControl from '../explore/components/controls/SelectControl';\nimport TextAreaControl from '../explore/components/controls/TextAreaControl';\nimport SelectAsyncControl from '../explore/components/controls/SelectAsyncControl';\nimport SpatialControl from '../explore/components/controls/SpatialControl';\nimport CollectionTable from '../CRUD/CollectionTable';\nimport EditableTitle from '../components/EditableTitle';\nimport Fieldset from '../CRUD/Fieldset';\nimport Field from '../CRUD/Field';\n\nimport withToasts from '../messageToasts/enhancers/withToasts';\n\nimport './main.less';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst checkboxGenerator = (d, onChange) =>\n___EmotionJSX(CheckboxControl, { value: d, onChange: onChange, __source: { fileName: _jsxFileName, lineNumber: 46 }, __self: this });\n\nconst DATA_TYPES = ['STRING', 'NUMERIC', 'DATETIME'];\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 52 }, __self: this },\n    title, \" \", ___EmotionJSX(Badge, { __source: { fileName: _jsxFileName, lineNumber: 53 }, __self: this }, collection ? collection.length : 0)));\n\n\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array };\n\n\nfunction ColumnCollectionTable({\n  columns,\n  onChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator })\n{\n  return (\n    ___EmotionJSX(CollectionTable, {\n      collection: columns,\n      tableColumns: ['column_name', 'type', 'is_dttm', 'filterable', 'groupby'],\n      allowDeletes: true,\n      allowAddItem: allowAddItem,\n      itemGenerator: itemGenerator,\n      expandFieldset:\n      ___EmotionJSX(FormContainer, { __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this },\n      ___EmotionJSX(Fieldset, { compact: true, __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this },\n      showExpression &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"expression\",\n        label: t('SQL Expression'),\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 86 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this }),\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"verbose_name\",\n        label: t('Label'),\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 92 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 94 }, __self: this }),\n\n      allowEditDataType &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"type\",\n        label: t('Data Type'),\n        control:\n        ___EmotionJSX(SelectControl, { choices: DATA_TYPES, name: \"type\", freeForm: true, __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 100 }, __self: this }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"python_date_format\",\n        label: t('Datetime Format'),\n        descr:\n        /* Note the fragmented translations may not work. */\n        ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 113 }, __self: this },\n        t('The pattern of timestamp format. For strings use '),\n        ___EmotionJSX(\"a\", { href: \"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\", __source: { fileName: _jsxFileName, lineNumber: 115 }, __self: this },\n        t('python datetime string pattern')),\n\n        t(' expression which needs to adhere to the '),\n        ___EmotionJSX(\"a\", { href: \"https://en.wikipedia.org/wiki/ISO_8601\", __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this },\n        t('ISO 8601')),\n\n        t(\" standard to ensure that the lexicographical ordering\\n                      coincides with the chronological ordering. If the\\n                      timestamp format does not adhere to the ISO 8601 standard\\n                      you will need to define an expression and type for\\n                      transforming the string into a date or timestamp. Note\\n                      currently time zones are not supported. If time is stored\\n                      in epoch format, put `epoch_s` or `epoch_ms`. If no pattern\\n                      is specified we fall back to using the optional defaults on a per\\n                      database/column name level via the extra parameter.\")),\n\n\n\n\n\n\n\n\n\n\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 133 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this }))),\n\n\n\n\n      columnLabels: {\n        column_name: t('Column'),\n        type: t('Data Type'),\n        groupby: t('Is Dimension'),\n        is_dttm: t('Is Temporal'),\n        filterable: t('Is Filterable') },\n\n      onChange: onChange,\n      itemRenderers: {\n        column_name: (v, onItemChange) =>\n        editableColumnName ?\n        ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onItemChange, __source: { fileName: _jsxFileName, lineNumber: 149 }, __self: this }) :\n\n        v,\n\n        type: d => ___EmotionJSX(Label, { style: { fontSize: '75%' }, __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this }, d),\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator }, __source: { fileName: _jsxFileName, lineNumber: 73 }, __self: this }));\n\n\n\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func };\n\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: '<new column>',\n    filterable: true,\n    groupby: true }) };\n\n\n\nfunction StackedField({ label, formElement }) {\n  return (\n    ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 184 }, __self: this },\n    ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 185 }, __self: this },\n    ___EmotionJSX(\"strong\", { __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this }, label)),\n\n    ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 188 }, __self: this }, formElement)));\n\n\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node };\n\n\nfunction FormContainer({ children }) {\n  return ___EmotionJSX(Well, { style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this }, children);\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node };\n\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  onChange: () => {} };\n\n\nexport class DatasourceEditor extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9;\n    super(props);\n    this.state = {\n      datasource: props.datasource,\n      errors: [],\n      isDruid: props.datasource.type === 'druid',\n      isSqla: props.datasource.type === 'table',\n      databaseColumns: _filterInstanceProperty(_context = props.datasource.columns).call(_context, col => !col.expression),\n      calculatedColumns: _filterInstanceProperty(_context2 = props.datasource.columns).call(_context2,\n      col => !!col.expression),\n\n      metadataLoading: false,\n      activeTabKey: 1 };\n\n\n    this.onChange = _bindInstanceProperty(_context3 = this.onChange).call(_context3, this);\n    this.onDatasourcePropChange = _bindInstanceProperty(_context4 = this.onDatasourcePropChange).call(_context4, this);\n    this.onDatasourceChange = _bindInstanceProperty(_context5 = this.onDatasourceChange).call(_context5, this);\n    this.syncMetadata = _bindInstanceProperty(_context6 = this.syncMetadata).call(_context6, this);\n    this.setColumns = _bindInstanceProperty(_context7 = this.setColumns).call(_context7, this);\n    this.validateAndChange = _bindInstanceProperty(_context8 = this.validateAndChange).call(_context8, this);\n    this.handleTabSelect = _bindInstanceProperty(_context9 = this.handleTabSelect).call(_context9, this);\n  }\n\n  onChange() {\n    const datasource = _Object$assign({},\n    this.state.datasource, {\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns] });\n\n    this.props.onChange(datasource, this.state.errors);\n  }\n  onDatasourceChange(datasource) {\n    this.setState({ datasource }, this.validateAndChange);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    const datasource = _Object$assign({}, this.state.datasource, { [attr]: value });\n    this.setState({ datasource }, this.onDatasourceChange(datasource));\n  }\n\n  setColumns(obj) {\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  mergeColumns(cols) {\n    let { databaseColumns } = this.state;\n    let hasChanged;\n    const currentColNames = _mapInstanceProperty(databaseColumns).call(databaseColumns, col => col.column_name);\n    _forEachInstanceProperty(cols).call(cols, col => {\n      if (_indexOfInstanceProperty(currentColNames).call(currentColNames, col.name) < 0) {\n        // Adding columns\n        databaseColumns = _concatInstanceProperty(databaseColumns).call(databaseColumns, [\n        {\n          id: shortid.generate(),\n          column_name: col.name,\n          type: col.type,\n          groupby: true,\n          filterable: true }]);\n\n\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      this.setColumns({ databaseColumns });\n    }\n  }\n  syncMetadata() {\n    const { datasource } = this.state;\n    // Handle carefully when the schema is empty\n    const endpoint =\n    \"/datasource/external_metadata/\" + datasource.type + \"/\" + datasource.id + \"/\" + (\"?db_id=\" +\n    datasource.database.id) + (\"&schema=\" + (\n    datasource.schema || '')) + (\"&table_name=\" +\n    datasource.datasource_name);\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint }).\n    then(({ json }) => {\n      this.mergeColumns(json);\n      this.props.addSuccessToast(t('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then(({ error, statusText }) => {\n      this.props.addDangerToast(\n      error || statusText || t('An error has occurred'));\n\n      this.setState({ metadataLoading: false });\n    }));\n\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    _forEachInstanceProperty(arr).call(arr, obj => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {var _context10;\n    let errors = [];\n    let dups;\n    const datasource = this.state.datasource;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, obj => obj.column_name);\n    errors = _concatInstanceProperty(errors).call(errors,\n    _mapInstanceProperty(dups).call(dups, name => t('Column name [%s] is duplicated', name)));\n\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, obj => obj.metric_name);\n    errors = _concatInstanceProperty(errors).call(errors,\n    _mapInstanceProperty(dups).call(dups, name => t('Metric name [%s] is duplicated', name)));\n\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = _filterInstanceProperty(_context10 = this.state.calculatedColumns).call(_context10,\n    col => !col.expression && !col.json);\n\n    errors = _concatInstanceProperty(errors).call(errors,\n    _mapInstanceProperty(noFilterCalcCols).call(noFilterCalcCols, (col) =>\n    t('Calculated column [%s] requires an expression', col.column_name)));\n\n\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  renderSettingsFieldset() {\n    const datasource = this.state.datasource;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Basic'),\n        item: datasource,\n        onChange: this.onDatasourceChange, __source: { fileName: _jsxFileName, lineNumber: 366 }, __self: this },\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"tableSelector\",\n        label: t('Physical Table'),\n        control:\n        ___EmotionJSX(TableSelector, {\n          dbId: datasource.database.id,\n          schema: datasource.schema,\n          tableName: datasource.datasource_name,\n          onSchemaChange: (schema) =>\n          this.onDatasourcePropChange('schema', schema),\n\n          onDbChange: (database) =>\n          this.onDatasourcePropChange('database', database),\n\n          onTableChange: (table) =>\n          this.onDatasourcePropChange('datasource_name', table),\n\n          sqlLabMode: false,\n          clearable: false,\n          handleError: this.props.addDangerToast, __source: { fileName: _jsxFileName, lineNumber: 376 }, __self: this }),\n\n\n        descr: t(\n        'The pointer to a physical table. Keep in mind that the chart is ' +\n        'associated to this Superset logical table, and this logical table points ' +\n        'the physical table referenced here.'), __source: { fileName: _jsxFileName, lineNumber: 372 }, __self: this }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"markdown\", offerEditInModal: false, __source: { fileName: _jsxFileName, lineNumber: 405 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 401 }, __self: this }),\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"default_endpoint\",\n        label: t('Default URL'),\n        descr: t(\n        'Default URL to redirect to when accessing from the datasource list page'),\n\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 414 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 408 }, __self: this }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"filter_select_enabled\",\n        label: t('Autocomplete filters'),\n        descr: t('Whether to populate autocomplete filters options'),\n        control: ___EmotionJSX(CheckboxControl, { __source: { fileName: _jsxFileName, lineNumber: 420 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 416 }, __self: this }),\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"fetch_values_predicate\",\n        label: t('Autocomplete Query Predicate'),\n        descr: t(\n        'When using \"Autocomplete filters\", this can be used to improve performance ' +\n        'of the query fetching the values. Use this option to apply a ' +\n        'predicate (WHERE clause) to the query selecting the distinct ' +\n        'values from the table. Typically the intent would be to limit the scan ' +\n        'by applying a relative time filter on a partitioned or indexed time-related field.'),\n\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 433 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 423 }, __self: this }),\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"owners\",\n        label: t('Owners'),\n        descr: t('Owners of the datasource'),\n        control:\n        ___EmotionJSX(SelectAsyncControl, {\n          dataEndpoint: \"/users/api/read\",\n          multi: true,\n          mutator: data => {var _context11;return (\n              _mapInstanceProperty(_context11 = data.pks).call(_context11, (pk, i) => ({\n                value: pk,\n                label: data.result[i].first_name + \" \" + data.result[i].last_name })));}, __source: { fileName: _jsxFileName, lineNumber: 441 }, __self: this }),\n\n\n\n\n        controlProps: {}, __source: { fileName: _jsxFileName, lineNumber: 436 }, __self: this })));\n\n\n\n  }\n\n  renderAdvancedFieldset() {\n    const datasource = this.state.datasource;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Advanced'),\n        item: datasource,\n        onChange: this.onDatasourceChange, __source: { fileName: _jsxFileName, lineNumber: 461 }, __self: this },\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"sql\",\n        label: t('SQL'),\n        descr: t(\n        'When specifying SQL, the datasource acts as a view. ' +\n        'Superset will use this statement as a subquery while grouping and filtering ' +\n        'on the generated parent queries.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"sql\", offerEditInModal: false, __source: { fileName: _jsxFileName, lineNumber: 476 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 467 }, __self: this }),\n\n\n\n      this.state.isDruid &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"json\",\n        label: t('JSON'),\n        descr:\n        ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 485 }, __self: this }, t('The JSON metric or post aggregation definition.')),\n\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"json\", offerEditInModal: false, __source: { fileName: _jsxFileName, lineNumber: 488 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 481 }, __self: this }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"cache_timeout\",\n        label: t('Cache Timeout'),\n        descr: t(\n        'The duration of time in seconds before the cache is invalidated'),\n\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 498 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 492 }, __self: this }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"offset\",\n        label: t('Hours offset'),\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 503 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 500 }, __self: this }),\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"template_params\",\n        label: t('Template parameters'),\n        descr: t(\n        'A set of parameters that become available in the query using Jinja templating syntax'),\n\n        control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 512 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 506 }, __self: this })));\n\n\n\n\n  }\n\n  renderSpatialTab() {var _context12;\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, { collection: spatials, title: t('Spatial'), __source: { fileName: _jsxFileName, lineNumber: 525 }, __self: this }),\n\n        eventKey: 4, __source: { fileName: _jsxFileName, lineNumber: 523 }, __self: this },\n\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['name', 'config'],\n        onChange: _bindInstanceProperty(_context12 = this.onDatasourcePropChange).call(_context12, this, 'spatials'),\n        itemGenerator: () => ({\n          name: '<new spatial>',\n          type: '<no type>',\n          config: null }),\n\n        collection: spatials,\n        allowDeletes: true,\n        itemRenderers: {\n          name: (d, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: d, onSaveTitle: onChange, __source: { fileName: _jsxFileName, lineNumber: 541 }, __self: this }),\n\n          config: (v, onChange) =>\n          ___EmotionJSX(SpatialControl, { value: v, onChange: onChange, choices: allCols, __source: { fileName: _jsxFileName, lineNumber: 544 }, __self: this }) }, __source: { fileName: _jsxFileName, lineNumber: 529 }, __self: this })));\n\n\n\n\n\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {var _context13;\n      return (\n        ___EmotionJSX(Alert, { bsStyle: \"danger\", __source: { fileName: _jsxFileName, lineNumber: 555 }, __self: this },\n        _mapInstanceProperty(_context13 = this.state.errors).call(_context13, (err) =>\n        ___EmotionJSX(\"div\", { key: err, __source: { fileName: _jsxFileName, lineNumber: 557 }, __self: this }, err))));\n\n\n\n    }\n    return null;\n  }\n\n  renderMetricCollection() {var _context14;\n    return (\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['metric_name', 'verbose_name', 'expression'],\n        columnLabels: {\n          metric_name: t('Metric'),\n          verbose_name: t('Label'),\n          expression: t('SQL Expression') },\n\n        expandFieldset:\n        ___EmotionJSX(FormContainer, { __source: { fileName: _jsxFileName, lineNumber: 575 }, __self: this },\n        ___EmotionJSX(Fieldset, { __source: { fileName: _jsxFileName, lineNumber: 576 }, __self: this },\n        ___EmotionJSX(Field, {\n          fieldKey: \"verbose_name\",\n          label: t('Label'),\n          control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 580 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 577 }, __self: this }),\n\n        ___EmotionJSX(Field, {\n          fieldKey: \"description\",\n          label: t('Description'),\n          control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 585 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 582 }, __self: this }),\n\n        ___EmotionJSX(Field, {\n          fieldKey: \"d3format\",\n          label: t('D3 Format'),\n          control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 590 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 587 }, __self: this }),\n\n        ___EmotionJSX(Field, {\n          label: t('Warning Message'),\n          fieldKey: \"warning_text\",\n          description: t(\n          'Warning message to display in the metric selector'),\n\n          control: ___EmotionJSX(TextControl, { __source: { fileName: _jsxFileName, lineNumber: 598 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 592 }, __self: this }))),\n\n\n\n\n        collection: this.state.datasource.metrics,\n        allowAddItem: true,\n        onChange: _bindInstanceProperty(_context14 = this.onDatasourcePropChange).call(_context14, this, 'metrics'),\n        itemGenerator: () => ({\n          metric_name: '<new metric>',\n          verbose_name: '',\n          expression: '' }),\n\n        itemRenderers: {\n          metric_name: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange, __source: { fileName: _jsxFileName, lineNumber: 613 }, __self: this }),\n\n          verbose_name: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange, __source: { fileName: _jsxFileName, lineNumber: 616 }, __self: this }),\n\n          expression: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, {\n            canEdit: true,\n            title: v,\n            onSaveTitle: onChange,\n            extraClasses: ['datasource-sql-expression'],\n            multiLine: true, __source: { fileName: _jsxFileName, lineNumber: 619 }, __self: this }),\n\n\n          description: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange, __source: { fileName: _jsxFileName, lineNumber: 630 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 628 }, __self: this }),\n\n\n          d3format: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange, __source: { fileName: _jsxFileName, lineNumber: 636 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 634 }, __self: this }) },\n\n\n\n        allowDeletes: true, __source: { fileName: _jsxFileName, lineNumber: 567 }, __self: this }));\n\n\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    return (\n      ___EmotionJSX(\"div\", { className: \"Datasource\", __source: { fileName: _jsxFileName, lineNumber: 648 }, __self: this },\n      this.renderErrors(),\n      ___EmotionJSX(Tabs, {\n        id: \"table-tabs\",\n        onSelect: this.handleTabSelect,\n        defaultActiveKey: activeTabKey, __source: { fileName: _jsxFileName, lineNumber: 650 }, __self: this },\n\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: datasource.metrics,\n          title: t('Metrics'), __source: { fileName: _jsxFileName, lineNumber: 657 }, __self: this }),\n\n\n        eventKey: 1, __source: { fileName: _jsxFileName, lineNumber: 655 }, __self: this },\n\n      activeTabKey === 1 && this.renderMetricCollection()),\n\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.databaseColumns,\n          title: t('Columns'), __source: { fileName: _jsxFileName, lineNumber: 668 }, __self: this }),\n\n\n        eventKey: 2, __source: { fileName: _jsxFileName, lineNumber: 666 }, __self: this },\n\n      activeTabKey === 2 &&\n      ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 676 }, __self: this },\n      ___EmotionJSX(ColumnCollectionTable, {\n        columns: this.state.databaseColumns,\n        onChange: (databaseColumns) =>\n        this.setColumns({ databaseColumns }), __source: { fileName: _jsxFileName, lineNumber: 677 }, __self: this }),\n\n\n      ___EmotionJSX(Button, {\n        bsStyle: \"primary\",\n        onClick: this.syncMetadata,\n        className: \"sync-from-source\",\n        disabled: !!datasource.sql,\n        tooltip:\n        datasource.sql ?\n        t('This option is not yet available for views') :\n        null, __source: { fileName: _jsxFileName, lineNumber: 683 }, __self: this },\n\n\n      t('Sync columns from source')),\n\n      this.state.metadataLoading && ___EmotionJSX(Loading, { __source: { fileName: _jsxFileName, lineNumber: 696 }, __self: this }))),\n\n\n\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.calculatedColumns,\n          title: t('Calculated Columns'), __source: { fileName: _jsxFileName, lineNumber: 702 }, __self: this }),\n\n\n        eventKey: 3, __source: { fileName: _jsxFileName, lineNumber: 700 }, __self: this },\n\n      activeTabKey === 3 &&\n      ___EmotionJSX(ColumnCollectionTable, {\n        columns: this.state.calculatedColumns,\n        onChange: (calculatedColumns) =>\n        this.setColumns({ calculatedColumns }),\n\n        editableColumnName: true,\n        showExpression: true,\n        allowAddItem: true,\n        allowEditDataType: true,\n        itemGenerator: () => ({\n          column_name: '<new column>',\n          filterable: true,\n          groupby: true,\n          expression: '<enter SQL expression here>',\n          __expanded: true }), __source: { fileName: _jsxFileName, lineNumber: 710 }, __self: this })),\n\n\n\n\n      ___EmotionJSX(Tab, { eventKey: 4, title: t('Settings'), __source: { fileName: _jsxFileName, lineNumber: 729 }, __self: this },\n      activeTabKey === 4 &&\n      ___EmotionJSX(\"div\", { __source: { fileName: _jsxFileName, lineNumber: 731 }, __self: this },\n      ___EmotionJSX(\"div\", { className: \"m-t-10\", __source: { fileName: _jsxFileName, lineNumber: 732 }, __self: this },\n      ___EmotionJSX(Alert, { bsStyle: \"warning\", __source: { fileName: _jsxFileName, lineNumber: 733 }, __self: this },\n      ___EmotionJSX(\"strong\", { __source: { fileName: _jsxFileName, lineNumber: 734 }, __self: this }, t('Be careful.'), \" \"),\n      t(\n      'Changing these settings will affect all charts using this datasource, including charts owned by other people.'))),\n\n\n\n      ___EmotionJSX(Col, { md: 6, __source: { fileName: _jsxFileName, lineNumber: 740 }, __self: this },\n      ___EmotionJSX(FormContainer, { __source: { fileName: _jsxFileName, lineNumber: 741 }, __self: this }, this.renderSettingsFieldset())),\n\n      ___EmotionJSX(Col, { md: 6, __source: { fileName: _jsxFileName, lineNumber: 743 }, __self: this },\n      ___EmotionJSX(FormContainer, { __source: { fileName: _jsxFileName, lineNumber: 744 }, __self: this }, this.renderAdvancedFieldset())))))));\n\n\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;const _default =\n\nwithToasts(DatasourceEditor);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(checkboxGenerator, \"checkboxGenerator\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATA_TYPES, \"DATA_TYPES\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(CollectionTabTitle, \"CollectionTabTitle\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnCollectionTable, \"ColumnCollectionTable\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(StackedField, \"StackedField\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(FormContainer, \"FormContainer\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(DatasourceEditor, \"DatasourceEditor\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(_default, \"default\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx"],"names":["React","PropTypes","Alert","Badge","Col","Label","Tabs","Tab","Well","shortid","t","SupersetClient","getClientErrorObject","Button","Loading","TableSelector","CheckboxControl","TextControl","SelectControl","TextAreaControl","SelectAsyncControl","SpatialControl","CollectionTable","EditableTitle","Fieldset","Field","withToasts","checkboxGenerator","d","onChange","DATA_TYPES","CollectionTabTitle","title","collection","length","propTypes","string","array","ColumnCollectionTable","columns","editableColumnName","showExpression","allowAddItem","allowEditDataType","itemGenerator","column_name","type","groupby","is_dttm","filterable","v","onItemChange","fontSize","isRequired","func","bool","defaultProps","StackedField","label","formElement","node","FormContainer","children","marginTop","datasource","object","addSuccessToast","addDangerToast","DatasourceEditor","PureComponent","constructor","props","state","errors","isDruid","isSqla","databaseColumns","col","expression","calculatedColumns","metadataLoading","activeTabKey","onDatasourcePropChange","onDatasourceChange","syncMetadata","setColumns","validateAndChange","handleTabSelect","setState","attr","value","obj","validate","mergeColumns","cols","hasChanged","currentColNames","name","id","generate","endpoint","database","schema","datasource_name","get","then","json","catch","response","error","statusText","findDuplicates","arr","accessor","seen","dups","item","push","callback","metrics","metric_name","noFilterCalcCols","renderSettingsFieldset","table","data","pks","pk","i","result","first_name","last_name","renderAdvancedFieldset","renderSpatialTab","spatials","all_cols","allCols","config","renderErrors","err","renderMetricCollection","verbose_name","description","d3format","render","sql","__expanded"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Badge, Col, Label, Tabs, Tab, Well } from 'react-bootstrap';\nimport shortid from 'shortid';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\nimport getClientErrorObject from '../utils/getClientErrorObject';\n\nimport Button from '../components/Button';\nimport Loading from '../components/Loading';\nimport TableSelector from '../components/TableSelector';\nimport CheckboxControl from '../explore/components/controls/CheckboxControl';\nimport TextControl from '../explore/components/controls/TextControl';\nimport SelectControl from '../explore/components/controls/SelectControl';\nimport TextAreaControl from '../explore/components/controls/TextAreaControl';\nimport SelectAsyncControl from '../explore/components/controls/SelectAsyncControl';\nimport SpatialControl from '../explore/components/controls/SpatialControl';\nimport CollectionTable from '../CRUD/CollectionTable';\nimport EditableTitle from '../components/EditableTitle';\nimport Fieldset from '../CRUD/Fieldset';\nimport Field from '../CRUD/Field';\n\nimport withToasts from '../messageToasts/enhancers/withToasts';\n\nimport './main.less';\n\nconst checkboxGenerator = (d, onChange) => (\n  <CheckboxControl value={d} onChange={onChange} />\n);\nconst DATA_TYPES = ['STRING', 'NUMERIC', 'DATETIME'];\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    <div>\n      {title} <Badge>{collection ? collection.length : 0}</Badge>\n    </div>\n  );\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array,\n};\n\nfunction ColumnCollectionTable({\n  columns,\n  onChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator,\n}) {\n  return (\n    <CollectionTable\n      collection={columns}\n      tableColumns={['column_name', 'type', 'is_dttm', 'filterable', 'groupby']}\n      allowDeletes\n      allowAddItem={allowAddItem}\n      itemGenerator={itemGenerator}\n      expandFieldset={\n        <FormContainer>\n          <Fieldset compact>\n            {showExpression && (\n              <Field\n                fieldKey=\"expression\"\n                label={t('SQL Expression')}\n                control={<TextControl />}\n              />\n            )}\n            <Field\n              fieldKey=\"verbose_name\"\n              label={t('Label')}\n              control={<TextControl />}\n            />\n            <Field\n              fieldKey=\"description\"\n              label={t('Description')}\n              control={<TextControl />}\n            />\n            {allowEditDataType && (\n              <Field\n                fieldKey=\"type\"\n                label={t('Data Type')}\n                control={\n                  <SelectControl choices={DATA_TYPES} name=\"type\" freeForm />\n                }\n              />\n            )}\n            <Field\n              fieldKey=\"python_date_format\"\n              label={t('Datetime Format')}\n              descr={\n                /* Note the fragmented translations may not work. */\n                <div>\n                  {t('The pattern of timestamp format. For strings use ')}\n                  <a href=\"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\">\n                    {t('python datetime string pattern')}\n                  </a>\n                  {t(' expression which needs to adhere to the ')}\n                  <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">\n                    {t('ISO 8601')}\n                  </a>\n                  {t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)}\n                </div>\n              }\n              control={<TextControl />}\n            />\n          </Fieldset>\n        </FormContainer>\n      }\n      columnLabels={{\n        column_name: t('Column'),\n        type: t('Data Type'),\n        groupby: t('Is Dimension'),\n        is_dttm: t('Is Temporal'),\n        filterable: t('Is Filterable'),\n      }}\n      onChange={onChange}\n      itemRenderers={{\n        column_name: (v, onItemChange) =>\n          editableColumnName ? (\n            <EditableTitle canEdit title={v} onSaveTitle={onItemChange} />\n          ) : (\n            v\n          ),\n        type: d => <Label style={{ fontSize: '75%' }}>{d}</Label>,\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator,\n      }}\n    />\n  );\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func,\n};\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: '<new column>',\n    filterable: true,\n    groupby: true,\n  }),\n};\n\nfunction StackedField({ label, formElement }) {\n  return (\n    <div>\n      <div>\n        <strong>{label}</strong>\n      </div>\n      <div>{formElement}</div>\n    </div>\n  );\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node,\n};\n\nfunction FormContainer({ children }) {\n  return <Well style={{ marginTop: 20 }}>{children}</Well>;\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n};\n\nexport class DatasourceEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasource: props.datasource,\n      errors: [],\n      isDruid: props.datasource.type === 'druid',\n      isSqla: props.datasource.type === 'table',\n      databaseColumns: props.datasource.columns.filter(col => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n        col => !!col.expression,\n      ),\n      metadataLoading: false,\n      activeTabKey: 1,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n  }\n\n  onChange() {\n    const datasource = {\n      ...this.state.datasource,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns],\n    };\n    this.props.onChange(datasource, this.state.errors);\n  }\n  onDatasourceChange(datasource) {\n    this.setState({ datasource }, this.validateAndChange);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState({ datasource }, this.onDatasourceChange(datasource));\n  }\n\n  setColumns(obj) {\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  mergeColumns(cols) {\n    let { databaseColumns } = this.state;\n    let hasChanged;\n    const currentColNames = databaseColumns.map(col => col.column_name);\n    cols.forEach(col => {\n      if (currentColNames.indexOf(col.name) < 0) {\n        // Adding columns\n        databaseColumns = databaseColumns.concat([\n          {\n            id: shortid.generate(),\n            column_name: col.name,\n            type: col.type,\n            groupby: true,\n            filterable: true,\n          },\n        ]);\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      this.setColumns({ databaseColumns });\n    }\n  }\n  syncMetadata() {\n    const { datasource } = this.state;\n    // Handle carefully when the schema is empty\n    const endpoint =\n      `/datasource/external_metadata/${datasource.type}/${datasource.id}/` +\n      `?db_id=${datasource.database.id}` +\n      `&schema=${datasource.schema || ''}` +\n      `&table_name=${datasource.datasource_name}`;\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint })\n      .then(({ json }) => {\n        this.mergeColumns(json);\n        this.props.addSuccessToast(t('Metadata has been synced'));\n        this.setState({ metadataLoading: false });\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(({ error, statusText }) => {\n          this.props.addDangerToast(\n            error || statusText || t('An error has occurred'),\n          );\n          this.setState({ metadataLoading: false });\n        }),\n      );\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach(obj => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const datasource = this.state.datasource;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, obj => obj.column_name);\n    errors = errors.concat(\n      dups.map(name => t('Column name [%s] is duplicated', name)),\n    );\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, obj => obj.metric_name);\n    errors = errors.concat(\n      dups.map(name => t('Metric name [%s] is duplicated', name)),\n    );\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n      col => !col.expression && !col.json,\n    );\n    errors = errors.concat(\n      noFilterCalcCols.map(col =>\n        t('Calculated column [%s] requires an expression', col.column_name),\n      ),\n    );\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  renderSettingsFieldset() {\n    const datasource = this.state.datasource;\n    return (\n      <Fieldset\n        title={t('Basic')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"tableSelector\"\n            label={t('Physical Table')}\n            control={\n              <TableSelector\n                dbId={datasource.database.id}\n                schema={datasource.schema}\n                tableName={datasource.datasource_name}\n                onSchemaChange={schema =>\n                  this.onDatasourcePropChange('schema', schema)\n                }\n                onDbChange={database =>\n                  this.onDatasourcePropChange('database', database)\n                }\n                onTableChange={table =>\n                  this.onDatasourcePropChange('datasource_name', table)\n                }\n                sqlLabMode={false}\n                clearable={false}\n                handleError={this.props.addDangerToast}\n              />\n            }\n            descr={t(\n              'The pointer to a physical table. Keep in mind that the chart is ' +\n                'associated to this Superset logical table, and this logical table points ' +\n                'the physical table referenced here.',\n            )}\n          />\n        )}\n        <Field\n          fieldKey=\"description\"\n          label={t('Description')}\n          control={\n            <TextAreaControl language=\"markdown\" offerEditInModal={false} />\n          }\n        />\n        <Field\n          fieldKey=\"default_endpoint\"\n          label={t('Default URL')}\n          descr={t(\n            'Default URL to redirect to when accessing from the datasource list page',\n          )}\n          control={<TextControl />}\n        />\n        <Field\n          fieldKey=\"filter_select_enabled\"\n          label={t('Autocomplete filters')}\n          descr={t('Whether to populate autocomplete filters options')}\n          control={<CheckboxControl />}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"fetch_values_predicate\"\n            label={t('Autocomplete Query Predicate')}\n            descr={t(\n              'When using \"Autocomplete filters\", this can be used to improve performance ' +\n                'of the query fetching the values. Use this option to apply a ' +\n                'predicate (WHERE clause) to the query selecting the distinct ' +\n                'values from the table. Typically the intent would be to limit the scan ' +\n                'by applying a relative time filter on a partitioned or indexed time-related field.',\n            )}\n            control={<TextControl />}\n          />\n        )}\n        <Field\n          fieldKey=\"owners\"\n          label={t('Owners')}\n          descr={t('Owners of the datasource')}\n          control={\n            <SelectAsyncControl\n              dataEndpoint=\"/users/api/read\"\n              multi\n              mutator={data =>\n                data.pks.map((pk, i) => ({\n                  value: pk,\n                  label: `${data.result[i].first_name} ${data.result[i].last_name}`,\n                }))\n              }\n            />\n          }\n          controlProps={{}}\n        />\n      </Fieldset>\n    );\n  }\n\n  renderAdvancedFieldset() {\n    const datasource = this.state.datasource;\n    return (\n      <Fieldset\n        title={t('Advanced')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"sql\"\n            label={t('SQL')}\n            descr={t(\n              'When specifying SQL, the datasource acts as a view. ' +\n                'Superset will use this statement as a subquery while grouping and filtering ' +\n                'on the generated parent queries.',\n            )}\n            control={\n              <TextAreaControl language=\"sql\" offerEditInModal={false} />\n            }\n          />\n        )}\n        {this.state.isDruid && (\n          <Field\n            fieldKey=\"json\"\n            label={t('JSON')}\n            descr={\n              <div>{t('The JSON metric or post aggregation definition.')}</div>\n            }\n            control={\n              <TextAreaControl language=\"json\" offerEditInModal={false} />\n            }\n          />\n        )}\n        <Field\n          fieldKey=\"cache_timeout\"\n          label={t('Cache Timeout')}\n          descr={t(\n            'The duration of time in seconds before the cache is invalidated',\n          )}\n          control={<TextControl />}\n        />\n        <Field\n          fieldKey=\"offset\"\n          label={t('Hours offset')}\n          control={<TextControl />}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"template_params\"\n            label={t('Template parameters')}\n            descr={t(\n              'A set of parameters that become available in the query using Jinja templating syntax',\n            )}\n            control={<TextControl />}\n          />\n        )}\n      </Fieldset>\n    );\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      <Tab\n        title={\n          <CollectionTabTitle collection={spatials} title={t('Spatial')} />\n        }\n        eventKey={4}\n      >\n        <CollectionTable\n          tableColumns={['name', 'config']}\n          onChange={this.onDatasourcePropChange.bind(this, 'spatials')}\n          itemGenerator={() => ({\n            name: '<new spatial>',\n            type: '<no type>',\n            config: null,\n          })}\n          collection={spatials}\n          allowDeletes\n          itemRenderers={{\n            name: (d, onChange) => (\n              <EditableTitle canEdit title={d} onSaveTitle={onChange} />\n            ),\n            config: (v, onChange) => (\n              <SpatialControl value={v} onChange={onChange} choices={allCols} />\n            ),\n          }}\n        />\n      </Tab>\n    );\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        <Alert bsStyle=\"danger\">\n          {this.state.errors.map(err => (\n            <div key={err}>{err}</div>\n          ))}\n        </Alert>\n      );\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    return (\n      <CollectionTable\n        tableColumns={['metric_name', 'verbose_name', 'expression']}\n        columnLabels={{\n          metric_name: t('Metric'),\n          verbose_name: t('Label'),\n          expression: t('SQL Expression'),\n        }}\n        expandFieldset={\n          <FormContainer>\n            <Fieldset>\n              <Field\n                fieldKey=\"verbose_name\"\n                label={t('Label')}\n                control={<TextControl />}\n              />\n              <Field\n                fieldKey=\"description\"\n                label={t('Description')}\n                control={<TextControl />}\n              />\n              <Field\n                fieldKey=\"d3format\"\n                label={t('D3 Format')}\n                control={<TextControl />}\n              />\n              <Field\n                label={t('Warning Message')}\n                fieldKey=\"warning_text\"\n                description={t(\n                  'Warning message to display in the metric selector',\n                )}\n                control={<TextControl />}\n              />\n            </Fieldset>\n          </FormContainer>\n        }\n        collection={this.state.datasource.metrics}\n        allowAddItem\n        onChange={this.onDatasourcePropChange.bind(this, 'metrics')}\n        itemGenerator={() => ({\n          metric_name: '<new metric>',\n          verbose_name: '',\n          expression: '',\n        })}\n        itemRenderers={{\n          metric_name: (v, onChange) => (\n            <EditableTitle canEdit title={v} onSaveTitle={onChange} />\n          ),\n          verbose_name: (v, onChange) => (\n            <EditableTitle canEdit title={v} onSaveTitle={onChange} />\n          ),\n          expression: (v, onChange) => (\n            <EditableTitle\n              canEdit\n              title={v}\n              onSaveTitle={onChange}\n              extraClasses={['datasource-sql-expression']}\n              multiLine\n            />\n          ),\n          description: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n          d3format: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n        }}\n        allowDeletes\n      />\n    );\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    return (\n      <div className=\"Datasource\">\n        {this.renderErrors()}\n        <Tabs\n          id=\"table-tabs\"\n          onSelect={this.handleTabSelect}\n          defaultActiveKey={activeTabKey}\n        >\n          <Tab\n            title={\n              <CollectionTabTitle\n                collection={datasource.metrics}\n                title={t('Metrics')}\n              />\n            }\n            eventKey={1}\n          >\n            {activeTabKey === 1 && this.renderMetricCollection()}\n          </Tab>\n          <Tab\n            title={\n              <CollectionTabTitle\n                collection={this.state.databaseColumns}\n                title={t('Columns')}\n              />\n            }\n            eventKey={2}\n          >\n            {activeTabKey === 2 && (\n              <div>\n                <ColumnCollectionTable\n                  columns={this.state.databaseColumns}\n                  onChange={databaseColumns =>\n                    this.setColumns({ databaseColumns })\n                  }\n                />\n                <Button\n                  bsStyle=\"primary\"\n                  onClick={this.syncMetadata}\n                  className=\"sync-from-source\"\n                  disabled={!!datasource.sql}\n                  tooltip={\n                    datasource.sql\n                      ? t('This option is not yet available for views')\n                      : null\n                  }\n                >\n                  {t('Sync columns from source')}\n                </Button>\n                {this.state.metadataLoading && <Loading />}\n              </div>\n            )}\n          </Tab>\n          <Tab\n            title={\n              <CollectionTabTitle\n                collection={this.state.calculatedColumns}\n                title={t('Calculated Columns')}\n              />\n            }\n            eventKey={3}\n          >\n            {activeTabKey === 3 && (\n              <ColumnCollectionTable\n                columns={this.state.calculatedColumns}\n                onChange={calculatedColumns =>\n                  this.setColumns({ calculatedColumns })\n                }\n                editableColumnName\n                showExpression\n                allowAddItem\n                allowEditDataType\n                itemGenerator={() => ({\n                  column_name: '<new column>',\n                  filterable: true,\n                  groupby: true,\n                  expression: '<enter SQL expression here>',\n                  __expanded: true,\n                })}\n              />\n            )}\n          </Tab>\n          <Tab eventKey={4} title={t('Settings')}>\n            {activeTabKey === 4 && (\n              <div>\n                <div className=\"m-t-10\">\n                  <Alert bsStyle=\"warning\">\n                    <strong>{t('Be careful.')} </strong>\n                    {t(\n                      'Changing these settings will affect all charts using this datasource, including charts owned by other people.',\n                    )}\n                  </Alert>\n                </div>\n                <Col md={6}>\n                  <FormContainer>{this.renderSettingsFieldset()}</FormContainer>\n                </Col>\n                <Col md={6}>\n                  <FormContainer>{this.renderAdvancedFieldset()}</FormContainer>\n                </Col>\n              </div>\n            )}\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nexport default withToasts(DatasourceEditor);\n"]},"metadata":{},"sourceType":"module"}