{"ast":null,"code":"import \"core-js/modules/es.promise\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * regarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nnimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, AsyncSelect } from 'src/components/Select';\nimport { ControlLabel, Label } from 'react-bootstrap';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\n\nimport SupersetAsyncSelect from './AsyncSelect';\nimport RefreshLabel from './RefreshLabel';\nimport './TableSelector.less';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  dbId: PropTypes.number.isRequired,\n  schema: PropTypes.string,\n  onSchemaChange: PropTypes.func,\n  onDbChange: PropTypes.func,\n  onSchemasLoad: PropTypes.func,\n  onTablesLoad: PropTypes.func,\n  getDbList: PropTypes.func,\n  onTableChange: PropTypes.func,\n  tableNameSticky: PropTypes.bool,\n  tableName: PropTypes.string,\n  database: PropTypes.object,\n  sqlLabMode: PropTypes.bool,\n  onChange: PropTypes.func,\n  clearable: PropTypes.bool,\n  handleError: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  onDbChange: () => {},\n  onSchemaChange: () => {},\n  onSchemasLoad: () => {},\n  onTablesLoad: () => {},\n  getDbList: () => {},\n  onTableChange: () => {},\n  onChange: () => {},\n  tableNameSticky: true,\n  sqlLabMode: true,\n  clearable: true };\n\n\nexport default class TableSelector extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6;\n    super(props);\n    this.state = {\n      schemaLoading: false,\n      schemaOptions: [],\n      tableLoading: false,\n      tableOptions: [],\n      dbId: props.dbId,\n      schema: props.schema,\n      tableName: props.tableName };\n\n    this.onDatabaseChange = _bindInstanceProperty(_context = this.onDatabaseChange).call(_context, this);\n    this.onSchemaChange = _bindInstanceProperty(_context2 = this.onSchemaChange).call(_context2, this);\n    this.changeTable = _bindInstanceProperty(_context3 = this.changeTable).call(_context3, this);\n    this.dbMutator = _bindInstanceProperty(_context4 = this.dbMutator).call(_context4, this);\n    this.getTableNamesBySubStr = _bindInstanceProperty(_context5 = this.getTableNamesBySubStr).call(_context5, this);\n    this.onChange = _bindInstanceProperty(_context6 = this.onChange).call(_context6, this);\n  }\n\n  componentDidMount() {\n    this.fetchSchemas(this.state.dbId);\n    this.fetchTables();\n  }\n\n  onChange() {\n    this.props.onChange({\n      dbId: this.state.dbId,\n      schema: this.state.schema,\n      tableName: this.state.tableName });\n\n  }\n\n  onDatabaseChange(db, selectChangeMeta) {\n    return this.changeDataBase(db);\n  }\n\n  onSchemaChange(schemaOpt, selectActionMeta) {\n    return this.changeSchema(schemaOpt);\n  }\n\n  getTableNamesBySubStr(substr = 'undefined') {\n    if (!this.props.dbId || !substr) {\n      const options = [];\n      return _Promise.resolve({ options });\n    }\n    const encodedSchema = encodeURIComponent(this.props.schema);\n    const encodedSubstr = encodeURIComponent(substr);\n    return SupersetClient.get({\n      endpoint: encodeURI(\"/superset/tables/\" +\n      this.props.dbId + \"/\" + encodedSchema + \"/\" + encodedSubstr) }).\n\n    then(({ json }) => {var _context7;\n      const options = _mapInstanceProperty(_context7 = json.options).call(_context7, o => ({\n        value: o.value,\n        schema: o.schema,\n        label: o.label,\n        title: o.title,\n        type: o.type }));\n\n      return { options };\n    });\n  }\n\n  dbMutator(data) {var _context8;\n    this.props.getDbList(data.result);\n    if (data.result.length === 0) {\n      this.props.handleError(\n      t(\"It seems you don't have access to any database\"));\n\n    }\n    return _mapInstanceProperty(_context8 = data.result).call(_context8, row => _Object$assign({},\n    row, {\n      // label is used for the typeahead\n      label: row.backend + \" \" + row.database_name }));\n\n  }\n\n  fetchTables(forceRefresh = false, substr = 'undefined') {\n    const { dbId, schema } = this.state;\n    const encodedSchema = encodeURIComponent(schema);\n    const encodedSubstr = encodeURIComponent(substr);\n    if (dbId && schema) {\n      this.setState(() => ({ tableLoading: true, tableOptions: [] }));\n      const endpoint = encodeURI(\"/superset/tables/\" +\n      dbId + \"/\" + encodedSchema + \"/\" + encodedSubstr + \"/\" + !!forceRefresh + \"/\");\n\n      return SupersetClient.get({ endpoint }).\n      then(({ json }) => {var _context9;\n        const options = _mapInstanceProperty(_context9 = json.options).call(_context9, o => ({\n          value: o.value,\n          schema: o.schema,\n          label: o.label,\n          title: o.title,\n          type: o.type }));\n\n        this.setState(() => ({\n          tableLoading: false,\n          tableOptions: options }));\n\n        this.props.onTablesLoad(json.options);\n      }).\n      catch(() => {\n        this.setState(() => ({ tableLoading: false, tableOptions: [] }));\n        this.props.handleError(t('Error while fetching table list'));\n      });\n    }\n    this.setState(() => ({ tableLoading: false, tableOptions: [] }));\n    return _Promise.resolve();\n  }\n\n  fetchSchemas(dbId, forceRefresh = false) {\n    const actualDbId = dbId || this.props.dbId;\n    if (actualDbId) {\n      this.setState({ schemaLoading: true });\n      const endpoint = \"/superset/schemas/\" + actualDbId + \"/\" + forceRefresh + \"/\";\n      return SupersetClient.get({ endpoint }).\n      then(({ json }) => {var _context10;\n        const schemaOptions = _mapInstanceProperty(_context10 = json.schemas).call(_context10, s => ({\n          value: s,\n          label: s,\n          title: s }));\n\n        this.setState({ schemaOptions, schemaLoading: false });\n        this.props.onSchemasLoad(schemaOptions);\n      }).\n      catch(() => {\n        this.setState({ schemaLoading: false, schemaOptions: [] });\n        this.props.handleError(t('Error while fetching schema list'));\n      });\n    }\n    return _Promise.resolve();\n  }\n\n  changeDataBase(db, force = false) {\n    const dbId = db ? db.id : null;\n    this.setState({ schemaOptions: [] });\n    this.props.onSchemaChange(null);\n    this.props.onDbChange(db);\n    this.fetchSchemas(dbId, force);\n    this.setState({ dbId, schema: null, tableOptions: [] }, this.onChange);\n  }\n\n  changeSchema(schemaOpt, force = false) {\n    const schema = schemaOpt ? schemaOpt.value : null;\n    this.props.onSchemaChange(schema);\n    this.setState({ schema }, () => {\n      this.fetchTables(force);\n      this.onChange();\n    });\n  }\n\n  changeTable(tableOpt) {\n    if (!tableOpt) {\n      this.setState({ tableName: '' });\n      return;\n    }\n    const schemaName = tableOpt.schema;\n    const tableName = tableOpt.value;\n    if (this.props.tableNameSticky) {\n      this.setState({ tableName }, this.onChange);\n    }\n    this.props.onTableChange(tableName, schemaName);\n  }\n\n  renderDatabaseOption(db) {\n    return (\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(Label, { bsStyle: \"default\", className: \"m-r-5\" },\n      db.backend),\n\n      db.database_name));\n\n\n  }\n\n  renderTableOption(option) {\n    return (\n      ___EmotionJSX(\"span\", { className: \"TableLabel\" },\n      ___EmotionJSX(\"span\", { className: \"m-r-5\" },\n      ___EmotionJSX(\"small\", { className: \"text-muted\" },\n      ___EmotionJSX(\"i\", {\n        className: \"fa fa-\" + (option.type === 'view' ? 'eye' : 'table') }))),\n\n\n\n      option.label));\n\n\n  }\n\n  renderSelectRow(select, refreshBtn) {\n    return (\n      ___EmotionJSX(\"div\", { className: \"section\" },\n      ___EmotionJSX(\"span\", { className: \"select\" }, select),\n      ___EmotionJSX(\"span\", { className: \"refresh-col\" }, refreshBtn)));\n\n\n  }\n\n  renderDatabaseSelect() {\n    return this.renderSelectRow(\n    ___EmotionJSX(SupersetAsyncSelect, {\n      dataEndpoint:\n      '/api/v1/database/?q=' +\n      '(keys:!(none),' +\n      'filters:!((col:expose_in_sqllab,opr:eq,value:!t)),' +\n      'order_columns:database_name,order_direction:asc,page:0,page_size:-1)',\n\n      onChange: this.onDatabaseChange,\n      onAsyncError: () =>\n      this.props.handleError(t('Error while fetching database list')),\n\n      clearable: false,\n      value: this.state.dbId,\n      valueKey: \"id\",\n      valueRenderer: (db) =>\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", { className: \"text-muted m-r-5\" }, t('Database:')),\n      this.renderDatabaseOption(db)),\n\n\n      optionRenderer: this.renderDatabaseOption,\n      mutator: this.dbMutator,\n      placeholder: t('Select a database'),\n      autoSelect: true }));\n\n\n  }\n\n  renderSchema() {\n    return this.renderSelectRow(\n    ___EmotionJSX(Select, {\n      name: \"select-schema\",\n      placeholder: t('Select a schema (%s)', this.state.schemaOptions.length),\n      options: this.state.schemaOptions,\n      value: this.props.schema,\n      valueRenderer: (o) =>\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", { className: \"text-muted\" }, t('Schema:')), \" \", o.label),\n\n\n      isLoading: this.state.schemaLoading,\n      autosize: false,\n      onChange: this.onSchemaChange }),\n\n    ___EmotionJSX(RefreshLabel, {\n      onClick: () => this.onDatabaseChange({ id: this.props.dbId }, true),\n      tooltipContent: t('Force refresh schema list') }));\n\n\n  }\n\n  renderTable() {\n    let tableSelectPlaceholder;\n    let tableSelectDisabled = false;\n    if (\n    this.props.database &&\n    this.props.database.allow_multi_schema_metadata_fetch)\n    {\n      tableSelectPlaceholder = t('Type to search ...');\n    } else {\n      tableSelectPlaceholder = t('Select table ');\n      tableSelectDisabled = true;\n    }\n    const options = this.state.tableOptions;\n    const select = this.props.schema ?\n    ___EmotionJSX(Select, {\n      name: \"select-table\",\n      isLoading: this.state.tableLoading,\n      ignoreAccents: false,\n      placeholder: t('Select table or type table name'),\n      autosize: false,\n      onChange: this.changeTable,\n      options: options,\n      value: this.state.tableName,\n      optionRenderer: this.renderTableOption }) :\n\n\n    ___EmotionJSX(AsyncSelect, {\n      name: \"async-select-table\",\n      placeholder: tableSelectPlaceholder,\n      disabled: tableSelectDisabled,\n      autosize: false,\n      onChange: this.changeTable,\n      value: this.state.tableName,\n      loadOptions: this.getTableNamesBySubStr,\n      optionRenderer: this.renderTableOption });\n\n\n    return this.renderSelectRow(\n    select,\n    ___EmotionJSX(RefreshLabel, {\n      onClick: () => this.changeSchema({ value: this.props.schema }, true),\n      tooltipContent: t('Force refresh table list') }));\n\n\n  }\n\n  renderSeeTableLabel() {\n    return (\n      ___EmotionJSX(\"div\", { className: \"section\" },\n      ___EmotionJSX(ControlLabel, null,\n      t('See table schema'), ' ',\n      this.props.schema &&\n      ___EmotionJSX(\"small\", null, \"(\",\n      this.state.tableOptions.length, \" in \", ___EmotionJSX(\"i\", null, this.props.schema), \")\"))));\n\n\n\n\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"div\", { className: \"TableSelector\" },\n      this.renderDatabaseSelect(),\n      this.renderSchema(),\n      ___EmotionJSX(\"div\", { className: \"divider\" }),\n      this.props.sqlLabMode && this.renderSeeTableLabel(),\n      this.renderTable()));\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}TableSelector.propTypes = propTypes;\nTableSelector.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/TableSelector.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/TableSelector.jsx\");reactHotLoader.register(TableSelector, \"TableSelector\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/components/TableSelector.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}