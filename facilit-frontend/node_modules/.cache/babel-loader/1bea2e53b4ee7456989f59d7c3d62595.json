{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";var _jsxFileName = \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/AdhocFilterEditPopoverSimpleTabContent.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * with the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nnimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup } from 'react-bootstrap';\nimport { Select, Creatable } from 'src/components/Select';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\n\nimport AdhocFilter, { EXPRESSION_TYPES, CLAUSES } from '../AdhocFilter';\nimport adhocMetricType from '../propTypes/adhocMetricType';\nimport columnType from '../propTypes/columnType';\nimport {\nOPERATORS,\nOPERATORS_OPTIONS,\nTABLE_ONLY_OPERATORS,\nDRUID_ONLY_OPERATORS,\nHAVING_OPERATORS,\nMULTI_OPERATORS,\nCUSTOM_OPERATORS,\nDISABLE_INPUT_OPERATORS } from\n'../constants';\nimport FilterDefinitionOption from './FilterDefinitionOption';\nimport SelectControl from './controls/SelectControl';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  adhocFilter: PropTypes.instanceOf(AdhocFilter).isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(\n  PropTypes.oneOfType([\n  columnType,\n  PropTypes.shape({ saved_metric_name: PropTypes.string.isRequired }),\n  adhocMetricType])).\n\n  isRequired,\n  onHeightChange: PropTypes.func.isRequired,\n  datasource: PropTypes.object,\n  partitionColumn: PropTypes.string };\n\n\nconst defaultProps = {\n  datasource: {} };\n\n\nfunction translateOperator(operator) {\n  if (operator === OPERATORS['==']) {\n    return 'equals';\n  } else if (operator === OPERATORS['!=']) {\n    return 'not equal to';\n  } else if (operator === OPERATORS.LIKE) {\n    return 'like';\n  } else if (operator === OPERATORS['LATEST PARTITION']) {\n    return 'use latest_partition template';\n  }\n  return operator;\n}\n\nconst SINGLE_LINE_SELECT_CONTROL_HEIGHT = 30;\n\nexport default class AdhocFilterEditPopoverSimpleTabContent extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7;\n    super(props);\n    this.onSubjectChange = _bindInstanceProperty(_context = this.onSubjectChange).call(_context, this);\n    this.onOperatorChange = _bindInstanceProperty(_context2 = this.onOperatorChange).call(_context2, this);\n    this.onComparatorChange = _bindInstanceProperty(_context3 = this.onComparatorChange).call(_context3, this);\n    this.onInputComparatorChange = _bindInstanceProperty(_context4 = this.onInputComparatorChange).call(_context4, this);\n    this.isOperatorRelevant = _bindInstanceProperty(_context5 = this.isOperatorRelevant).call(_context5, this);\n    this.refreshComparatorSuggestions = _bindInstanceProperty(_context6 = this.refreshComparatorSuggestions).call(_context6,\n    this);\n\n    this.multiComparatorRef = _bindInstanceProperty(_context7 = this.multiComparatorRef).call(_context7, this);\n\n    this.state = {\n      suggestions: [],\n      multiComparatorHeight: SINGLE_LINE_SELECT_CONTROL_HEIGHT,\n      abortActiveRequest: null };\n\n\n    this.selectProps = {\n      isMulti: false,\n      name: 'select-column',\n      labelKey: 'label',\n      autosize: false,\n      clearable: false };\n\n  }\n\n  UNSAFE_componentWillMount() {\n    this.refreshComparatorSuggestions();\n  }\n\n  componentDidMount() {\n    this.handleMultiComparatorInputHeightChange();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.adhocFilter.subject !== this.props.adhocFilter.subject) {\n      this.refreshComparatorSuggestions();\n    }\n    this.handleMultiComparatorInputHeightChange();\n  }\n\n  onSubjectChange(option) {\n    let subject;\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && option.column_name) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else if (option && (option.saved_metric_name || option.label)) {\n      subject = option.saved_metric_name || option.label;\n      clause = CLAUSES.HAVING;\n    }\n    const { operator } = this.props.adhocFilter;\n    this.props.onChange(\n    this.props.adhocFilter.duplicateWith({\n      subject,\n      clause,\n      operator:\n      operator && this.isOperatorRelevant(operator, subject) ?\n      operator :\n      null,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n\n  }\n\n  onOperatorChange(operator) {\n    const currentComparator = this.props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operator)) {var _context8;\n      newComparator = _Array$isArray(currentComparator) ?\n      currentComparator :\n      _filterInstanceProperty(_context8 = [currentComparator]).call(_context8, element => element);\n    } else {\n      newComparator = _Array$isArray(currentComparator) ?\n      currentComparator[0] :\n      currentComparator;\n    }\n\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        subject: this.props.adhocFilter.subject,\n        clause: CLAUSES.WHERE,\n        operator,\n        expressionType: EXPRESSION_TYPES.SQL,\n        datasource: this.props.datasource }));\n\n\n    } else {\n      this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        operator,\n        comparator: newComparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n\n    }\n  }\n\n  onInputComparatorChange(event) {\n    this.onComparatorChange(event.target.value);\n  }\n\n  onComparatorChange(comparator) {\n    this.props.onChange(\n    this.props.adhocFilter.duplicateWith({\n      comparator,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n\n  }\n\n  handleMultiComparatorInputHeightChange() {\n    if (this.multiComparatorComponent) {var _this$multiComparator, _this$multiComparator2;\n      const multiComparatorDOMNode = (_this$multiComparator = this.multiComparatorComponent) === null || _this$multiComparator === void 0 ? void 0 : (_this$multiComparator2 = _this$multiComparator.select) === null || _this$multiComparator2 === void 0 ? void 0 : _this$multiComparator2.\n      select.controlRef;\n      if (multiComparatorDOMNode) {\n        if (\n        multiComparatorDOMNode.clientHeight !==\n        this.state.multiComparatorHeight)\n        {\n          this.props.onHeightChange(\n          multiComparatorDOMNode.clientHeight -\n          this.state.multiComparatorHeight);\n\n          this.setState({\n            multiComparatorHeight: multiComparatorDOMNode.clientHeight });\n\n        }\n      }\n    }\n  }\n\n  refreshComparatorSuggestions() {\n    const datasource = this.props.datasource;\n    const col = this.props.adhocFilter.subject;\n    const having = this.props.adhocFilter.clause === CLAUSES.HAVING;\n\n    if (col && datasource && datasource.filter_select && !having) {\n      if (this.state.abortActiveRequest) {\n        this.state.abortActiveRequest();\n      }\n\n      const controller = new AbortController();\n      const { signal } = controller;\n      this.setState({ abortActiveRequest: controller.abort, loading: true });\n\n      SupersetClient.get({\n        signal,\n        endpoint: \"/superset/filter/\" + datasource.type + \"/\" + datasource.id + \"/\" + col + \"/\" }).\n\n      then(({ json }) => {\n        this.setState(() => ({\n          suggestions: json,\n          abortActiveRequest: null,\n          loading: false }));\n\n      }).\n      catch(error => {\n        this.setState(() => ({\n          suggestions: [],\n          abortActiveRequest: null,\n          loading: false }));\n\n      });\n    }\n  }\n\n  isOperatorRelevant(operator, subject) {\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      const { partitionColumn } = this.props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n\n    return !(\n    this.props.datasource.type === 'druid' &&\n    _indexOfInstanceProperty(TABLE_ONLY_OPERATORS).call(TABLE_ONLY_OPERATORS, operator) >= 0 ||\n    this.props.datasource.type === 'table' &&\n    _indexOfInstanceProperty(DRUID_ONLY_OPERATORS).call(DRUID_ONLY_OPERATORS, operator) >= 0 ||\n    this.props.adhocFilter.clause === CLAUSES.HAVING &&\n    _indexOfInstanceProperty(HAVING_OPERATORS).call(HAVING_OPERATORS, operator) === -1);\n\n  }\n\n  focusComparator(ref) {\n    if (ref) {\n      ref.focus();\n    }\n  }\n\n  multiComparatorRef(ref) {\n    if (ref) {\n      this.multiComparatorComponent = ref;\n    }\n  }\n\n  renderSubjectOptionLabel(option) {\n    return ___EmotionJSX(FilterDefinitionOption, { option: option, __source: { fileName: _jsxFileName, lineNumber: 278 }, __self: this });\n  }\n\n  renderSubjectOptionValue({ value }) {\n    return ___EmotionJSX(\"span\", { __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this }, value);\n  }\n\n  render() {\n    const { adhocFilter, options: columns, datasource } = this.props;\n    const { subject, operator, comparator } = adhocFilter;\n    const subjectSelectProps = {\n      options: columns,\n      value: subject ? { value: subject } : undefined,\n      onChange: this.onSubjectChange,\n      optionRenderer: this.renderSubjectOptionLabel,\n      valueRenderer: this.renderSubjectOptionValue,\n      valueKey: 'filterOptionName',\n      noResultsText: t(\n      'No such column found. To filter on a metric, try the Custom SQL tab.') };\n\n\n\n    if (datasource.type === 'druid') {\n      subjectSelectProps.placeholder = t(\n      '%s column(s) and metric(s)',\n      columns.length);\n\n    } else {\n      // we cannot support simple ad-hoc filters for metrics because we don't know what type\n      // the value should be cast to (without knowing the output type of the aggregate, which\n      // becomes a rather complicated problem)\n      subjectSelectProps.placeholder =\n      adhocFilter.clause === CLAUSES.WHERE ?\n      t('%s column(s)', columns.length) :\n      t('To filter on a metric, use Custom SQL tab.');\n      // make sure options have `column_name`\n      subjectSelectProps.options = _filterInstanceProperty(columns).call(columns, option => option.column_name);\n    }\n\n    const operatorSelectProps = {\n      placeholder: t('%s operators(s)', OPERATORS_OPTIONS.length),\n      // like AGGREGTES_OPTIONS, operator options are string\n      options: _filterInstanceProperty(OPERATORS_OPTIONS).call(OPERATORS_OPTIONS, (op) =>\n      this.isOperatorRelevant(op, subject)),\n\n      value: operator,\n      onChange: this.onOperatorChange,\n      getOptionLabel: translateOperator };\n\n\n    return (\n      ___EmotionJSX(\"span\", { __source: { fileName: _jsxFileName, lineNumber: 329 }, __self: this },\n      ___EmotionJSX(FormGroup, { className: \"adhoc-filter-simple-column-dropdown\", __source: { fileName: _jsxFileName, lineNumber: 330 }, __self: this },\n      ___EmotionJSX(Select, _extends({},\n      this.selectProps,\n      subjectSelectProps, {\n        name: \"filter-column\", __source: { fileName: _jsxFileName, lineNumber: 331 }, __self: this }))),\n\n\n      ___EmotionJSX(FormGroup, { __source: { fileName: _jsxFileName, lineNumber: 337 }, __self: this },\n      ___EmotionJSX(Select, _extends({},\n      this.selectProps,\n      operatorSelectProps, {\n        name: \"filter-operator\", __source: { fileName: _jsxFileName, lineNumber: 338 }, __self: this }))),\n\n\n      ___EmotionJSX(FormGroup, { \"data-test\": \"adhoc-filter-simple-value\", __source: { fileName: _jsxFileName, lineNumber: 344 }, __self: this },\n      MULTI_OPERATORS.has(operator) ||\n      this.state.suggestions.length > 0 ?\n      ___EmotionJSX(SelectControl, {\n        name: \"filter-value\",\n        autoFocus: true,\n        freeForm: true,\n        multi: MULTI_OPERATORS.has(operator),\n        value: comparator,\n        isLoading: this.state.loading,\n        choices: this.state.suggestions,\n        onChange: this.onComparatorChange,\n        showHeader: false,\n        noResultsText: t('type a value here'),\n        selectRef: this.multiComparatorRef,\n        disabled: _includesInstanceProperty(DISABLE_INPUT_OPERATORS).call(DISABLE_INPUT_OPERATORS, operator), __source: { fileName: _jsxFileName, lineNumber: 347 }, __self: this }) :\n\n\n      ___EmotionJSX(\"input\", {\n        name: \"filter-value\",\n        ref: this.focusComparator,\n        type: \"text\",\n        onChange: this.onInputComparatorChange,\n        value: comparator,\n        className: \"form-control input-sm\",\n        placeholder: t('Filter value'),\n        disabled: _includesInstanceProperty(DISABLE_INPUT_OPERATORS).call(DISABLE_INPUT_OPERATORS, operator), __source: { fileName: _jsxFileName, lineNumber: 362 }, __self: this }))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}AdhocFilterEditPopoverSimpleTabContent.propTypes = propTypes;\nAdhocFilterEditPopoverSimpleTabContent.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(translateOperator, \"translateOperator\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(SINGLE_LINE_SELECT_CONTROL_HEIGHT, \"SINGLE_LINE_SELECT_CONTROL_HEIGHT\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(AdhocFilterEditPopoverSimpleTabContent, \"AdhocFilterEditPopoverSimpleTabContent\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/AdhocFilterEditPopoverSimpleTabContent.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/AdhocFilterEditPopoverSimpleTabContent.jsx"],"names":["React","PropTypes","FormGroup","Select","Creatable","t","SupersetClient","AdhocFilter","EXPRESSION_TYPES","CLAUSES","adhocMetricType","columnType","OPERATORS","OPERATORS_OPTIONS","TABLE_ONLY_OPERATORS","DRUID_ONLY_OPERATORS","HAVING_OPERATORS","MULTI_OPERATORS","CUSTOM_OPERATORS","DISABLE_INPUT_OPERATORS","FilterDefinitionOption","SelectControl","propTypes","adhocFilter","instanceOf","isRequired","onChange","func","options","arrayOf","oneOfType","shape","saved_metric_name","string","onHeightChange","datasource","object","partitionColumn","defaultProps","translateOperator","operator","LIKE","SINGLE_LINE_SELECT_CONTROL_HEIGHT","AdhocFilterEditPopoverSimpleTabContent","Component","constructor","props","onSubjectChange","onOperatorChange","onComparatorChange","onInputComparatorChange","isOperatorRelevant","refreshComparatorSuggestions","multiComparatorRef","state","suggestions","multiComparatorHeight","abortActiveRequest","selectProps","isMulti","name","labelKey","autosize","clearable","UNSAFE_componentWillMount","componentDidMount","handleMultiComparatorInputHeightChange","componentDidUpdate","prevProps","subject","option","clause","column_name","WHERE","label","HAVING","duplicateWith","expressionType","SIMPLE","currentComparator","comparator","newComparator","has","element","SQL","event","target","value","multiComparatorComponent","multiComparatorDOMNode","select","controlRef","clientHeight","setState","col","having","filter_select","controller","AbortController","signal","abort","loading","get","endpoint","type","id","then","json","catch","error","focusComparator","ref","focus","renderSubjectOptionLabel","renderSubjectOptionValue","render","columns","subjectSelectProps","undefined","optionRenderer","valueRenderer","valueKey","noResultsText","placeholder","length","operatorSelectProps","op","getOptionLabel"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup } from 'react-bootstrap';\nimport { Select, Creatable } from 'src/components/Select';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\n\nimport AdhocFilter, { EXPRESSION_TYPES, CLAUSES } from '../AdhocFilter';\nimport adhocMetricType from '../propTypes/adhocMetricType';\nimport columnType from '../propTypes/columnType';\nimport {\n  OPERATORS,\n  OPERATORS_OPTIONS,\n  TABLE_ONLY_OPERATORS,\n  DRUID_ONLY_OPERATORS,\n  HAVING_OPERATORS,\n  MULTI_OPERATORS,\n  CUSTOM_OPERATORS,\n  DISABLE_INPUT_OPERATORS,\n} from '../constants';\nimport FilterDefinitionOption from './FilterDefinitionOption';\nimport SelectControl from './controls/SelectControl';\n\nconst propTypes = {\n  adhocFilter: PropTypes.instanceOf(AdhocFilter).isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      columnType,\n      PropTypes.shape({ saved_metric_name: PropTypes.string.isRequired }),\n      adhocMetricType,\n    ]),\n  ).isRequired,\n  onHeightChange: PropTypes.func.isRequired,\n  datasource: PropTypes.object,\n  partitionColumn: PropTypes.string,\n};\n\nconst defaultProps = {\n  datasource: {},\n};\n\nfunction translateOperator(operator) {\n  if (operator === OPERATORS['==']) {\n    return 'equals';\n  } else if (operator === OPERATORS['!=']) {\n    return 'not equal to';\n  } else if (operator === OPERATORS.LIKE) {\n    return 'like';\n  } else if (operator === OPERATORS['LATEST PARTITION']) {\n    return 'use latest_partition template';\n  }\n  return operator;\n}\n\nconst SINGLE_LINE_SELECT_CONTROL_HEIGHT = 30;\n\nexport default class AdhocFilterEditPopoverSimpleTabContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubjectChange = this.onSubjectChange.bind(this);\n    this.onOperatorChange = this.onOperatorChange.bind(this);\n    this.onComparatorChange = this.onComparatorChange.bind(this);\n    this.onInputComparatorChange = this.onInputComparatorChange.bind(this);\n    this.isOperatorRelevant = this.isOperatorRelevant.bind(this);\n    this.refreshComparatorSuggestions = this.refreshComparatorSuggestions.bind(\n      this,\n    );\n    this.multiComparatorRef = this.multiComparatorRef.bind(this);\n\n    this.state = {\n      suggestions: [],\n      multiComparatorHeight: SINGLE_LINE_SELECT_CONTROL_HEIGHT,\n      abortActiveRequest: null,\n    };\n\n    this.selectProps = {\n      isMulti: false,\n      name: 'select-column',\n      labelKey: 'label',\n      autosize: false,\n      clearable: false,\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.refreshComparatorSuggestions();\n  }\n\n  componentDidMount() {\n    this.handleMultiComparatorInputHeightChange();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.adhocFilter.subject !== this.props.adhocFilter.subject) {\n      this.refreshComparatorSuggestions();\n    }\n    this.handleMultiComparatorInputHeightChange();\n  }\n\n  onSubjectChange(option) {\n    let subject;\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && option.column_name) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else if (option && (option.saved_metric_name || option.label)) {\n      subject = option.saved_metric_name || option.label;\n      clause = CLAUSES.HAVING;\n    }\n    const { operator } = this.props.adhocFilter;\n    this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        subject,\n        clause,\n        operator:\n          operator && this.isOperatorRelevant(operator, subject)\n            ? operator\n            : null,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    );\n  }\n\n  onOperatorChange(operator) {\n    const currentComparator = this.props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operator)) {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator\n        : [currentComparator].filter(element => element);\n    } else {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator[0]\n        : currentComparator;\n    }\n\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      this.props.onChange(\n        this.props.adhocFilter.duplicateWith({\n          subject: this.props.adhocFilter.subject,\n          clause: CLAUSES.WHERE,\n          operator,\n          expressionType: EXPRESSION_TYPES.SQL,\n          datasource: this.props.datasource,\n        }),\n      );\n    } else {\n      this.props.onChange(\n        this.props.adhocFilter.duplicateWith({\n          operator,\n          comparator: newComparator,\n          expressionType: EXPRESSION_TYPES.SIMPLE,\n        }),\n      );\n    }\n  }\n\n  onInputComparatorChange(event) {\n    this.onComparatorChange(event.target.value);\n  }\n\n  onComparatorChange(comparator) {\n    this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        comparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    );\n  }\n\n  handleMultiComparatorInputHeightChange() {\n    if (this.multiComparatorComponent) {\n      const multiComparatorDOMNode = this.multiComparatorComponent?.select\n        ?.select.controlRef;\n      if (multiComparatorDOMNode) {\n        if (\n          multiComparatorDOMNode.clientHeight !==\n          this.state.multiComparatorHeight\n        ) {\n          this.props.onHeightChange(\n            multiComparatorDOMNode.clientHeight -\n              this.state.multiComparatorHeight,\n          );\n          this.setState({\n            multiComparatorHeight: multiComparatorDOMNode.clientHeight,\n          });\n        }\n      }\n    }\n  }\n\n  refreshComparatorSuggestions() {\n    const datasource = this.props.datasource;\n    const col = this.props.adhocFilter.subject;\n    const having = this.props.adhocFilter.clause === CLAUSES.HAVING;\n\n    if (col && datasource && datasource.filter_select && !having) {\n      if (this.state.abortActiveRequest) {\n        this.state.abortActiveRequest();\n      }\n\n      const controller = new AbortController();\n      const { signal } = controller;\n      this.setState({ abortActiveRequest: controller.abort, loading: true });\n\n      SupersetClient.get({\n        signal,\n        endpoint: `/superset/filter/${datasource.type}/${datasource.id}/${col}/`,\n      })\n        .then(({ json }) => {\n          this.setState(() => ({\n            suggestions: json,\n            abortActiveRequest: null,\n            loading: false,\n          }));\n        })\n        .catch(error => {\n          this.setState(() => ({\n            suggestions: [],\n            abortActiveRequest: null,\n            loading: false,\n          }));\n        });\n    }\n  }\n\n  isOperatorRelevant(operator, subject) {\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      const { partitionColumn } = this.props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n\n    return !(\n      (this.props.datasource.type === 'druid' &&\n        TABLE_ONLY_OPERATORS.indexOf(operator) >= 0) ||\n      (this.props.datasource.type === 'table' &&\n        DRUID_ONLY_OPERATORS.indexOf(operator) >= 0) ||\n      (this.props.adhocFilter.clause === CLAUSES.HAVING &&\n        HAVING_OPERATORS.indexOf(operator) === -1)\n    );\n  }\n\n  focusComparator(ref) {\n    if (ref) {\n      ref.focus();\n    }\n  }\n\n  multiComparatorRef(ref) {\n    if (ref) {\n      this.multiComparatorComponent = ref;\n    }\n  }\n\n  renderSubjectOptionLabel(option) {\n    return <FilterDefinitionOption option={option} />;\n  }\n\n  renderSubjectOptionValue({ value }) {\n    return <span>{value}</span>;\n  }\n\n  render() {\n    const { adhocFilter, options: columns, datasource } = this.props;\n    const { subject, operator, comparator } = adhocFilter;\n    const subjectSelectProps = {\n      options: columns,\n      value: subject ? { value: subject } : undefined,\n      onChange: this.onSubjectChange,\n      optionRenderer: this.renderSubjectOptionLabel,\n      valueRenderer: this.renderSubjectOptionValue,\n      valueKey: 'filterOptionName',\n      noResultsText: t(\n        'No such column found. To filter on a metric, try the Custom SQL tab.',\n      ),\n    };\n\n    if (datasource.type === 'druid') {\n      subjectSelectProps.placeholder = t(\n        '%s column(s) and metric(s)',\n        columns.length,\n      );\n    } else {\n      // we cannot support simple ad-hoc filters for metrics because we don't know what type\n      // the value should be cast to (without knowing the output type of the aggregate, which\n      // becomes a rather complicated problem)\n      subjectSelectProps.placeholder =\n        adhocFilter.clause === CLAUSES.WHERE\n          ? t('%s column(s)', columns.length)\n          : t('To filter on a metric, use Custom SQL tab.');\n      // make sure options have `column_name`\n      subjectSelectProps.options = columns.filter(option => option.column_name);\n    }\n\n    const operatorSelectProps = {\n      placeholder: t('%s operators(s)', OPERATORS_OPTIONS.length),\n      // like AGGREGTES_OPTIONS, operator options are string\n      options: OPERATORS_OPTIONS.filter(op =>\n        this.isOperatorRelevant(op, subject),\n      ),\n      value: operator,\n      onChange: this.onOperatorChange,\n      getOptionLabel: translateOperator,\n    };\n\n    return (\n      <span>\n        <FormGroup className=\"adhoc-filter-simple-column-dropdown\">\n          <Select\n            {...this.selectProps}\n            {...subjectSelectProps}\n            name=\"filter-column\"\n          />\n        </FormGroup>\n        <FormGroup>\n          <Select\n            {...this.selectProps}\n            {...operatorSelectProps}\n            name=\"filter-operator\"\n          />\n        </FormGroup>\n        <FormGroup data-test=\"adhoc-filter-simple-value\">\n          {MULTI_OPERATORS.has(operator) ||\n          this.state.suggestions.length > 0 ? (\n            <SelectControl\n              name=\"filter-value\"\n              autoFocus\n              freeForm\n              multi={MULTI_OPERATORS.has(operator)}\n              value={comparator}\n              isLoading={this.state.loading}\n              choices={this.state.suggestions}\n              onChange={this.onComparatorChange}\n              showHeader={false}\n              noResultsText={t('type a value here')}\n              selectRef={this.multiComparatorRef}\n              disabled={DISABLE_INPUT_OPERATORS.includes(operator)}\n            />\n          ) : (\n            <input\n              name=\"filter-value\"\n              ref={this.focusComparator}\n              type=\"text\"\n              onChange={this.onInputComparatorChange}\n              value={comparator}\n              className=\"form-control input-sm\"\n              placeholder={t('Filter value')}\n              disabled={DISABLE_INPUT_OPERATORS.includes(operator)}\n            />\n          )}\n        </FormGroup>\n      </span>\n    );\n  }\n}\nAdhocFilterEditPopoverSimpleTabContent.propTypes = propTypes;\nAdhocFilterEditPopoverSimpleTabContent.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}