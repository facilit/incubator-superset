{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { t } from '@superset-ui/translation';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport {\nCHART_TYPE,\nDASHBOARD_ROOT_TYPE,\nTAB_TYPE } from\n'../util/componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse({\n  currentNode = {},\n  components = {},\n  filterFields = [],\n  selectedChartId })\n{\n  if (!currentNode) {\n    return null;\n  }\n\n  const type = currentNode.type;\n  if (\n  CHART_TYPE === type &&\n  currentNode &&\n  currentNode.meta &&\n  currentNode.meta.chartId)\n  {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n      currentNode.meta.sliceName || type + \" \" + currentNode.meta.chartId,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId };\n\n\n    return _Object$assign({},\n    chartNode, {\n      children: _mapInstanceProperty(filterFields).call(filterFields, filterField => ({\n        value: currentNode.meta.chartId + \":\" + filterField,\n        label: \"\" + chartNode.label,\n        type: 'filter_box',\n        showCheckbox: false })) });\n\n\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {var _context;\n    _forEachInstanceProperty(_context = currentNode.children).call(_context, child => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId });\n\n\n      const childType = components[child].type;\n      if (_includesInstanceProperty(FILTER_SCOPE_CONTAINER_TYPES).call(FILTER_SCOPE_CONTAINER_TYPES, childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = _concatInstanceProperty(children).call(children, childNodeTree);\n      }\n    });\n  }\n\n  if (_includesInstanceProperty(FILTER_SCOPE_CONTAINER_TYPES).call(FILTER_SCOPE_CONTAINER_TYPES, type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n      currentNode.meta && currentNode.meta.text ?\n      currentNode.meta.text :\n      type + \" \" + currentNode.id;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children };\n\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree({\n  components = {},\n  filterFields = [],\n  selectedChartId })\n{\n  if (_isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId });\n\n  return [_Object$assign({},\n\n  root)];\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FILTER_SCOPE_CONTAINER_TYPES, \"FILTER_SCOPE_CONTAINER_TYPES\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(traverse, \"traverse\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(getFilterScopeNodesTree, \"getFilterScopeNodesTree\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}