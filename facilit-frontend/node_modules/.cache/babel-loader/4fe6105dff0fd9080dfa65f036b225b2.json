{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _entriesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/entries\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * distributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * under the License.\nnimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport { Button } from 'react-bootstrap';\nimport mathjs from 'mathjs';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\nimport { getCategoricalSchemeRegistry } from '@superset-ui/color';\nimport { getChartMetadataRegistry } from '@superset-ui/chart';\nimport { validateNonEmpty } from '@superset-ui/validator';\n\nimport SelectControl from './SelectControl';\nimport TextControl from './TextControl';\nimport CheckboxControl from './CheckboxControl';\n\nimport ANNOTATION_TYPES, {\nANNOTATION_SOURCE_TYPES,\nANNOTATION_TYPES_METADATA,\nDEFAULT_ANNOTATION_TYPE,\nrequiresQuery,\nANNOTATION_SOURCE_TYPES_METADATA } from\n'../../../modules/AnnotationTypes';\n\nimport PopoverSection from '../../../components/PopoverSection';\nimport ControlHeader from '../ControlHeader';\nimport './AnnotationLayer.less';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func };\n\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {} };\n\n\nexport default class AnnotationLayer extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8;\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn } =\n    props;\n\n    const overridesKeys = _Object$keys(overrides);\n    if (_includesInstanceProperty(overridesKeys).call(overridesKeys, 'since') || _includesInstanceProperty(overridesKeys).call(overridesKeys, 'until')) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    this.state = {\n      // base\n      name,\n      oldName: !this.props.name ? null : name,\n      annotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !this.props.name,\n      isLoadingOptions: true,\n      valueOptions: [],\n      validationErrors: {} };\n\n    this.submitAnnotation = _bindInstanceProperty(_context = this.submitAnnotation).call(_context, this);\n    this.deleteAnnotation = _bindInstanceProperty(_context2 = this.deleteAnnotation).call(_context2, this);\n    this.applyAnnotation = _bindInstanceProperty(_context3 = this.applyAnnotation).call(_context3, this);\n    this.fetchOptions = _bindInstanceProperty(_context4 = this.fetchOptions).call(_context4, this);\n    this.handleAnnotationType = _bindInstanceProperty(_context5 = this.handleAnnotationType).call(_context5, this);\n    this.handleAnnotationSourceType = _bindInstanceProperty(_context6 = this.handleAnnotationSourceType).call(_context6,\n    this);\n\n    this.handleValue = _bindInstanceProperty(_context7 = this.handleValue).call(_context7, this);\n    this.isValidForm = _bindInstanceProperty(_context8 = this.isValidForm).call(_context8, this);\n  }\n\n  componentDidMount() {\n    const { annotationType, sourceType, isLoadingOptions } = this.state;\n    this.fetchOptions(annotationType, sourceType, isLoadingOptions);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sourceType !== this.state.sourceType) {\n      this.fetchOptions(this.state.annotationType, this.state.sourceType, true);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {var _context9, _context10, _context11;\n    // Get vis types that can be source.\n    const sources = _mapInstanceProperty(_context9 = _filterInstanceProperty(_context10 = _entriesInstanceProperty(_context11 = getChartMetadataRegistry()).call(_context11)).call(_context10,\n\n    ({ value: chartMetadata }) =>\n    chartMetadata.canBeAnnotationType(annotationType))).call(_context9,\n\n    ({ key, value: chartMetadata }) => ({\n      value: key,\n      label: chartMetadata.name }));\n\n    // Prepend native source if applicable\n    if (ANNOTATION_TYPES_METADATA[annotationType].supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  isValidFormula(value, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      try {\n        mathjs.parse(value).compile().eval({ x: 0 });\n      } catch (err) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn } =\n    this.state;\n    const errors = [\n    validateNonEmpty(name),\n    validateNonEmpty(annotationType),\n    validateNonEmpty(value)];\n\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(this.isValidFormula(value, annotationType));\n    return !_filterInstanceProperty(errors).call(errors, x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      validationErrors: {},\n      value: null });\n\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({\n        sourceType,\n        isLoadingOptions: true,\n        validationErrors: {},\n        value: null });\n\n    }\n  }\n\n  handleValue(value) {\n    this.setState({\n      value,\n      descriptionColumns: null,\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null } });\n\n  }\n\n  fetchOptions(annotationType, sourceType, isLoadingOptions) {\n    if (isLoadingOptions === true) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        SupersetClient.get({\n          endpoint: '/annotationlayermodelview/api/read?' }).\n        then(({ json }) => {var _context12;\n          const layers = json ?\n          _mapInstanceProperty(_context12 = json.result).call(_context12, layer => ({\n            value: layer.id,\n            label: layer.name })) :\n\n          [];\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: layers });\n\n        });\n      } else if (requiresQuery(sourceType)) {\n        SupersetClient.get({ endpoint: '/superset/user_slices' }).then(\n        ({ json }) => {var _context13;\n          const registry = getChartMetadataRegistry();\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: _mapInstanceProperty(_context13 = _filterInstanceProperty(json).call(json,\n            x => {\n              const metadata = registry.get(x.viz_type);\n              return (\n                metadata && metadata.canBeAnnotationType(annotationType));\n\n            })).call(_context13,\n            x => ({ value: x.id, label: x.title, slice: x })) });\n\n        });\n\n      } else {\n        this.setState({\n          isLoadingOptions: false,\n          valueOptions: [] });\n\n      }\n    }\n  }\n\n  deleteAnnotation() {\n    this.props.close();\n    if (!this.state.isNew) {\n      this.props.removeAnnotationLayer(this.state);\n    }\n  }\n\n  applyAnnotation() {\n    if (this.state.name.length) {var _context14;\n      const annotation = {};\n      _forEachInstanceProperty(_context14 = _Object$keys(this.state)).call(_context14, k => {\n        if (this.state[k] !== null) {\n          annotation[k] = this.state[k];\n        }\n      });\n      delete annotation.isNew;\n      delete annotation.valueOptions;\n      delete annotation.isLoadingOptions;\n      delete annotation.validationErrors;\n      annotation.color =\n      annotation.color === AUTOMATIC_COLOR ? null : annotation.color;\n      this.props.addAnnotationLayer(annotation);\n      this.setState({ isNew: false, oldName: this.state.name });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderOption(option) {\n    return (\n      ___EmotionJSX(\"span\", { className: \"optionWrapper\", title: option.label },\n      option.label));\n\n\n  }\n\n  renderValueConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      isLoadingOptions } =\n    this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = 'Annotation Layer';\n        description = 'Select the Annotation Layer you would like to use.';\n      } else {var _context15;\n        label = label = t('Chart');\n        description = \"Use a pre defined Superset Chart as a source for annotations and overlays.\\n        your chart must be one of these visualization types:\\n        [\" +\n\n        _mapInstanceProperty(_context15 = this.getSupportedSourceTypes(annotationType)).call(_context15,\n        x => x.label).\n        join(', ') + \"]\";\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = 'Formula';\n      description = \"Expects a formula with depending time parameter 'x'\\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\\n        Example: '2x+5'\";\n\n\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        ___EmotionJSX(SelectControl, {\n          name: \"annotation-layer-value\",\n          showHeader: true,\n          hovered: true,\n          description: description,\n          label: label,\n          placeholder: \"\",\n          options: valueOptions,\n          isLoading: isLoadingOptions,\n          value: value,\n          onChange: this.handleValue,\n          validationErrors: !value ? ['Mandatory'] : [],\n          optionRenderer: this.renderOption }));\n\n\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        ___EmotionJSX(TextControl, {\n          name: \"annotation-layer-value\",\n          hovered: true,\n          showHeader: true,\n          description: description,\n          label: label,\n          placeholder: \"\",\n          value: value,\n          onChange: this.handleValue,\n          validationErrors:\n          this.isValidFormula(value, annotationType) ? ['Bad formula.'] : [] }));\n\n\n\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns } =\n    this.state;\n    const slice = _sliceInstanceProperty(_findInstanceProperty(valueOptions).call(valueOptions, x => x.value === value) || {});\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {var _context16, _context17, _context18, _context19, _context20, _context21;\n      const columns = _mapInstanceProperty(_context16 = _concatInstanceProperty(_context17 = slice.data.groupby || []).call(_context17,\n      slice.data.all_columns || [])).call(_context16,\n      x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time ?\n      _concatInstanceProperty(_context18 = [{ value: '__timestamp', label: '__timestamp' }]).call(_context18, columns) :\n      columns;\n      return (\n        ___EmotionJSX(\"div\", { style: { marginRight: '2rem' } },\n        ___EmotionJSX(PopoverSection, {\n          isSelected: true,\n          onSelect: () => {},\n          title: \"Annotation Slice Configuration\",\n          info: \"This section allows you to configure how to use the slice\\n               to generate annotations.\" },\n\n\n        (annotationType === ANNOTATION_TYPES.EVENT ||\n        annotationType === ANNOTATION_TYPES.INTERVAL) &&\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-time-column\",\n          label:\n          annotationType === ANNOTATION_TYPES.INTERVAL ?\n          'Interval Start column' :\n          'Event Time Column',\n\n          description: 'This column must contain date/time information.',\n          validationErrors: !timeColumn ? ['Mandatory'] : [],\n          clearable: false,\n          options: timeColumnOptions,\n          value: timeColumn,\n          onChange: v => this.setState({ timeColumn: v }) }),\n\n\n        annotationType === ANNOTATION_TYPES.INTERVAL &&\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-intervalEnd\",\n          label: \"Interval End column\",\n          description: 'This column must contain date/time information.',\n          validationErrors: !intervalEndColumn ? ['Mandatory'] : [],\n          options: columns,\n          value: intervalEndColumn,\n          onChange: v => this.setState({ intervalEndColumn: v }) }),\n\n\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-title\",\n          label: \"Title Column\",\n          description: 'Pick a title for you annotation.',\n          options: _concatInstanceProperty(_context19 = [{ value: '', label: 'None' }]).call(_context19, columns),\n          value: titleColumn,\n          onChange: v => this.setState({ titleColumn: v }) }),\n\n        annotationType !== ANNOTATION_TYPES.TIME_SERIES &&\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-title\",\n          label: \"Description Columns\",\n          description: \"Pick one or more columns that should be shown in the\\n                  annotation. If you don't select a column all of them will be shown.\",\n\n          multi: true,\n          options: columns,\n          value: descriptionColumns,\n          onChange: v => this.setState({ descriptionColumns: v }) }),\n\n\n        ___EmotionJSX(\"div\", { style: { marginTop: '1rem' } },\n        ___EmotionJSX(CheckboxControl, {\n          hovered: true,\n          name: \"annotation-override-time_range\",\n          label: \"Override time range\",\n          description: \"This controls whether the \\\"time_range\\\" field from the current\\n                  view should be passed down to the chart containing the annotation data.\",\n\n          value: !!_findInstanceProperty(_context20 = _Object$keys(overrides)).call(_context20, x => x === 'time_range'),\n          onChange: v => {\n            delete overrides.time_range;\n            if (v) {\n              this.setState({\n                overrides: _Object$assign({}, overrides, { time_range: null }) });\n\n            } else {\n              this.setState({ overrides: _Object$assign({}, overrides) });\n            }\n          } }),\n\n        ___EmotionJSX(CheckboxControl, {\n          hovered: true,\n          name: \"annotation-override-timegrain\",\n          label: \"Override time grain\",\n          description: \"This controls whether the time grain field from the current\\n                  view should be passed down to the chart containing the annotation data.\",\n\n          value:\n          !!_findInstanceProperty(_context21 = _Object$keys(overrides)).call(_context21, x => x === 'time_grain_sqla'),\n\n          onChange: v => {\n            delete overrides.time_grain_sqla;\n            delete overrides.granularity;\n            if (v) {\n              this.setState({\n                overrides: _Object$assign({},\n                overrides, {\n                  time_grain_sqla: null,\n                  granularity: null }) });\n\n\n            } else {\n              this.setState({ overrides: _Object$assign({}, overrides) });\n            }\n          } }),\n\n        ___EmotionJSX(TextControl, {\n          hovered: true,\n          name: \"annotation-layer-timeshift\",\n          label: \"Time Shift\",\n          description: \"Time delta in natural language\\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)\",\n\n          placeholder: \"\",\n          value: overrides.time_shift,\n          onChange: (v) =>\n          this.setState({ overrides: _Object$assign({}, overrides, { time_shift: v }) }) })))));\n\n\n\n\n\n\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {var _context22;\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType } =\n    this.state;\n    const colorScheme = _concatInstanceProperty(_context22 = getCategoricalSchemeRegistry().\n    get(this.props.colorScheme).\n    colors).call(_context22);\n    if (\n    color &&\n    color !== AUTOMATIC_COLOR &&\n    !_findInstanceProperty(colorScheme).call(colorScheme, x => x.toLowerCase() === color.toLowerCase()))\n    {\n      colorScheme.push(color);\n    }\n    return (\n      ___EmotionJSX(PopoverSection, {\n        isSelected: true,\n        onSelect: () => {},\n        title: t('Display configuration'),\n        info: t('Configure your how you overlay is displayed here.') },\n\n      ___EmotionJSX(SelectControl, {\n        name: \"annotation-layer-stroke\",\n        label: t('Style')\n        // see '../../../visualizations/nvd3_vis.css'\n        , options: [\n        { value: 'solid', label: 'Solid' },\n        { value: 'dashed', label: 'Dashed' },\n        { value: 'longDashed', label: 'Long Dashed' },\n        { value: 'dotted', label: 'Dotted' }],\n\n        value: style,\n        onChange: v => this.setState({ style: v }) }),\n\n      ___EmotionJSX(SelectControl, {\n        name: \"annotation-layer-opacity\",\n        label: t('Opacity')\n        // see '../../../visualizations/nvd3_vis.css'\n        , options: [\n        { value: '', label: 'Solid' },\n        { value: 'opacityLow', label: '0.2' },\n        { value: 'opacityMedium', label: '0.5' },\n        { value: 'opacityHigh', label: '0.8' }],\n\n        value: opacity,\n        onChange: v => this.setState({ opacity: v }) }),\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, { label: t('Color') }),\n      ___EmotionJSX(\"div\", { style: { display: 'flex', flexDirection: 'column' } },\n      ___EmotionJSX(CompactPicker, {\n        color: color,\n        colors: colorScheme,\n        onChangeComplete: v => this.setState({ color: v.hex }) }),\n\n      ___EmotionJSX(Button, {\n        style: { marginTop: '0.5rem', marginBottom: '0.5rem' },\n        bsStyle: color === AUTOMATIC_COLOR ? 'success' : 'default',\n        bsSize: \"xsmall\",\n        onClick: () => this.setState({ color: AUTOMATIC_COLOR }) }, \"Automatic Color\"))),\n\n\n\n\n\n      ___EmotionJSX(TextControl, {\n        name: \"annotation-layer-stroke-width\",\n        label: t('Line Width'),\n        isInt: true,\n        value: width,\n        onChange: v => this.setState({ width: v }) }),\n\n      annotationType === ANNOTATION_TYPES.TIME_SERIES &&\n      ___EmotionJSX(CheckboxControl, {\n        hovered: true,\n        name: \"annotation-layer-show-markers\",\n        label: \"Show Markers\",\n        description: 'Shows or hides markers for the time series',\n        value: showMarkers,\n        onChange: v => this.setState({ showMarkers: v }) }),\n\n\n      annotationType === ANNOTATION_TYPES.TIME_SERIES &&\n      ___EmotionJSX(CheckboxControl, {\n        hovered: true,\n        name: \"annotation-layer-hide-line\",\n        label: \"Hide Line\",\n        description: 'Hides the Line for the time series',\n        value: hideLine,\n        onChange: v => this.setState({ hideLine: v }) })));\n\n\n\n\n  }\n\n  render() {var _context23;\n    const { isNew, name, annotationType, sourceType, show } = this.state;\n    const isValid = this.isValidForm();\n\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata ?\n    _mapInstanceProperty(_context23 = metadata.supportedAnnotationTypes).call(_context23,\n    type => ANNOTATION_TYPES_METADATA[type]) :\n\n    [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      ___EmotionJSX(\"div\", null,\n      this.props.error &&\n      ___EmotionJSX(\"span\", { style: { color: 'red' } }, \"ERROR: \", this.props.error),\n\n      ___EmotionJSX(\"div\", { style: { display: 'flex', flexDirection: 'row' } },\n      ___EmotionJSX(\"div\", { style: { marginRight: '2rem' } },\n      ___EmotionJSX(PopoverSection, {\n        isSelected: true,\n        onSelect: () => {},\n        title: t('Layer Configuration'),\n        info: t('Configure the basics of your Annotation Layer.') },\n\n      ___EmotionJSX(TextControl, {\n        name: \"annotation-layer-name\",\n        label: t('Name'),\n        placeholder: \"\",\n        value: name,\n        onChange: v => this.setState({ name: v }),\n        validationErrors: !name ? [t('Mandatory')] : [] }),\n\n      ___EmotionJSX(CheckboxControl, {\n        name: \"annotation-layer-hide\",\n        label: t('Hide Layer'),\n        value: !show,\n        onChange: v => this.setState({ show: !v }) }),\n\n      ___EmotionJSX(SelectControl, {\n        hovered: true,\n        description: t('Choose the Annotation Layer Type'),\n        label: t('Annotation Layer Type'),\n        name: \"annotation-layer-type\",\n        options: supportedAnnotationTypes,\n        value: annotationType,\n        onChange: this.handleAnnotationType }),\n\n      !!supportedSourceTypes.length &&\n      ___EmotionJSX(SelectControl, {\n        hovered: true,\n        description: \"Choose the source of your annotations\",\n        label: \"Annotation Source\",\n        name: \"annotation-source-type\",\n        options: supportedSourceTypes,\n        value: sourceType,\n        onChange: this.handleAnnotationSourceType }),\n\n\n      this.renderValueConfiguration())),\n\n\n      this.renderSliceConfiguration(),\n      this.renderDisplayConfiguration()),\n\n      ___EmotionJSX(\"div\", { style: { display: 'flex', justifyContent: 'space-between' } },\n      ___EmotionJSX(Button, { bsSize: \"sm\", onClick: this.deleteAnnotation },\n      !isNew ? t('Remove') : t('Cancel')),\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, {\n        bsSize: \"sm\",\n        disabled: !isValid,\n        onClick: this.applyAnnotation },\n\n      t('Apply')),\n\n\n      ___EmotionJSX(Button, {\n        bsSize: \"sm\",\n        disabled: !isValid,\n        onClick: this.submitAnnotation },\n\n      t('OK'))))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(AUTOMATIC_COLOR, \"AUTOMATIC_COLOR\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");reactHotLoader.register(AnnotationLayer, \"AnnotationLayer\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}