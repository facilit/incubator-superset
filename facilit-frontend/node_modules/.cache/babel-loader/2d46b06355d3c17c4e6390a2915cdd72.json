{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _sortInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/sort\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _valuesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/values\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";var _jsxFileName = \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AdhocFilterControl.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nnimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\n\nimport OnPasteSelect from 'src/components/Select/OnPasteSelect';\n\nimport ControlHeader from '../ControlHeader';\nimport adhocFilterType from '../../propTypes/adhocFilterType';\nimport adhocMetricType from '../../propTypes/adhocMetricType';\nimport savedMetricType from '../../propTypes/savedMetricType';\nimport columnType from '../../propTypes/columnType';\nimport AdhocFilter, { CLAUSES, EXPRESSION_TYPES } from '../../AdhocFilter';\nimport AdhocMetric from '../../AdhocMetric';\nimport { OPERATORS } from '../../constants';\nimport AdhocFilterOption from '../AdhocFilterOption';\nimport FilterDefinitionOption from '../FilterDefinitionOption';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  formData: PropTypes.shape({\n    metric: PropTypes.oneOfType([PropTypes.string, adhocMetricType]),\n    metrics: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, adhocMetricType])) }) };\n\n\n\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  formData: {} };\n\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nexport default class AdhocFilterControl extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5;\n    super(props);\n    this.optionsForSelect = _bindInstanceProperty(_context = this.optionsForSelect).call(_context, this);\n    this.onFilterEdit = _bindInstanceProperty(_context2 = this.onFilterEdit).call(_context2, this);\n    this.onChange = _bindInstanceProperty(_context3 = this.onChange).call(_context3, this);\n    this.getMetricExpression = _bindInstanceProperty(_context4 = this.getMetricExpression).call(_context4, this);\n\n    const filters = _mapInstanceProperty(_context5 = this.props.value || []).call(_context5, (filter) =>\n    isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter);\n\n\n    this.optionRenderer = option => ___EmotionJSX(FilterDefinitionOption, { option: option, __source: { fileName: _jsxFileName, lineNumber: 77 }, __self: this });\n    this.valueRenderer = (adhocFilter) =>\n    ___EmotionJSX(AdhocFilterOption, {\n      adhocFilter: adhocFilter,\n      onFilterEdit: this.onFilterEdit,\n      options: this.state.options,\n      datasource: this.props.datasource, __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this });\n\n\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props) };\n\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) === null || _datasource$database === void 0 ? void 0 : _datasource$database.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView } =\n      datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: \"/superset/extra_table_metadata/\" + dbId + \"/\" + name + \"/\" + schema + \"/\" }).\n\n        then(({ json }) => {\n          if (json && json.partitions) {\n            const partitions = json.partitions;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (\n            partitions &&\n            partitions.cols &&\n            _Object$keys(partitions.cols).length === 1)\n            {\n              const partitionColumn = partitions.cols[0];\n              this.valueRenderer = (adhocFilter) =>\n              ___EmotionJSX(AdhocFilterOption, {\n                adhocFilter: adhocFilter,\n                onFilterEdit: this.onFilterEdit,\n                options: this.state.options,\n                datasource: this.props.datasource,\n                partitionColumn: partitionColumn, __source: { fileName: _jsxFileName, lineNumber: 118 }, __self: this });\n\n\n            }\n          }\n        }).\n        catch(error => {\n          /* eslint-disable no-debugger, no-console */\n          console.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n    this.props.columns !== nextProps.columns ||\n    this.props.formData !== nextProps.formData)\n    {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {var _context6;\n      this.setState({\n        values: _mapInstanceProperty(_context6 = nextProps.value || []).call(_context6, (filter) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter) });\n\n\n    }\n  }\n\n  onFilterEdit(changedFilter) {var _context7;\n    this.props.onChange(\n    _mapInstanceProperty(_context7 = _valuesInstanceProperty(this.state)).call(_context7, value => {\n      if (value.filterOptionName === changedFilter.filterOptionName) {\n        return changedFilter;\n      }\n      return value;\n    }));\n\n  }\n\n  onChange(opts) {var _context8, _context9;\n    const options = _filterInstanceProperty(_context8 = _mapInstanceProperty(_context9 = opts || []).call(_context9,\n    option => {\n      // already a AdhocFilter, skip\n      if (option instanceof AdhocFilter) {\n        return option;\n      }\n      // via datasource saved metric\n      if (option.saved_metric_name) {\n        return new AdhocFilter({\n          expressionType:\n          this.props.datasource.type === 'druid' ?\n          EXPRESSION_TYPES.SIMPLE :\n          EXPRESSION_TYPES.SQL,\n          subject:\n          this.props.datasource.type === 'druid' ?\n          option.saved_metric_name :\n          this.getMetricExpression(option.saved_metric_name),\n          operator: OPERATORS['>'],\n          comparator: 0,\n          clause: CLAUSES.HAVING });\n\n      }\n      // has a custom label\n      if (option.label) {\n        return new AdhocFilter({\n          expressionType:\n          this.props.datasource.type === 'druid' ?\n          EXPRESSION_TYPES.SIMPLE :\n          EXPRESSION_TYPES.SQL,\n          subject:\n          this.props.datasource.type === 'druid' ?\n          option.label :\n          new AdhocMetric(option).translateToSql(),\n          operator: OPERATORS['>'],\n          comparator: 0,\n          clause: CLAUSES.HAVING });\n\n      }\n      // add a new filter item\n      if (option.column_name) {\n        return new AdhocFilter({\n          expressionType: EXPRESSION_TYPES.SIMPLE,\n          subject: option.column_name,\n          operator: OPERATORS['=='],\n          comparator: '',\n          clause: CLAUSES.WHERE,\n          isNew: true });\n\n      }\n      return null;\n    })).call(_context8,\n    option => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {var _context10;\n    return _findInstanceProperty(_context10 = this.props.savedMetrics).call(_context10,\n    savedMetric => savedMetric.metric_name === savedMetricName).\n    expression;\n  }\n\n  optionsForSelect(props) {var _context11, _context12, _context13;\n    const options = _filterInstanceProperty(_context11 = [\n    ...props.columns,\n    ..._mapInstanceProperty(_context12 = [...(props.formData.metrics || []), props.formData.metric]).call(_context12,\n    (metric) =>\n    metric && (\n    typeof metric === 'string' ?\n    { saved_metric_name: metric } :\n    new AdhocMetric(metric)))]).call(_context11,\n\n    option => option);\n\n    return _sortInstanceProperty(_context13 = _reduceInstanceProperty(options).call(options,\n    (results, option) => {\n      if (option.saved_metric_name) {\n        results.push(_Object$assign({},\n        option, {\n          filterOptionName: option.saved_metric_name }));\n\n      } else if (option.column_name) {\n        results.push(_Object$assign({},\n        option, {\n          filterOptionName: '_col_' + option.column_name }));\n\n      } else if (option instanceof AdhocMetric) {\n        results.push(_Object$assign({},\n        option, {\n          filterOptionName: '_adhocmetric_' + option.label }));\n\n      }\n      return results;\n    }, [])).call(_context13,\n    (a, b) =>\n    (a.saved_metric_name || a.column_name || a.label).localeCompare(\n    b.saved_metric_name || b.column_name || b.label));\n\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"div\", { className: \"metrics-select\", __source: { fileName: _jsxFileName, lineNumber: 267 }, __self: this },\n      ___EmotionJSX(ControlHeader, _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 268 }, __self: this })),\n      ___EmotionJSX(OnPasteSelect, {\n        isMulti: true,\n        name: \"select-\" + this.props.name,\n        placeholder: t('choose a column or metric'),\n        options: this.state.options,\n        value: _valuesInstanceProperty(this.state),\n        labelKey: \"label\",\n        valueKey: \"filterOptionName\",\n        clearable: true,\n        closeOnSelect: true,\n        onChange: this.onChange,\n        optionRenderer: this.optionRenderer,\n        valueRenderer: this.valueRenderer, __source: { fileName: _jsxFileName, lineNumber: 269 }, __self: this })));\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AdhocFilterControl.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AdhocFilterControl.jsx\");reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AdhocFilterControl.jsx\");reactHotLoader.register(AdhocFilterControl, \"AdhocFilterControl\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AdhocFilterControl.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/AdhocFilterControl.jsx"],"names":["React","PropTypes","t","SupersetClient","OnPasteSelect","ControlHeader","adhocFilterType","adhocMetricType","savedMetricType","columnType","AdhocFilter","CLAUSES","EXPRESSION_TYPES","AdhocMetric","OPERATORS","AdhocFilterOption","FilterDefinitionOption","propTypes","name","string","onChange","func","value","arrayOf","datasource","object","columns","savedMetrics","formData","shape","metric","oneOfType","metrics","defaultProps","isDictionaryForAdhocFilter","expressionType","AdhocFilterControl","Component","constructor","props","optionsForSelect","onFilterEdit","getMetricExpression","filters","filter","optionRenderer","option","valueRenderer","adhocFilter","state","options","values","componentDidMount","type","dbId","database","id","datasource_name","schema","is_sqllab_view","isSqllabView","get","endpoint","then","json","partitions","cols","length","partitionColumn","catch","error","console","statusText","UNSAFE_componentWillReceiveProps","nextProps","setState","changedFilter","filterOptionName","opts","saved_metric_name","SIMPLE","SQL","subject","operator","comparator","clause","HAVING","label","translateToSql","column_name","WHERE","isNew","savedMetricName","savedMetric","metric_name","expression","results","push","a","b","localeCompare","render"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\n\nimport OnPasteSelect from 'src/components/Select/OnPasteSelect';\n\nimport ControlHeader from '../ControlHeader';\nimport adhocFilterType from '../../propTypes/adhocFilterType';\nimport adhocMetricType from '../../propTypes/adhocMetricType';\nimport savedMetricType from '../../propTypes/savedMetricType';\nimport columnType from '../../propTypes/columnType';\nimport AdhocFilter, { CLAUSES, EXPRESSION_TYPES } from '../../AdhocFilter';\nimport AdhocMetric from '../../AdhocMetric';\nimport { OPERATORS } from '../../constants';\nimport AdhocFilterOption from '../AdhocFilterOption';\nimport FilterDefinitionOption from '../FilterDefinitionOption';\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  formData: PropTypes.shape({\n    metric: PropTypes.oneOfType([PropTypes.string, adhocMetricType]),\n    metrics: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, adhocMetricType]),\n    ),\n  }),\n};\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  formData: {},\n};\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nexport default class AdhocFilterControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.onFilterEdit = this.onFilterEdit.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.getMetricExpression = this.getMetricExpression.bind(this);\n\n    const filters = (this.props.value || []).map(filter =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    );\n\n    this.optionRenderer = option => <FilterDefinitionOption option={option} />;\n    this.valueRenderer = adhocFilter => (\n      <AdhocFilterOption\n        adhocFilter={adhocFilter}\n        onFilterEdit={this.onFilterEdit}\n        options={this.state.options}\n        datasource={this.props.datasource}\n      />\n    );\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props),\n    };\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/`,\n        })\n          .then(({ json }) => {\n            if (json && json.partitions) {\n              const partitions = json.partitions;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions &&\n                partitions.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                const partitionColumn = partitions.cols[0];\n                this.valueRenderer = adhocFilter => (\n                  <AdhocFilterOption\n                    adhocFilter={adhocFilter}\n                    onFilterEdit={this.onFilterEdit}\n                    options={this.state.options}\n                    datasource={this.props.datasource}\n                    partitionColumn={partitionColumn}\n                  />\n                );\n              }\n            }\n          })\n          .catch(error => {\n            /* eslint-disable no-debugger, no-console */\n            console.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.columns !== nextProps.columns ||\n      this.props.formData !== nextProps.formData\n    ) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        values: (nextProps.value || []).map(filter =>\n          isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n        ),\n      });\n    }\n  }\n\n  onFilterEdit(changedFilter) {\n    this.props.onChange(\n      this.state.values.map(value => {\n        if (value.filterOptionName === changedFilter.filterOptionName) {\n          return changedFilter;\n        }\n        return value;\n      }),\n    );\n  }\n\n  onChange(opts) {\n    const options = (opts || [])\n      .map(option => {\n        // already a AdhocFilter, skip\n        if (option instanceof AdhocFilter) {\n          return option;\n        }\n        // via datasource saved metric\n        if (option.saved_metric_name) {\n          return new AdhocFilter({\n            expressionType:\n              this.props.datasource.type === 'druid'\n                ? EXPRESSION_TYPES.SIMPLE\n                : EXPRESSION_TYPES.SQL,\n            subject:\n              this.props.datasource.type === 'druid'\n                ? option.saved_metric_name\n                : this.getMetricExpression(option.saved_metric_name),\n            operator: OPERATORS['>'],\n            comparator: 0,\n            clause: CLAUSES.HAVING,\n          });\n        }\n        // has a custom label\n        if (option.label) {\n          return new AdhocFilter({\n            expressionType:\n              this.props.datasource.type === 'druid'\n                ? EXPRESSION_TYPES.SIMPLE\n                : EXPRESSION_TYPES.SQL,\n            subject:\n              this.props.datasource.type === 'druid'\n                ? option.label\n                : new AdhocMetric(option).translateToSql(),\n            operator: OPERATORS['>'],\n            comparator: 0,\n            clause: CLAUSES.HAVING,\n          });\n        }\n        // add a new filter item\n        if (option.column_name) {\n          return new AdhocFilter({\n            expressionType: EXPRESSION_TYPES.SIMPLE,\n            subject: option.column_name,\n            operator: OPERATORS['=='],\n            comparator: '',\n            clause: CLAUSES.WHERE,\n            isNew: true,\n          });\n        }\n        return null;\n      })\n      .filter(option => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {\n    return this.props.savedMetrics.find(\n      savedMetric => savedMetric.metric_name === savedMetricName,\n    ).expression;\n  }\n\n  optionsForSelect(props) {\n    const options = [\n      ...props.columns,\n      ...[...(props.formData.metrics || []), props.formData.metric].map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce((results, option) => {\n        if (option.saved_metric_name) {\n          results.push({\n            ...option,\n            filterOptionName: option.saved_metric_name,\n          });\n        } else if (option.column_name) {\n          results.push({\n            ...option,\n            filterOptionName: '_col_' + option.column_name,\n          });\n        } else if (option instanceof AdhocMetric) {\n          results.push({\n            ...option,\n            filterOptionName: '_adhocmetric_' + option.label,\n          });\n        }\n        return results;\n      }, [])\n      .sort((a, b) =>\n        (a.saved_metric_name || a.column_name || a.label).localeCompare(\n          b.saved_metric_name || b.column_name || b.label,\n        ),\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"metrics-select\">\n        <ControlHeader {...this.props} />\n        <OnPasteSelect\n          isMulti\n          name={`select-${this.props.name}`}\n          placeholder={t('choose a column or metric')}\n          options={this.state.options}\n          value={this.state.values}\n          labelKey=\"label\"\n          valueKey=\"filterOptionName\"\n          clearable\n          closeOnSelect\n          onChange={this.onChange}\n          optionRenderer={this.optionRenderer}\n          valueRenderer={this.valueRenderer}\n        />\n      </div>\n    );\n  }\n}\n\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}