{"ast":null,"code":"import \"core-js/modules/es.promise\";import \"core-js/modules/es.promise.finally\";import \"core-js/modules/web.dom-collections.iterator\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * under the License.\nnimport { SupersetClient } from '@superset-ui/connection';\nimport { t } from '@superset-ui/translation';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport rison from 'rison';\n// @ts-ignore\nimport { Panel } from 'react-bootstrap';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport ListView from 'src/components/ListView/ListView';\nimport ExpandableList from 'src/components/ExpandableList';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst PAGE_SIZE = 25;\nclass DashboardList extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      dashboardCount: 0,\n      dashboards: [],\n      filterOperators: {},\n      filters: [],\n      lastFetchDataConfig: null,\n      loading: false,\n      permissions: [],\n      dashboardToEdit: null };\n\n    this.initialSort = [{ id: 'changed_on', desc: true }];\n    this.columns = [\n    {\n      Cell: ({ row: { original: { url, dashboard_title: dashboardTitle } } }) => ___EmotionJSX(\"a\", { href: url }, dashboardTitle),\n      Header: t('Title'),\n      accessor: 'dashboard_title',\n      sortable: true },\n\n    {\n      Cell: ({ row: { original: { owners } } }) => ___EmotionJSX(ExpandableList, { items: _mapInstanceProperty(owners).call(owners, ({ first_name: firstName, last_name: lastName }) => firstName + \" \" + lastName), display: 2 }),\n      Header: t('Owners'),\n      accessor: 'owners' },\n\n    {\n      Cell: ({ row: { original: { changed_by_name: changedByName, changed_by_url: changedByUrl } } }) => ___EmotionJSX(\"a\", { href: changedByUrl }, changedByName),\n      Header: t('Creator'),\n      accessor: 'changed_by_fk',\n      sortable: true },\n\n    {\n      Cell: ({ row: { original: { published } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" },\n      published ? ___EmotionJSX(\"i\", { className: \"fa fa-check\" }) : ''),\n\n      Header: t('Published'),\n      accessor: 'published',\n      sortable: true },\n\n    {\n      Cell: ({ row: { original: { changed_on: changedOn } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" }, moment(changedOn).fromNow()),\n      Header: t('Modified'),\n      accessor: 'changed_on',\n      sortable: true },\n\n    {\n      accessor: 'slug',\n      hidden: true },\n\n    {\n      Cell: ({ row: { state, original } }) => {\n        const handleDelete = () => this.handleDashboardDelete(original);\n        const handleEdit = () => this.openDashboardEditModal(original);\n        const handleExport = () => this.handleBulkDashboardExport([original]);\n        if (!this.canEdit && !this.canDelete && !this.canExport) {\n          return null;\n        }\n        return ___EmotionJSX(\"span\", { className: \"actions \" + (state && state.hover ? '' : 'invisible') },\n        this.canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please Confirm'), description: ___EmotionJSX(React.Fragment, null,\n          t('Are you sure you want to delete'), ' ',\n          ___EmotionJSX(\"b\", null, original.dashboard_title), \"?\"),\n          onConfirm: handleDelete },\n        confirmDelete => ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n        ___EmotionJSX(\"i\", { className: \"fa fa-trash\" }))),\n\n\n        this.canExport && ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n        ___EmotionJSX(\"i\", { className: \"fa fa-database\" })),\n\n        this.canEdit && ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n        ___EmotionJSX(\"i\", { className: \"fa fa-pencil\" })));\n\n\n      },\n      Header: t('Actions'),\n      id: 'actions' }];\n\n\n    this.hasPerm = perm => {var _context;\n      if (!this.state.permissions.length) {\n        return false;\n      }\n      return Boolean(_findInstanceProperty(_context = this.state.permissions).call(_context, p => p === perm));\n    };\n    this.openDashboardEditModal = dashboard => {\n      this.setState({\n        dashboardToEdit: dashboard });\n\n    };\n    this.handleDashboardEdit = edits => {\n      this.setState({ loading: true });\n      return SupersetClient.get({\n        endpoint: \"/api/v1/dashboard/\" + edits.id }).\n\n      then(({ json = {} }) => {var _context2;\n        this.setState({\n          dashboards: _mapInstanceProperty(_context2 = this.state.dashboards).call(_context2, dashboard => {\n            if (dashboard.id === json.id) {\n              return json.result;\n            }\n            return dashboard;\n          }),\n          loading: false });\n\n      }).\n      catch(e => {\n        this.props.addDangerToast(t('An error occurred while fetching dashboards: %s', e.statusText));\n      });\n    };\n    this.handleDashboardDelete = ({ id, dashboard_title: dashboardTitle }) => SupersetClient.delete({\n      endpoint: \"/api/v1/dashboard/\" + id }).\n    then(() => {\n      const { lastFetchDataConfig } = this.state;\n      if (lastFetchDataConfig) {\n        this.fetchData(lastFetchDataConfig);\n      }\n      this.props.addSuccessToast(t('Deleted: %s', dashboardTitle));\n    }, err => {\n      console.error(err);\n      this.props.addDangerToast(t('There was an issue deleting %s', dashboardTitle));\n    });\n    this.handleBulkDashboardDelete = dashboards => {\n      SupersetClient.delete({\n        endpoint: \"/api/v1/dashboard/?q=\" + rison.encode(_mapInstanceProperty(dashboards).call(dashboards, ({ id }) => id)) }).\n      then(({ json = {} }) => {\n        const { lastFetchDataConfig } = this.state;\n        if (lastFetchDataConfig) {\n          this.fetchData(lastFetchDataConfig);\n        }\n        this.props.addSuccessToast(json.message);\n      }, err => {\n        console.error(err);\n        this.props.addDangerToast(t('There was an issue deleting the selected dashboards: ', err.statusText));\n      });\n    };\n    this.handleBulkDashboardExport = dashboards => {\n      return window.location.assign(\"/api/v1/dashboard/export/?q=\" + rison.encode(_mapInstanceProperty(dashboards).call(dashboards, ({ id }) => id)));\n    };\n    this.fetchData = ({ pageIndex, pageSize, sortBy, filters }) => {\n      // set loading state, cache the last config for fetching data in this component.\n      this.setState({\n        lastFetchDataConfig: {\n          filters,\n          pageIndex,\n          pageSize,\n          sortBy },\n\n        loading: true });\n\n      const filterExps = _mapInstanceProperty(filters).call(filters, ({ id: col, operator: opr, value }) => ({\n        col,\n        opr,\n        value }));\n\n      const queryParams = rison.encode(_Object$assign({\n        order_column: sortBy[0].id,\n        order_direction: sortBy[0].desc ? 'desc' : 'asc',\n        page: pageIndex,\n        page_size: pageSize },\n      filterExps.length ? { filters: filterExps } : {}));\n\n      return SupersetClient.get({\n        endpoint: \"/api/v1/dashboard/?q=\" + queryParams }).\n\n      then(({ json = {} }) => {\n        this.setState({ dashboards: json.result, dashboardCount: json.count });\n      }).\n      catch(e => {\n        this.props.addDangerToast(t('An error occurred while fetching dashboards: %s', e.statusText));\n      }).\n      finally(() => {\n        this.setState({ loading: false });\n      });\n    };\n    this.fetchOwners = async (filterValue = '', pageIndex, pageSize) => {\n      const resource = '/api/v1/dashboard/related/owners';\n      try {var _json$result;\n        const queryParams = rison.encode(_Object$assign({},\n        pageIndex ? { page: pageIndex } : {}, {},\n        pageSize ? { page_ize: pageSize } : {}, {},\n        filterValue ? { filter: filterValue } : {}));\n\n        const { json = {} } = await SupersetClient.get({\n          endpoint: resource + \"?q=\" + queryParams });\n\n        return json === null || json === void 0 ? void 0 : (_json$result = json.result) === null || _json$result === void 0 ? void 0 : _mapInstanceProperty(_json$result).call(_json$result, ({ text: label, value }) => ({\n          label,\n          value }));\n\n      }\n      catch (e) {\n        console.error(e);\n        this.props.addDangerToast(t('An error occurred while fetching chart owner values: %s', e.statusText));\n      }\n      return [];\n    };\n    this.updateFilters = async () => {var _context3, _context4, _context5, _context6;\n      const { filterOperators } = this.state;\n      if (this.isNewUIEnabled) {\n        return this.setState({\n          filters: [\n          {\n            Header: 'Owner',\n            id: 'owners',\n            input: 'select',\n            operator: 'rel_m_m',\n            unfilteredLabel: 'All',\n            fetchSelects: this.fetchOwners,\n            paginate: true },\n\n          {\n            Header: 'Published',\n            id: 'published',\n            input: 'select',\n            operator: 'eq',\n            unfilteredLabel: 'Any',\n            selects: [\n            { label: 'Published', value: true },\n            { label: 'Unpublished', value: false }] },\n\n\n          {\n            Header: 'Search',\n            id: 'dashboard_title',\n            input: 'search',\n            operator: 'title_or_slug' }] });\n\n\n\n      }\n      const convertFilter = ({ name: label, operator }) => ({ label, value: operator });\n      const owners = await this.fetchOwners();\n      return this.setState({\n        filters: [\n        {\n          Header: 'Dashboard',\n          id: 'dashboard_title',\n          operators: _mapInstanceProperty(_context3 = filterOperators.dashboard_title).call(_context3, convertFilter) },\n\n        {\n          Header: 'Slug',\n          id: 'slug',\n          operators: _mapInstanceProperty(_context4 = filterOperators.slug).call(_context4, convertFilter) },\n\n        {\n          Header: 'Owners',\n          id: 'owners',\n          input: 'select',\n          operators: _mapInstanceProperty(_context5 = filterOperators.owners).call(_context5, convertFilter),\n          selects: owners },\n\n        {\n          Header: 'Published',\n          id: 'published',\n          input: 'checkbox',\n          operators: _mapInstanceProperty(_context6 = filterOperators.published).call(_context6, convertFilter) }] });\n\n\n\n    };\n  }\n  componentDidMount() {\n    SupersetClient.get({\n      endpoint: \"/api/v1/dashboard/_info\" }).\n    then(({ json: infoJson = {} }) => {\n      this.setState({\n        filterOperators: infoJson.filters,\n        permissions: infoJson.permissions },\n      this.updateFilters);\n    }, e => {\n      this.props.addDangerToast(t('An error occurred while fetching Dashboards: %s, %s', e.statusText));\n      console.error(e);\n    });\n  }\n  get canEdit() {\n    return this.hasPerm('can_edit');\n  }\n  get canDelete() {\n    return this.hasPerm('can_delete');\n  }\n  get canExport() {\n    return this.hasPerm('can_mulexport');\n  }\n  get isNewUIEnabled() {\n    return isFeatureEnabled(FeatureFlag.LIST_VIEWS_NEW_UI);\n  }\n  render() {\n    const { dashboards, dashboardCount, loading, filters, dashboardToEdit } = this.state;\n    return ___EmotionJSX(\"div\", { className: \"container welcome\" },\n    ___EmotionJSX(Panel, null,\n    ___EmotionJSX(Panel.Body, null,\n    ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected dashboards?'), onConfirm: this.handleBulkDashboardDelete },\n    confirmDelete => {\n      const bulkActions = [];\n      if (this.canDelete) {\n        bulkActions.push({\n          key: 'delete',\n          name: ___EmotionJSX(React.Fragment, null,\n          ___EmotionJSX(\"i\", { className: \"fa fa-trash\" }), \" Delete\"),\n\n          onSelect: confirmDelete });\n\n      }\n      if (this.canExport) {\n        bulkActions.push({\n          key: 'export',\n          name: ___EmotionJSX(React.Fragment, null,\n          ___EmotionJSX(\"i\", { className: \"fa fa-database\" }), \" Export\"),\n\n          onSelect: this.handleBulkDashboardExport });\n\n      }\n      return ___EmotionJSX(React.Fragment, null,\n      dashboardToEdit && ___EmotionJSX(PropertiesModal, { show: true, dashboardId: dashboardToEdit.id, onHide: () => this.setState({ dashboardToEdit: null }), onDashboardSave: this.handleDashboardEdit }),\n      ___EmotionJSX(ListView, { className: \"dashboard-list-view\", title: 'Dashboards', columns: this.columns, data: dashboards, count: dashboardCount, pageSize: PAGE_SIZE, fetchData: this.fetchData, loading: loading, initialSort: this.initialSort, filters: filters, bulkActions: bulkActions, useNewUIFilters: this.isNewUIEnabled }));\n\n    }))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}DashboardList.propTypes = {\n  addDangerToast: PropTypes.func.isRequired };const _default =\n\nwithToasts(DashboardList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/views/dashboardList/DashboardList.tsx\");reactHotLoader.register(DashboardList, \"DashboardList\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/views/dashboardList/DashboardList.tsx\");reactHotLoader.register(_default, \"default\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/views/dashboardList/DashboardList.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}