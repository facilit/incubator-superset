{"ast":null,"code":"import \"core-js/modules/es.symbol.description\";import _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";import _Array$from from \"@babel/runtime-corejs3/core-js-stable/array/from\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _isString from \"lodash/isString\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport shortid from 'shortid';\nimport { CategoricalColorNamespace } from '@superset-ui/color';\n\nimport { chart } from '../../chart/chartReducer';\nimport {\nDASHBOARD_FILTER_SCOPE_GLOBAL,\ndashboardFilter } from\n'./dashboardFilters';\nimport { initSliceEntities } from './sliceEntities';\nimport { getParam } from '../../modules/utils';\nimport { applyDefaultFormData } from '../../explore/store';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport {\nBUILDER_PANE_TYPE,\nDASHBOARD_HEADER_ID,\nGRID_DEFAULT_CHART_WIDTH,\nGRID_COLUMN_COUNT } from\n'../util/constants';\nimport {\nDASHBOARD_HEADER_TYPE,\nCHART_TYPE,\nROW_TYPE } from\n'../util/componentTypes';\nimport { buildFilterColorMap } from '../util/dashboardFiltersColorMap';\nimport findFirstParentContainerId from '../util/findFirstParentContainer';\nimport getEmptyLayout from '../util/getEmptyLayout';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport getLocationHash from '../util/getLocationHash';\nimport newComponentFactory from '../util/newComponentFactory';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';const _default =\n\nfunction _default(bootstrapData) {var _context2, _context3;\n  const { user_id, datasources, common, editMode, urlParams } = bootstrapData;\n\n  const dashboard = _Object$assign({}, bootstrapData.dashboard_data);\n  let preselectFilters = {};\n  try {\n    // allow request parameter overwrite dashboard metadata\n    preselectFilters = JSON.parse(\n    getParam('preselect_filters') || dashboard.metadata.default_filters);\n\n  } catch (e) {\n\n  } //\n\n  // Priming the color palette with user's label-color mapping provided in\n  // the dashboard's JSON metadata\n  if (dashboard.metadata && dashboard.metadata.label_colors) {var _context;\n    const scheme = dashboard.metadata.color_scheme;\n    const namespace = dashboard.metadata.color_namespace;\n    const colorMap = _isString(dashboard.metadata.label_colors) ?\n    JSON.parse(dashboard.metadata.label_colors) :\n    dashboard.metadata.label_colors;\n    _forEachInstanceProperty(_context = _Object$keys(colorMap)).call(_context, label => {\n      CategoricalColorNamespace.getScale(scheme, namespace).setColor(\n      label,\n      colorMap[label]);\n\n    });\n  }\n\n  // dashboard layout\n  const { position_json: positionJson } = dashboard;\n  // new dash: positionJson could be {} or null\n  const layout =\n  positionJson && _Object$keys(positionJson).length > 0 ?\n  positionJson :\n  getEmptyLayout();\n\n  // create a lookup to sync layout names with slice names\n  const chartIdToLayoutId = {};\n  _forEachInstanceProperty(_context2 = _Object$values(layout)).call(_context2, layoutComponent => {\n    if (layoutComponent.type === CHART_TYPE) {\n      chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n    }\n  });\n\n  // find root level chart container node for newly-added slices\n  const parentId = findFirstParentContainerId(layout);\n  const parent = layout[parentId];\n  let newSlicesContainer;\n  let newSlicesContainerWidth = 0;\n\n  const filterScopes = dashboard.metadata.filter_scopes || {};\n\n  const chartQueries = {};\n  const dashboardFilters = {};\n  const slices = {};\n  const sliceIds = new _Set();\n  _forEachInstanceProperty(_context3 = dashboard.slices).call(_context3, slice => {var _context4;\n    const key = slice.slice_id;\n    if (_indexOfInstanceProperty(_context4 = ['separator', 'markup']).call(_context4, slice.form_data.viz_type) === -1) {\n      const form_data = _Object$assign({},\n      slice.form_data, {\n        url_params: _Object$assign({},\n        slice.form_data.url_params, {},\n        urlParams) });\n\n\n      chartQueries[key] = _Object$assign({},\n      chart, {\n        id: key,\n        form_data,\n        formData: applyDefaultFormData(form_data) });\n\n\n      slices[key] = {\n        slice_id: key,\n        slice_url: slice.slice_url,\n        slice_name: slice.slice_name,\n        form_data: slice.form_data,\n        edit_url: slice.edit_url,\n        viz_type: slice.form_data.viz_type,\n        datasource: slice.form_data.datasource,\n        description: slice.description,\n        description_markeddown: slice.description_markeddown,\n        modified: slice.modified,\n        changed_on: new Date(slice.changed_on).getTime() };\n\n\n      sliceIds.add(key);\n\n      // if there are newly added slices from explore view, fill slices into 1 or more rows\n      if (!chartIdToLayoutId[key] && layout[parentId]) {var _context6;\n        if (\n        newSlicesContainerWidth === 0 ||\n        newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT)\n        {var _context5;\n          newSlicesContainer = newComponentFactory(\n          ROW_TYPE,\n          _sliceInstanceProperty(_context5 = parent.parents || []).call(_context5));\n\n          layout[newSlicesContainer.id] = newSlicesContainer;\n          parent.children.push(newSlicesContainer.id);\n          newSlicesContainerWidth = 0;\n        }\n\n        const chartHolder = newComponentFactory(\n        CHART_TYPE,\n        {\n          chartId: slice.slice_id },\n\n        _sliceInstanceProperty(_context6 = newSlicesContainer.parents || []).call(_context6));\n\n\n        layout[chartHolder.id] = chartHolder;\n        newSlicesContainer.children.push(chartHolder.id);\n        chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n        newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n      }\n\n      // build DashboardFilters for interactive filter features\n      if (slice.form_data.viz_type === 'filter_box') {var _context8, _context9, _context10;\n        const configs = getFilterConfigsFromFormdata(slice.form_data);\n        let columns = configs.columns;\n        const labels = configs.labels;\n        if (preselectFilters[key]) {var _context7;\n          _forEachInstanceProperty(_context7 = _Object$keys(columns)).call(_context7, col => {\n            if (preselectFilters[key][col]) {\n              columns = _Object$assign({},\n              columns, {\n                [col]: preselectFilters[key][col] });\n\n            }\n          });\n        }\n\n        const scopesByChartId = _reduceInstanceProperty(_context8 = _Object$keys(columns)).call(_context8, (map, column) => {\n          const scopeSettings = _Object$assign({},\n          filterScopes[key]);\n\n          const { scope, immune } = _Object$assign({},\n          DASHBOARD_FILTER_SCOPE_GLOBAL, {},\n          scopeSettings[column]);\n\n\n          return _Object$assign({},\n          map, {\n            [column]: {\n              scope,\n              immune } });\n\n\n        }, {});\n\n        const componentId = chartIdToLayoutId[key];\n        const directPathToFilter = _sliceInstanceProperty(_context9 = layout[componentId].parents || []).call(_context9);\n        directPathToFilter.push(componentId);\n        dashboardFilters[key] = _Object$assign({},\n        dashboardFilter, {\n          chartId: key,\n          componentId,\n          datasourceId: slice.form_data.datasource,\n          filterName: slice.slice_name,\n          directPathToFilter,\n          columns,\n          labels,\n          scopes: scopesByChartId,\n          isInstantFilter: !!slice.form_data.instant_filtering,\n          isDateFilter: _includesInstanceProperty(_context10 = _Object$keys(columns)).call(_context10, TIME_RANGE) });\n\n      }\n    }\n\n    // sync layout names with current slice names in case a slice was edited\n    // in explore since the layout was updated. name updates go through layout for undo/redo\n    // functionality and python updates slice names based on layout upon dashboard save\n    const layoutId = chartIdToLayoutId[key];\n    if (layoutId && layout[layoutId]) {\n      layout[layoutId].meta.sliceName = slice.slice_name;\n    }\n  });\n  buildActiveFilters({\n    dashboardFilters,\n    components: layout });\n\n  buildFilterColorMap(dashboardFilters, layout);\n\n  // store the header as a layout component so we can undo/redo changes\n  layout[DASHBOARD_HEADER_ID] = {\n    id: DASHBOARD_HEADER_ID,\n    type: DASHBOARD_HEADER_TYPE,\n    meta: {\n      text: dashboard.dashboard_title } };\n\n\n\n  const dashboardLayout = {\n    past: [],\n    present: layout,\n    future: [] };\n\n\n  // find direct link component and path from root\n  const directLinkComponentId = getLocationHash();\n  let directPathToChild = [];\n  if (layout[directLinkComponentId]) {var _context11;\n    directPathToChild = _sliceInstanceProperty(_context11 = layout[directLinkComponentId].parents || []).call(_context11);\n    directPathToChild.push(directLinkComponentId);\n  }\n\n  return {\n    datasources,\n    sliceEntities: _Object$assign({}, initSliceEntities, { slices, isLoading: false }),\n    charts: chartQueries,\n    // read-only data\n    dashboardInfo: {\n      id: dashboard.id,\n      slug: dashboard.slug,\n      metadata: dashboard.metadata,\n      userId: user_id,\n      dash_edit_perm: dashboard.dash_edit_perm,\n      dash_save_perm: dashboard.dash_save_perm,\n      superset_can_explore: dashboard.superset_can_explore,\n      superset_can_csv: dashboard.superset_can_csv,\n      slice_can_edit: dashboard.slice_can_edit,\n      common: {\n        flash_messages: common.flash_messages,\n        conf: common.conf } },\n\n\n    dashboardFilters,\n    dashboardState: {\n      sliceIds: _Array$from(sliceIds),\n      directPathToChild,\n      directPathLastUpdated: _Date$now(),\n      // dashboard only has 1 focused filter field at a time,\n      // but when user switch different filter boxes,\n      // browser didn't always fire onBlur and onFocus events in order.\n      // so in redux state focusedFilterField prop is a queue,\n      // but component use focusedFilterField prop as single object.\n      focusedFilterField: [],\n      expandedSlices: dashboard.metadata.expanded_slices || {},\n      refreshFrequency: dashboard.metadata.refresh_frequency || 0,\n      // dashboard viewers can set refresh frequency for the current visit,\n      // only persistent refreshFrequency will be saved to backend\n      shouldPersistRefreshFrequency: false,\n      css: dashboard.css || '',\n      colorNamespace: dashboard.metadata.color_namespace,\n      colorScheme: dashboard.metadata.color_scheme,\n      editMode: dashboard.dash_edit_perm && editMode,\n      isPublished: dashboard.published,\n      builderPaneType:\n      dashboard.dash_edit_perm && editMode ?\n      BUILDER_PANE_TYPE.ADD_COMPONENTS :\n      BUILDER_PANE_TYPE.NONE,\n      hasUnsavedChanges: false,\n      maxUndoHistoryExceeded: false },\n\n    dashboardLayout,\n    messageToasts: [],\n    impressionId: shortid.generate() };\n\n};export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(_default, \"default\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/reducers/getInitialState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/reducers/getInitialState.js"],"names":["shortid","CategoricalColorNamespace","chart","DASHBOARD_FILTER_SCOPE_GLOBAL","dashboardFilter","initSliceEntities","getParam","applyDefaultFormData","buildActiveFilters","BUILDER_PANE_TYPE","DASHBOARD_HEADER_ID","GRID_DEFAULT_CHART_WIDTH","GRID_COLUMN_COUNT","DASHBOARD_HEADER_TYPE","CHART_TYPE","ROW_TYPE","buildFilterColorMap","findFirstParentContainerId","getEmptyLayout","getFilterConfigsFromFormdata","getLocationHash","newComponentFactory","TIME_RANGE","bootstrapData","user_id","datasources","common","editMode","urlParams","dashboard","dashboard_data","preselectFilters","JSON","parse","metadata","default_filters","e","label_colors","scheme","color_scheme","namespace","color_namespace","colorMap","label","getScale","setColor","position_json","positionJson","layout","length","chartIdToLayoutId","layoutComponent","type","meta","chartId","id","parentId","parent","newSlicesContainer","newSlicesContainerWidth","filterScopes","filter_scopes","chartQueries","dashboardFilters","slices","sliceIds","slice","key","slice_id","form_data","viz_type","url_params","formData","slice_url","slice_name","edit_url","datasource","description","description_markeddown","modified","changed_on","Date","getTime","add","parents","children","push","chartHolder","configs","columns","labels","col","scopesByChartId","map","column","scopeSettings","scope","immune","componentId","directPathToFilter","datasourceId","filterName","scopes","isInstantFilter","instant_filtering","isDateFilter","layoutId","sliceName","components","text","dashboard_title","dashboardLayout","past","present","future","directLinkComponentId","directPathToChild","sliceEntities","isLoading","charts","dashboardInfo","slug","userId","dash_edit_perm","dash_save_perm","superset_can_explore","superset_can_csv","slice_can_edit","flash_messages","conf","dashboardState","directPathLastUpdated","focusedFilterField","expandedSlices","expanded_slices","refreshFrequency","refresh_frequency","shouldPersistRefreshFrequency","css","colorNamespace","colorScheme","isPublished","published","builderPaneType","ADD_COMPONENTS","NONE","hasUnsavedChanges","maxUndoHistoryExceeded","messageToasts","impressionId","generate"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { isString } from 'lodash';\nimport shortid from 'shortid';\nimport { CategoricalColorNamespace } from '@superset-ui/color';\n\nimport { chart } from '../../chart/chartReducer';\nimport {\n  DASHBOARD_FILTER_SCOPE_GLOBAL,\n  dashboardFilter,\n} from './dashboardFilters';\nimport { initSliceEntities } from './sliceEntities';\nimport { getParam } from '../../modules/utils';\nimport { applyDefaultFormData } from '../../explore/store';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport {\n  BUILDER_PANE_TYPE,\n  DASHBOARD_HEADER_ID,\n  GRID_DEFAULT_CHART_WIDTH,\n  GRID_COLUMN_COUNT,\n} from '../util/constants';\nimport {\n  DASHBOARD_HEADER_TYPE,\n  CHART_TYPE,\n  ROW_TYPE,\n} from '../util/componentTypes';\nimport { buildFilterColorMap } from '../util/dashboardFiltersColorMap';\nimport findFirstParentContainerId from '../util/findFirstParentContainer';\nimport getEmptyLayout from '../util/getEmptyLayout';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport getLocationHash from '../util/getLocationHash';\nimport newComponentFactory from '../util/newComponentFactory';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\n\nexport default function (bootstrapData) {\n  const { user_id, datasources, common, editMode, urlParams } = bootstrapData;\n\n  const dashboard = { ...bootstrapData.dashboard_data };\n  let preselectFilters = {};\n  try {\n    // allow request parameter overwrite dashboard metadata\n    preselectFilters = JSON.parse(\n      getParam('preselect_filters') || dashboard.metadata.default_filters,\n    );\n  } catch (e) {\n    //\n  }\n\n  // Priming the color palette with user's label-color mapping provided in\n  // the dashboard's JSON metadata\n  if (dashboard.metadata && dashboard.metadata.label_colors) {\n    const scheme = dashboard.metadata.color_scheme;\n    const namespace = dashboard.metadata.color_namespace;\n    const colorMap = isString(dashboard.metadata.label_colors)\n      ? JSON.parse(dashboard.metadata.label_colors)\n      : dashboard.metadata.label_colors;\n    Object.keys(colorMap).forEach(label => {\n      CategoricalColorNamespace.getScale(scheme, namespace).setColor(\n        label,\n        colorMap[label],\n      );\n    });\n  }\n\n  // dashboard layout\n  const { position_json: positionJson } = dashboard;\n  // new dash: positionJson could be {} or null\n  const layout =\n    positionJson && Object.keys(positionJson).length > 0\n      ? positionJson\n      : getEmptyLayout();\n\n  // create a lookup to sync layout names with slice names\n  const chartIdToLayoutId = {};\n  Object.values(layout).forEach(layoutComponent => {\n    if (layoutComponent.type === CHART_TYPE) {\n      chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n    }\n  });\n\n  // find root level chart container node for newly-added slices\n  const parentId = findFirstParentContainerId(layout);\n  const parent = layout[parentId];\n  let newSlicesContainer;\n  let newSlicesContainerWidth = 0;\n\n  const filterScopes = dashboard.metadata.filter_scopes || {};\n\n  const chartQueries = {};\n  const dashboardFilters = {};\n  const slices = {};\n  const sliceIds = new Set();\n  dashboard.slices.forEach(slice => {\n    const key = slice.slice_id;\n    if (['separator', 'markup'].indexOf(slice.form_data.viz_type) === -1) {\n      const form_data = {\n        ...slice.form_data,\n        url_params: {\n          ...slice.form_data.url_params,\n          ...urlParams,\n        },\n      };\n      chartQueries[key] = {\n        ...chart,\n        id: key,\n        form_data,\n        formData: applyDefaultFormData(form_data),\n      };\n\n      slices[key] = {\n        slice_id: key,\n        slice_url: slice.slice_url,\n        slice_name: slice.slice_name,\n        form_data: slice.form_data,\n        edit_url: slice.edit_url,\n        viz_type: slice.form_data.viz_type,\n        datasource: slice.form_data.datasource,\n        description: slice.description,\n        description_markeddown: slice.description_markeddown,\n        modified: slice.modified,\n        changed_on: new Date(slice.changed_on).getTime(),\n      };\n\n      sliceIds.add(key);\n\n      // if there are newly added slices from explore view, fill slices into 1 or more rows\n      if (!chartIdToLayoutId[key] && layout[parentId]) {\n        if (\n          newSlicesContainerWidth === 0 ||\n          newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT\n        ) {\n          newSlicesContainer = newComponentFactory(\n            ROW_TYPE,\n            (parent.parents || []).slice(),\n          );\n          layout[newSlicesContainer.id] = newSlicesContainer;\n          parent.children.push(newSlicesContainer.id);\n          newSlicesContainerWidth = 0;\n        }\n\n        const chartHolder = newComponentFactory(\n          CHART_TYPE,\n          {\n            chartId: slice.slice_id,\n          },\n          (newSlicesContainer.parents || []).slice(),\n        );\n\n        layout[chartHolder.id] = chartHolder;\n        newSlicesContainer.children.push(chartHolder.id);\n        chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n        newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n      }\n\n      // build DashboardFilters for interactive filter features\n      if (slice.form_data.viz_type === 'filter_box') {\n        const configs = getFilterConfigsFromFormdata(slice.form_data);\n        let columns = configs.columns;\n        const labels = configs.labels;\n        if (preselectFilters[key]) {\n          Object.keys(columns).forEach(col => {\n            if (preselectFilters[key][col]) {\n              columns = {\n                ...columns,\n                [col]: preselectFilters[key][col],\n              };\n            }\n          });\n        }\n\n        const scopesByChartId = Object.keys(columns).reduce((map, column) => {\n          const scopeSettings = {\n            ...filterScopes[key],\n          };\n          const { scope, immune } = {\n            ...DASHBOARD_FILTER_SCOPE_GLOBAL,\n            ...scopeSettings[column],\n          };\n\n          return {\n            ...map,\n            [column]: {\n              scope,\n              immune,\n            },\n          };\n        }, {});\n\n        const componentId = chartIdToLayoutId[key];\n        const directPathToFilter = (layout[componentId].parents || []).slice();\n        directPathToFilter.push(componentId);\n        dashboardFilters[key] = {\n          ...dashboardFilter,\n          chartId: key,\n          componentId,\n          datasourceId: slice.form_data.datasource,\n          filterName: slice.slice_name,\n          directPathToFilter,\n          columns,\n          labels,\n          scopes: scopesByChartId,\n          isInstantFilter: !!slice.form_data.instant_filtering,\n          isDateFilter: Object.keys(columns).includes(TIME_RANGE),\n        };\n      }\n    }\n\n    // sync layout names with current slice names in case a slice was edited\n    // in explore since the layout was updated. name updates go through layout for undo/redo\n    // functionality and python updates slice names based on layout upon dashboard save\n    const layoutId = chartIdToLayoutId[key];\n    if (layoutId && layout[layoutId]) {\n      layout[layoutId].meta.sliceName = slice.slice_name;\n    }\n  });\n  buildActiveFilters({\n    dashboardFilters,\n    components: layout,\n  });\n  buildFilterColorMap(dashboardFilters, layout);\n\n  // store the header as a layout component so we can undo/redo changes\n  layout[DASHBOARD_HEADER_ID] = {\n    id: DASHBOARD_HEADER_ID,\n    type: DASHBOARD_HEADER_TYPE,\n    meta: {\n      text: dashboard.dashboard_title,\n    },\n  };\n\n  const dashboardLayout = {\n    past: [],\n    present: layout,\n    future: [],\n  };\n\n  // find direct link component and path from root\n  const directLinkComponentId = getLocationHash();\n  let directPathToChild = [];\n  if (layout[directLinkComponentId]) {\n    directPathToChild = (layout[directLinkComponentId].parents || []).slice();\n    directPathToChild.push(directLinkComponentId);\n  }\n\n  return {\n    datasources,\n    sliceEntities: { ...initSliceEntities, slices, isLoading: false },\n    charts: chartQueries,\n    // read-only data\n    dashboardInfo: {\n      id: dashboard.id,\n      slug: dashboard.slug,\n      metadata: dashboard.metadata,\n      userId: user_id,\n      dash_edit_perm: dashboard.dash_edit_perm,\n      dash_save_perm: dashboard.dash_save_perm,\n      superset_can_explore: dashboard.superset_can_explore,\n      superset_can_csv: dashboard.superset_can_csv,\n      slice_can_edit: dashboard.slice_can_edit,\n      common: {\n        flash_messages: common.flash_messages,\n        conf: common.conf,\n      },\n    },\n    dashboardFilters,\n    dashboardState: {\n      sliceIds: Array.from(sliceIds),\n      directPathToChild,\n      directPathLastUpdated: Date.now(),\n      // dashboard only has 1 focused filter field at a time,\n      // but when user switch different filter boxes,\n      // browser didn't always fire onBlur and onFocus events in order.\n      // so in redux state focusedFilterField prop is a queue,\n      // but component use focusedFilterField prop as single object.\n      focusedFilterField: [],\n      expandedSlices: dashboard.metadata.expanded_slices || {},\n      refreshFrequency: dashboard.metadata.refresh_frequency || 0,\n      // dashboard viewers can set refresh frequency for the current visit,\n      // only persistent refreshFrequency will be saved to backend\n      shouldPersistRefreshFrequency: false,\n      css: dashboard.css || '',\n      colorNamespace: dashboard.metadata.color_namespace,\n      colorScheme: dashboard.metadata.color_scheme,\n      editMode: dashboard.dash_edit_perm && editMode,\n      isPublished: dashboard.published,\n      builderPaneType:\n        dashboard.dash_edit_perm && editMode\n          ? BUILDER_PANE_TYPE.ADD_COMPONENTS\n          : BUILDER_PANE_TYPE.NONE,\n      hasUnsavedChanges: false,\n      maxUndoHistoryExceeded: false,\n    },\n    dashboardLayout,\n    messageToasts: [],\n    impressionId: shortid.generate(),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}