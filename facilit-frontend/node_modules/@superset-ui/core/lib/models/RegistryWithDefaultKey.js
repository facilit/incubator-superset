"use strict";

exports.__esModule = true;
exports.default = void 0;

var _Registry = _interopRequireDefault(require("./Registry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RegistryWithDefaultKey extends _Registry.default {
  constructor(config = {}) {
    super(config);

    _defineProperty(this, "initialDefaultKey", void 0);

    _defineProperty(this, "defaultKey", void 0);

    _defineProperty(this, "setFirstItemAsDefault", void 0);

    const {
      initialDefaultKey = undefined,
      setFirstItemAsDefault = false
    } = config;
    this.initialDefaultKey = initialDefaultKey;
    this.defaultKey = initialDefaultKey;
    this.setFirstItemAsDefault = setFirstItemAsDefault;
  }

  clear() {
    super.clear();
    this.defaultKey = this.initialDefaultKey;
    return this;
  }

  get(key) {
    const targetKey = key != null ? key : this.defaultKey;
    return targetKey ? super.get(targetKey) : undefined;
  }

  registerValue(key, value) {
    super.registerValue(key, value); // If there is no default, set as default

    if (this.setFirstItemAsDefault && !this.defaultKey) {
      this.defaultKey = key;
    }

    return this;
  }

  registerLoader(key, loader) {
    super.registerLoader(key, loader); // If there is no default, set as default

    if (this.setFirstItemAsDefault && !this.defaultKey) {
      this.defaultKey = key;
    }

    return this;
  }

  getDefaultKey() {
    return this.defaultKey;
  }

  setDefaultKey(key) {
    this.defaultKey = key;
    return this;
  }

  clearDefaultKey() {
    this.defaultKey = undefined;
    return this;
  }

}

exports.default = RegistryWithDefaultKey;