"use strict";

exports.__esModule = true;
exports.default = void 0;

var _core = require("@superset-ui/core");

var _createD3NumberFormatter = _interopRequireDefault(require("./factories/createD3NumberFormatter"));

var _createSmartNumberFormatter = _interopRequireDefault(require("./factories/createSmartNumberFormatter"));

var _NumberFormats = _interopRequireDefault(require("./NumberFormats"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NumberFormatterRegistry extends _core.RegistryWithDefaultKey {
  constructor() {
    super({
      name: 'NumberFormatter',
      overwritePolicy: _core.OverwritePolicy.WARN
    });
    this.registerValue(_NumberFormats.default.SMART_NUMBER, (0, _createSmartNumberFormatter.default)());
    this.registerValue(_NumberFormats.default.SMART_NUMBER_SIGNED, (0, _createSmartNumberFormatter.default)({
      signed: true
    }));
    this.setDefaultKey(_NumberFormats.default.SMART_NUMBER);
  }

  get(formatterId) {
    const targetFormat = ("" + (formatterId === null || typeof formatterId === 'undefined' || formatterId === '' ? this.defaultKey : formatterId)).trim();

    if (this.has(targetFormat)) {
      return super.get(targetFormat);
    } // Create new formatter if does not exist


    const formatter = (0, _createD3NumberFormatter.default)({
      formatString: targetFormat
    });
    this.registerValue(targetFormat, formatter);
    return formatter;
  }

  format(formatterId, value) {
    return this.get(formatterId)(value);
  }

}

exports.default = NumberFormatterRegistry;