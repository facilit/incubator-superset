"use strict";

exports.__esModule = true;
exports.default = exports.PREVIEW_VALUE = void 0;

var _core = require("@superset-ui/core");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PREVIEW_VALUE = 12345.432;
exports.PREVIEW_VALUE = PREVIEW_VALUE;

class NumberFormatter extends _core.ExtensibleFunction {
  constructor(config) {
    super(value => this.format(value));

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "label", void 0);

    _defineProperty(this, "description", void 0);

    _defineProperty(this, "formatFunc", void 0);

    _defineProperty(this, "isInvalid", void 0);

    const {
      id = (0, _core.isRequired)('config.id'),
      label,
      description = '',
      formatFunc = (0, _core.isRequired)('config.formatFunc'),
      isInvalid = false
    } = config;
    this.id = id;
    this.label = label != null ? label : id;
    this.description = description;
    this.formatFunc = formatFunc;
    this.isInvalid = isInvalid;
  }

  format(value) {
    if (value === null || value === undefined || Number.isNaN(value)) {
      return "" + value;
    }

    if (value === Number.POSITIVE_INFINITY) {
      return '∞';
    }

    if (value === Number.NEGATIVE_INFINITY) {
      return '-∞';
    }

    return this.formatFunc(value);
  }

  preview(value = PREVIEW_VALUE) {
    return value + " => " + this.format(value);
  }

}

var _default = NumberFormatter;
exports.default = _default;