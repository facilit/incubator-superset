"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _histogram = require("@data-ui/histogram");

var _theme = require("@data-ui/theme");

var _legend = require("@vx/legend");

var _scale = require("@vx/scale");

var _style = _interopRequireDefault(require("@superset-ui/style"));

var _color = require("@superset-ui/color");

var _WithLegend = _interopRequireDefault(require("./WithLegend"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject() {
  const data = _taggedTemplateLiteralLoose(["\n  .superset-legacy-chart-histogram {\n    overflow: hidden;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

const propTypes = {
  className: _propTypes.default.string,
  data: _propTypes.default.arrayOf(_propTypes.default.shape({
    key: _propTypes.default.string,
    values: _propTypes.default.arrayOf(_propTypes.default.number)
  })).isRequired,
  width: _propTypes.default.number.isRequired,
  height: _propTypes.default.number.isRequired,
  colorScheme: _propTypes.default.string,
  normalized: _propTypes.default.bool,
  binCount: _propTypes.default.number,
  opacity: _propTypes.default.number,
  xAxisLabel: _propTypes.default.string,
  yAxisLabel: _propTypes.default.string
};
const defaultProps = {
  binCount: 15,
  className: '',
  colorScheme: '',
  normalized: false,
  opacity: 1,
  xAxisLabel: '',
  yAxisLabel: ''
};

class CustomHistogram extends _react.default.PureComponent {
  render() {
    const {
      className,
      data,
      width,
      height,
      binCount,
      colorScheme,
      normalized,
      opacity,
      xAxisLabel,
      yAxisLabel
    } = this.props;

    const colorFn = _color.CategoricalColorNamespace.getScale(colorScheme);

    const keys = data.map(d => d.key);
    const colorScale = (0, _scale.scaleOrdinal)({
      domain: keys,
      range: keys.map(x => colorFn(x))
    });
    return /*#__PURE__*/_react.default.createElement(_WithLegend.default, {
      className: "superset-legacy-chart-histogram " + className,
      width: width,
      height: height,
      position: "top",
      renderLegend: ({
        direction
      }) => /*#__PURE__*/_react.default.createElement(_legend.LegendOrdinal, {
        scale: colorScale,
        direction: direction,
        shape: "rect",
        labelMargin: "0 15px 0 0"
      }),
      renderChart: parent => /*#__PURE__*/_react.default.createElement(_histogram.Histogram, {
        width: parent.width,
        height: parent.height,
        ariaLabel: "Histogram",
        normalized: normalized,
        binCount: binCount,
        binType: "numeric",
        margin: {
          top: 20,
          right: 20
        },
        renderTooltip: ({
          datum,
          color
        }) => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("strong", {
          style: {
            color
          }
        }, datum.bin0, " to ", datum.bin1), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("strong", null, "count "), datum.count), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("strong", null, "cumulative "), datum.cumulative)),
        valueAccessor: datum => datum,
        theme: _theme.chartTheme
      }, data.map(series => /*#__PURE__*/_react.default.createElement(_histogram.BarSeries, {
        key: series.key,
        animated: true,
        rawData: series.values,
        fill: colorScale(series.key),
        fillOpacity: opacity
      })), /*#__PURE__*/_react.default.createElement(_histogram.XAxis, {
        label: xAxisLabel
      }), /*#__PURE__*/_react.default.createElement(_histogram.YAxis, {
        label: yAxisLabel
      }))
    });
  }

}

CustomHistogram.propTypes = propTypes;
CustomHistogram.defaultProps = defaultProps;

var _default = (0, _style.default)(CustomHistogram)(_templateObject());

exports.default = _default;