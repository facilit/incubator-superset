function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import LegendItem from './LegendItem';
import LegendLabel from './LegendLabel';
import LegendShape from './LegendShape';
import valueOrIdentity from '../util/valueOrIdentity';
Legend.propTypes = {
  className: PropTypes.string,
  style: PropTypes.any,
  domain: PropTypes.array,
  scale: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,
  shapeWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  shapeHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  shapeMargin: PropTypes.any,
  labelAlign: PropTypes.string,
  labelFlex: PropTypes.string,
  labelMargin: PropTypes.string,
  itemMargin: PropTypes.string,
  direction: PropTypes.string,
  itemDirection: PropTypes.string,
  fill: PropTypes.any,
  size: PropTypes.any,
  shape: PropTypes.any,
  shapeStyle: PropTypes.any,
  labelFormat: PropTypes.func,
  labelTransform: PropTypes.func,
  children: PropTypes.func
};
var defaultStyle = {
  display: 'flex'
};
export default function Legend(_ref) {
  var className = _ref.className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? defaultStyle : _ref$style,
      shapeStyle = _ref.shapeStyle,
      scale = _ref.scale,
      shape = _ref.shape,
      inputDomain = _ref.domain,
      _ref$fill = _ref.fill,
      fill = _ref$fill === void 0 ? valueOrIdentity : _ref$fill,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? valueOrIdentity : _ref$size,
      _ref$labelFormat = _ref.labelFormat,
      labelFormat = _ref$labelFormat === void 0 ? valueOrIdentity : _ref$labelFormat,
      _ref$labelTransform = _ref.labelTransform,
      labelTransform = _ref$labelTransform === void 0 ? defaultTransform : _ref$labelTransform,
      _ref$shapeWidth = _ref.shapeWidth,
      shapeWidth = _ref$shapeWidth === void 0 ? 15 : _ref$shapeWidth,
      _ref$shapeHeight = _ref.shapeHeight,
      shapeHeight = _ref$shapeHeight === void 0 ? 15 : _ref$shapeHeight,
      _ref$shapeMargin = _ref.shapeMargin,
      shapeMargin = _ref$shapeMargin === void 0 ? '2px 4px 2px 0' : _ref$shapeMargin,
      _ref$labelAlign = _ref.labelAlign,
      labelAlign = _ref$labelAlign === void 0 ? 'left' : _ref$labelAlign,
      _ref$labelFlex = _ref.labelFlex,
      labelFlex = _ref$labelFlex === void 0 ? '1' : _ref$labelFlex,
      _ref$labelMargin = _ref.labelMargin,
      labelMargin = _ref$labelMargin === void 0 ? '0 4px' : _ref$labelMargin,
      _ref$itemMargin = _ref.itemMargin,
      itemMargin = _ref$itemMargin === void 0 ? '0' : _ref$itemMargin,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? 'column' : _ref$direction,
      _ref$itemDirection = _ref.itemDirection,
      itemDirection = _ref$itemDirection === void 0 ? 'row' : _ref$itemDirection,
      children = _ref.children,
      restProps = _objectWithoutPropertiesLoose(_ref, ["className", "style", "shapeStyle", "scale", "shape", "domain", "fill", "size", "labelFormat", "labelTransform", "shapeWidth", "shapeHeight", "shapeMargin", "labelAlign", "labelFlex", "labelMargin", "itemMargin", "direction", "itemDirection", "children"]);

  var domain = inputDomain || scale.domain();
  var labels = domain.map(labelTransform({
    scale: scale,
    labelFormat: labelFormat
  }));
  if (children) return children(labels);
  return React.createElement("div", {
    className: cx('vx-legend', className),
    style: _extends({}, style, {
      flexDirection: direction
    })
  }, labels.map(function (label, i) {
    var text = label.text;
    return React.createElement(LegendItem, _extends({
      key: "legend-" + label + "-" + i,
      margin: itemMargin,
      flexDirection: itemDirection,
      label: label
    }, restProps), React.createElement(LegendShape, {
      shape: shape,
      height: shapeHeight,
      width: shapeWidth,
      margin: shapeMargin,
      label: label,
      fill: fill,
      size: size,
      shapeStyle: shapeStyle
    }), React.createElement(LegendLabel, {
      label: text,
      flex: labelFlex,
      margin: labelMargin,
      align: labelAlign
    }));
  }));
}

function defaultTransform(_ref2) {
  var scale = _ref2.scale,
      labelFormat = _ref2.labelFormat;
  return function (d, i) {
    return {
      datum: d,
      index: i,
      text: "" + labelFormat(d, i),
      value: scale(d)
    };
  };
}