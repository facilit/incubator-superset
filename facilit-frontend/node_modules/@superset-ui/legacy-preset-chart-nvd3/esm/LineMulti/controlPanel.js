"use strict";

exports.__esModule = true;
exports.default = void 0;

var _translation = require("@superset-ui/translation");

var _validator = require("@superset-ui/validator");

var _chartControls = require("@superset-ui/chart-controls");

var _NVD3Controls = require("../NVD3Controls");

/* eslint-disable camelcase */

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var _default = {
  requiresTime: true,
  controlPanelSections: [{
    label: (0, _translation.t)('Chart Options'),
    expanded: true,
    controlSetRows: [['color_scheme', 'label_colors'], [{
      name: 'prefix_metric_with_slice_name',
      config: {
        type: 'CheckboxControl',
        label: (0, _translation.t)('Prefix metric name with slice name'),
        default: false,
        renderTrigger: true
      }
    }, null], [_NVD3Controls.showLegend, _NVD3Controls.showMarkers], [_NVD3Controls.lineInterpolation, null]]
  }, {
    label: (0, _translation.t)('X Axis'),
    expanded: true,
    controlSetRows: [[_NVD3Controls.xAxisLabel, _NVD3Controls.bottomMargin], [_NVD3Controls.xTicksLayout, _NVD3Controls.xAxisFormat], [_NVD3Controls.xAxisShowMinmax, null]]
  }, {
    label: (0, _translation.t)('Y Axis 1'),
    expanded: true,
    controlSetRows: [[{
      name: 'line_charts',
      config: {
        type: 'SelectAsyncControl',
        multi: true,
        label: (0, _translation.t)('Left Axis chart(s)'),
        validators: [_validator.validateNonEmpty],
        default: [],
        description: (0, _translation.t)('Choose one or more charts for left axis'),
        dataEndpoint: '/sliceasync/api/read?_flt_0_viz_type=line&_flt_7_viz_type=line_multi',
        placeholder: (0, _translation.t)('Select charts'),
        onAsyncErrorMessage: (0, _translation.t)('Error while fetching charts'),
        mutator: data => {
          if (!data || !data.result) {
            return [];
          }

          return data.result.map(o => ({
            value: o.id,
            label: o.slice_name
          }));
        }
      }
    }, 'y_axis_format']]
  }, {
    label: (0, _translation.t)('Y Axis 2'),
    expanded: false,
    controlSetRows: [[{
      name: 'line_charts_2',
      config: {
        type: 'SelectAsyncControl',
        multi: true,
        label: (0, _translation.t)('Right Axis chart(s)'),
        validators: [],
        default: [],
        description: (0, _translation.t)('Choose one or more charts for right axis'),
        dataEndpoint: '/sliceasync/api/read?_flt_0_viz_type=line&_flt_7_viz_type=line_multi',
        placeholder: (0, _translation.t)('Select charts'),
        onAsyncErrorMessage: (0, _translation.t)('Error while fetching charts'),
        mutator: data => {
          if (!data || !data.result) {
            return [];
          }

          return data.result.map(o => ({
            value: o.id,
            label: o.slice_name
          }));
        }
      }
    }, _NVD3Controls.yAxis2Format]]
  }, {
    label: (0, _translation.t)('Query'),
    expanded: true,
    controlSetRows: [['adhoc_filters']]
  }, _chartControls.sections.annotations],
  controlOverrides: {
    y_axis_format: {
      label: (0, _translation.t)('Left Axis Format')
    },
    x_axis_format: {
      choices: _chartControls.D3_TIME_FORMAT_OPTIONS,
      default: 'smart_date'
    }
  },
  sectionOverrides: {
    sqlaTimeSeries: {
      controlSetRows: [['time_range']]
    },
    druidTimeSeries: {
      controlSetRows: [['time_range']]
    }
  }
};
exports.default = _default;