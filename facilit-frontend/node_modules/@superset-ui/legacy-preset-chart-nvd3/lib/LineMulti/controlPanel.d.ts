import { validateNonEmpty } from '@superset-ui/validator';
export declare type Result = {
    id: unknown;
    slice_name: string;
};
export declare type Data = {
    result?: Result[];
};
declare const _default: {
    requiresTime: boolean;
    controlPanelSections: ({
        label: string;
        tabOverride: string;
        expanded: boolean;
        controlSetRows: {
            name: string;
            config: {
                type: string;
                label: string;
                default: never[];
                description: string;
                renderTrigger: boolean;
                tabOverride: string;
            };
        }[][];
    } | {
        label: string;
        expanded: boolean;
        controlSetRows: (string[] | {
            name: string;
            config: {
                type: string;
                label: string;
                renderTrigger: boolean;
                default: boolean;
                description: string;
            };
        }[] | ({
            name: string;
            config: {
                type: string;
                label: string;
                renderTrigger: boolean;
                choices: import("@superset-ui/chart-controls/lib/utils/selectOptions").Formatted[];
                default: string;
                description: string;
            };
        } | null)[] | ({
            name: string;
            config: {
                type: string;
                label: string;
                default: boolean;
                renderTrigger: boolean;
            };
        } | null)[])[];
    } | {
        label: string;
        expanded: boolean;
        controlSetRows: ({
            name: string;
            config: {
                type: string;
                label: string;
                renderTrigger: boolean;
                default: string;
            };
        }[] | ({
            name: string;
            config: {
                type: string;
                label: string;
                renderTrigger: boolean;
                default: boolean;
                description: string;
            };
        } | null)[])[];
    } | {
        label: string;
        expanded: boolean;
        controlSetRows: (string | {
            name: string;
            config: {
                type: string;
                multi: boolean;
                label: string;
                validators: (typeof validateNonEmpty)[];
                default: never[];
                description: string;
                dataEndpoint: string;
                placeholder: string;
                onAsyncErrorMessage: string;
                mutator: (data?: Data | undefined) => {
                    value: unknown;
                    label: string;
                }[];
            };
        })[][];
    } | {
        label: string;
        expanded: boolean;
        controlSetRows: ({
            name: string;
            config: {
                type: string;
                freeForm: boolean;
                label: string;
                default: string;
                choices: string[][];
                description: string;
            };
        } | {
            name: string;
            config: {
                type: string;
                multi: boolean;
                label: string;
                validators: never[];
                default: never[];
                description: string;
                dataEndpoint: string;
                placeholder: string;
                onAsyncErrorMessage: string;
                mutator: (data: Data) => {
                    value: unknown;
                    label: string;
                }[];
            };
        })[][];
    })[];
    controlOverrides: {
        y_axis_format: {
            label: string;
        };
        x_axis_format: {
            choices: string[][];
            default: string;
        };
    };
    sectionOverrides: {
        sqlaTimeSeries: {
            controlSetRows: string[][];
        };
        druidTimeSeries: {
            controlSetRows: string[][];
        };
    };
};
export default _default;
//# sourceMappingURL=controlPanel.d.ts.map