"use strict";

exports.__esModule = true;
exports.renderTooltipFactory = renderTooltipFactory;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _shortid = _interopRequireDefault(require("shortid"));

var _translation = require("@superset-ui/translation");

var _numberFormat = require("@superset-ui/number-format");

var _xyChart = require("@data-ui/xy-chart");

var _color = require("@superset-ui/color");

var _dimension = require("@superset-ui/dimension");

var _style = _interopRequireDefault(require("@superset-ui/style"));

var _timeFormat = require("@superset-ui/time-format");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject() {
  const data = _taggedTemplateLiteralLoose(["\n  font-family: ", ";\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  &.no-trendline .subheader-line {\n    padding-bottom: 0.3em;\n  }\n\n  .text-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    .alert {\n      font-size: ", ";\n      margin: -0.5em 0 0.4em;\n      line-height: 1;\n      padding: 2px 4px 3px;\n      border-radius: 3px;\n    }\n  }\n\n  .header-line {\n    font-weight: ", ";\n    position: relative;\n    line-height: 1em;\n    span {\n      position: absolute;\n      bottom: 0;\n    }\n  }\n\n  .subheader-line {\n    font-weight: ", ";\n    line-height: 1em;\n    padding-bottom: 0;\n  }\n\n  &.is-fallback-value {\n    .header-line,\n    .subheader-line {\n      opacity: 0.5;\n    }\n  }\n\n  .superset-data-ui-tooltip {\n    z-index: 1000;\n    background: #000;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const defaultNumberFormatter = (0, _numberFormat.getNumberFormatter)();
const CHART_MARGIN = {
  top: 4,
  right: 4,
  bottom: 4,
  left: 4
};
const PROPORTION = {
  // text size: proportion of the chart container sans trendline
  HEADER: 0.3,
  SUBHEADER: 0.125,
  // trendline size: proportion of the whole chart container
  TRENDLINE: 0.3
};

function renderTooltipFactory(formatDate = _timeFormat.smartDateVerboseFormatter, formatValue = defaultNumberFormatter) {
  return function renderTooltip({
    datum: {
      x,
      y
    }
  }) {
    // even though `formatDate` supports timestamp as numbers, we need
    // `new Date` to pass type check
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        padding: '4px 8px'
      }
    }, formatDate(new Date(x)), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("strong", null, y === null ? (0, _translation.t)('N/A') : formatValue(y)));
  };
}

class BigNumberVis extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "gradientId", _shortid.default.generate());
  }

  getClassName() {
    const {
      className,
      showTrendLine,
      bigNumberFallback
    } = this.props;
    const names = "superset-legacy-chart-big-number " + className + " " + (bigNumberFallback ? 'is-fallback-value' : '');
    if (showTrendLine) return names;
    return names + " no-trendline";
  }

  createTemporaryContainer() {
    const container = document.createElement('div');
    container.className = this.getClassName();
    container.style.position = 'absolute'; // so it won't disrupt page layout

    container.style.opacity = '0'; // and not visible

    return container;
  }

  renderFallbackWarning() {
    const {
      bigNumberFallback,
      formatTime
    } = this.props;
    if (!bigNumberFallback) return null;
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "alert alert-warning",
      role: "alert",
      title: (0, _translation.t)("Last available value seen on %s", formatTime(bigNumberFallback.x))
    }, (0, _translation.t)('Not up to date'));
  }

  renderHeader(maxHeight) {
    const {
      bigNumber,
      formatNumber,
      width
    } = this.props;
    const text = bigNumber === null ? (0, _translation.t)('No data') : formatNumber(bigNumber);
    const container = this.createTemporaryContainer();
    document.body.append(container);
    const fontSize = (0, _dimension.computeMaxFontSize)({
      text,
      maxWidth: width,
      maxHeight,
      className: 'header-line',
      container
    });
    container.remove();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "header-line",
      style: {
        fontSize,
        height: maxHeight
      }
    }, text);
  }

  renderSubheader(maxHeight) {
    const {
      bigNumber,
      subheader,
      width,
      bigNumberFallback
    } = this.props;
    let fontSize = 0;
    const NO_DATA_OR_HASNT_LANDED = (0, _translation.t)('No data after filtering or data is NULL for the latest time record');
    const NO_DATA = (0, _translation.t)('Try applying different filters or ensuring your datasource has data');
    let text = subheader;

    if (bigNumber === null) {
      text = bigNumberFallback ? NO_DATA : NO_DATA_OR_HASNT_LANDED;
    }

    if (text) {
      const container = this.createTemporaryContainer();
      document.body.append(container);
      fontSize = (0, _dimension.computeMaxFontSize)({
        text,
        maxWidth: width,
        maxHeight,
        className: 'subheader-line',
        container
      });
      container.remove();
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "subheader-line",
        style: {
          fontSize,
          height: maxHeight
        }
      }, text);
    }

    return null;
  }

  renderTrendline(maxHeight) {
    const {
      width,
      trendLineData,
      mainColor,
      subheader,
      startYAxisAtZero,
      formatNumber,
      formatTime,
      fromDatetime,
      timeRangeFixed
    } = this.props; // if can't find any non-null values, no point rendering the trendline

    if (!(trendLineData == null ? void 0 : trendLineData.some(d => d.y !== null))) {
      return null;
    } // Apply a fixed X range if a time range is specified.
    //
    // XYChart checks the existence of `domain` property and decide whether to
    // apply a domain or not, so it must not be `null` or `undefined`


    const xScale = {
      type: 'timeUtc'
    };
    const tooltipData = trendLineData && [...trendLineData];

    if (tooltipData && timeRangeFixed && fromDatetime) {
      var _this$props$toDatetim;

      const toDatetime = (_this$props$toDatetim = this.props.toDatetime) != null ? _this$props$toDatetim : Date.now();

      if (tooltipData[0].x > fromDatetime) {
        tooltipData.unshift({
          x: fromDatetime,
          y: null
        });
      }

      if (tooltipData[tooltipData.length - 1].x < toDatetime) {
        tooltipData.push({
          x: toDatetime,
          y: null
        });
      }

      xScale.domain = [fromDatetime, toDatetime];
    }

    return /*#__PURE__*/_react.default.createElement(_xyChart.XYChart, {
      snapTooltipToDataX: true,
      ariaLabel: "Big number visualization " + subheader,
      renderTooltip: renderTooltipFactory(formatTime, formatNumber),
      xScale: xScale,
      yScale: {
        type: 'linear',
        includeZero: startYAxisAtZero
      },
      width: Math.floor(width),
      height: maxHeight,
      margin: CHART_MARGIN,
      eventTrigger: "container"
    }, /*#__PURE__*/_react.default.createElement(_xyChart.LinearGradient, {
      id: this.gradientId,
      from: mainColor,
      to: "#fff"
    }), /*#__PURE__*/_react.default.createElement(_xyChart.AreaSeries, {
      data: tooltipData,
      fill: "url(#" + this.gradientId + ")",
      stroke: mainColor
    }), /*#__PURE__*/_react.default.createElement(_xyChart.CrossHair, {
      fullHeight: true,
      stroke: mainColor,
      circleFill: mainColor,
      circleStroke: "#fff",
      showHorizontalLine: false,
      strokeDasharray: "5,2"
    }));
  }

  render() {
    const {
      showTrendLine,
      height,
      headerFontSize,
      subheaderFontSize
    } = this.props;
    const className = this.getClassName();

    if (showTrendLine) {
      const chartHeight = Math.floor(PROPORTION.TRENDLINE * height);
      const allTextHeight = height - chartHeight;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: className
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "text-container",
        style: {
          height: allTextHeight
        }
      }, this.renderFallbackWarning(), this.renderHeader(Math.ceil(headerFontSize * (1 - PROPORTION.TRENDLINE) * height)), this.renderSubheader(Math.ceil(subheaderFontSize * (1 - PROPORTION.TRENDLINE) * height))), this.renderTrendline(chartHeight));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: className,
      style: {
        height
      }
    }, this.renderHeader(Math.ceil(headerFontSize * height)), this.renderSubheader(Math.ceil(subheaderFontSize * height)));
  }

}

_defineProperty(BigNumberVis, "propTypes", {
  className: _propTypes.default.string,
  width: _propTypes.default.number.isRequired,
  height: _propTypes.default.number.isRequired,
  bigNumber: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.oneOf([null])]),
  bigNumberFallback: _propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.oneOf([null])])
  }),
  fromDatetime: _propTypes.default.number,
  toDatetime: _propTypes.default.number,
  headerFontSize: _propTypes.default.number,
  subheader: _propTypes.default.string,
  subheaderFontSize: _propTypes.default.number,
  showTrendLine: _propTypes.default.bool,
  startYAxisAtZero: _propTypes.default.bool,
  timeRangeFixed: _propTypes.default.bool,
  trendLineData: _propTypes.default.arrayOf(_propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.oneOf([null])])
  })),
  mainColor: _propTypes.default.string
});

_defineProperty(BigNumberVis, "defaultProps", {
  className: '',
  formatNumber: num => String(num),
  formatTime: _timeFormat.smartDateVerboseFormatter.formatFunc,
  headerFontSize: PROPORTION.HEADER,
  mainColor: _color.BRAND_COLOR,
  showTrendLine: false,
  startYAxisAtZero: true,
  subheader: '',
  subheaderFontSize: PROPORTION.SUBHEADER,
  timeRangeFixed: false
});

var _default = (0, _style.default)(BigNumberVis)(_templateObject(), ({
  theme
}) => theme.typography.families.sansSerif, ({
  theme
}) => theme.typography.sizes.s, ({
  theme
}) => theme.typography.weights.normal, ({
  theme
}) => theme.typography.weights.light);

exports.default = _default;