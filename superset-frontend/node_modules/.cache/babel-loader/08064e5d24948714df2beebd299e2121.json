{"ast":null,"code":"import \"core-js/modules/es.string.match\";import \"core-js/modules/web.dom-collections.iterator\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _endsWithInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/ends-with\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _startsWithInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/starts-with\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _everyInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/every\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _isEqual from \"lodash/isEqual\";var _jsxFileName = \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * \"License\"); you may not use this file except in compliance\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * with the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * KIND, either express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * specific language governing permissions and limitations\nunder the License.\nnimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/translation';\n\n\nimport OnPasteSelect from 'src/components/Select/OnPasteSelect';\n\nimport ControlHeader from '../ControlHeader';\nimport MetricDefinitionOption from '../MetricDefinitionOption';\nimport MetricDefinitionValue from '../MetricDefinitionValue';\nimport AdhocMetric from '../../AdhocMetric';\nimport columnType from '../../propTypes/columnType';\nimport savedMetricType from '../../propTypes/savedMetricType';\nimport adhocMetricType from '../../propTypes/adhocMetricType';\nimport {\nAGGREGATES,\nAGGREGATES_OPTIONS,\nsqlaAutoGeneratedMetricNameRegex,\ndruidAutoGeneratedMetricRegex } from\n'../../constants';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n  PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n  PropTypes.oneOfType([PropTypes.string, adhocMetricType])]),\n\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasourceType: PropTypes.string };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: [] };\n\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\nfunction columnsContainAllMetrics(value, nextProps) {var _context, _context2, _context3, _context4, _context5;\n  const columnNames = new _Set(\n  _mapInstanceProperty(_context = [...(nextProps.columns || []), ...(nextProps.savedMetrics || [])]\n  // eslint-disable-next-line camelcase\n  ).call(_context, ({ column_name, metric_name }) => column_name || metric_name));\n\n\n  return (\n    _everyInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _mapInstanceProperty(_context4 = _filterInstanceProperty(_context5 = _Array$isArray(value) ? value : [value]).call(_context5,\n    metric => metric)\n    // find column names\n    ).call(_context4, (metric) =>\n    metric.column ?\n    metric.column.column_name :\n    metric.column_name || metric)).call(_context3,\n\n    name => name && typeof name === 'string')).call(_context2,\n    name => columnNames.has(name)));\n\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!_Array$isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return _mapInstanceProperty(value).call(value, val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nfunction getDefaultAggregateForColumn(column) {\n  const type = column.type;\n  if (typeof type !== 'string') {\n    return AGGREGATES.COUNT;\n  } else if (type === '' || type === 'expression') {\n    return AGGREGATES.SUM;\n  } else if (\n  type.match(/.*char.*/i) ||\n  type.match(/string.*/i) ||\n  type.match(/.*text.*/i))\n  {\n    return AGGREGATES.COUNT_DISTINCT;\n  } else if (\n  type.match(/.*int.*/i) ||\n  type === 'LONG' ||\n  type === 'DOUBLE' ||\n  type === 'FLOAT')\n  {\n    return AGGREGATES.SUM;\n  } else if (type.match(/.*bool.*/i)) {\n    return AGGREGATES.MAX;\n  } else if (type.match(/.*time.*/i)) {\n    return AGGREGATES.COUNT;\n  } else if (type.match(/unknown/i)) {\n    return AGGREGATES.COUNT;\n  }\n  return null;\n}\n\nexport default class MetricsControl extends React.PureComponent {\n  constructor(props) {var _context6, _context7, _context8, _context9, _context10, _context11;\n    super(props);\n    this.onChange = _bindInstanceProperty(_context6 = this.onChange).call(_context6, this);\n    this.onMetricEdit = _bindInstanceProperty(_context7 = this.onMetricEdit).call(_context7, this);\n    this.checkIfAggregateInInput = _bindInstanceProperty(_context8 = this.checkIfAggregateInInput).call(_context8, this);\n    this.optionsForSelect = _bindInstanceProperty(_context9 = this.optionsForSelect).call(_context9, this);\n    this.selectFilterOption = _bindInstanceProperty(_context10 = this.selectFilterOption).call(_context10, this);\n    this.isAutoGeneratedMetric = _bindInstanceProperty(_context11 = this.isAutoGeneratedMetric).call(_context11, this);\n    this.optionRenderer = option => ___EmotionJSX(MetricDefinitionOption, { option: option, __source: { fileName: _jsxFileName, lineNumber: 144 }, __self: this });\n    this.valueRenderer = (option) =>\n    ___EmotionJSX(MetricDefinitionValue, {\n      option: option,\n      onMetricEdit: this.onMetricEdit,\n      columns: this.props.columns,\n      multi: this.props.multi,\n      datasourceType: this.props.datasourceType, __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: this });\n\n\n    this.select = null;\n    this.selectRef = ref => {\n      if (ref) {\n        this.select = ref.select;\n      } else {\n        this.select = null;\n      }\n    };\n    this.state = {\n      aggregateInInput: null,\n      options: this.optionsForSelect(this.props),\n      value: coerceAdhocMetrics(this.props.value) };\n\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { value } = this.props;\n    if (\n    !_isEqual(this.props.columns, nextProps.columns) ||\n    !_isEqual(this.props.savedMetrics, nextProps.savedMetrics))\n    {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n\n      // Remove metrics if selected value no longer a column\n      const containsAllMetrics = columnsContainAllMetrics(value, nextProps);\n\n      if (!containsAllMetrics) {\n        this.props.onChange([]);\n      }\n    }\n    if (value !== nextProps.value) {\n      this.setState({ value: coerceAdhocMetrics(nextProps.value) });\n    }\n  }\n\n  onMetricEdit(changedMetric) {var _context12;\n    let newValue = _mapInstanceProperty(_context12 = this.state.value).call(_context12, value => {\n      if (value.optionName === changedMetric.optionName) {\n        return changedMetric;\n      }\n      return value;\n    });\n    if (!this.props.multi) {\n      newValue = newValue[0];\n    }\n    this.props.onChange(newValue);\n  }\n\n  onChange(opts) {var _context13;\n    // if clear out options\n    if (opts === null) {\n      this.props.onChange(null);\n      return;\n    }\n\n    let transformedOpts;\n    if (_Array$isArray(opts)) {\n      transformedOpts = opts;\n    } else {\n      transformedOpts = opts ? [opts] : [];\n    }\n    const optionValues = _filterInstanceProperty(_context13 = _mapInstanceProperty(transformedOpts).call(transformedOpts,\n    option => {\n      // pre-defined metric\n      if (option.metric_name) {\n        return option.metric_name;\n      }\n      // adding a new adhoc metric\n      if (option.column_name) {\n        const clearedAggregate = this.clearedAggregateInInput;\n        this.clearedAggregateInInput = null;\n        return new AdhocMetric({\n          isNew: true,\n          column: option,\n          aggregate: clearedAggregate || getDefaultAggregateForColumn(option) });\n\n      }\n      // existing adhoc metric or custom SQL metric\n      if (option instanceof AdhocMetric) {\n        return option;\n      }\n      // start with selecting an aggregate function\n      if (option.aggregate_name && this.select) {\n        const newValue = option.aggregate_name + \"()\";\n        this.select.inputRef.value = newValue;\n        this.select.handleInputChange({ currentTarget: { value: newValue } });\n        // we need to set a timeout here or the selectionWill be overwritten\n        // by some browsers (e.g. Chrome)\n        _setTimeout(() => {\n          this.select.focusInput();\n          this.select.inputRef.selectionStart = newValue.length - 1;\n          this.select.inputRef.selectionEnd = newValue.length - 1;\n        });\n      }\n      return null;\n    })).call(_context13,\n    option => option);\n    this.props.onChange(this.props.multi ? optionValues : optionValues[0]);\n  }\n\n  checkIfAggregateInInput(input) {\n    const lowercaseInput = input.toLowerCase();\n    const aggregateInInput =\n    _findInstanceProperty(AGGREGATES_OPTIONS).call(AGGREGATES_OPTIONS, (x) =>\n    _startsWithInstanceProperty(lowercaseInput).call(lowercaseInput, x.toLowerCase() + \"(\")) ||\n    null;\n    this.clearedAggregateInInput = this.state.aggregateInInput;\n    this.setState({ aggregateInInput });\n  }\n\n  optionsForSelect(props) {\n    const { columns, savedMetrics } = props;\n    const aggregates =\n    columns && columns.length ?\n    _mapInstanceProperty(AGGREGATES_OPTIONS).call(AGGREGATES_OPTIONS, aggregate => ({\n      aggregate_name: aggregate })) :\n\n    [];\n    const options = [\n    ...(columns || []),\n    ...aggregates,\n    ...(savedMetrics || [])];\n\n\n    return _reduceInstanceProperty(options).call(options, (results, option) => {\n      if (option.metric_name) {\n        results.push(_Object$assign({}, option, { optionName: option.metric_name }));\n      } else if (option.column_name) {\n        results.push(_Object$assign({}, option, { optionName: '_col_' + option.column_name }));\n      } else if (option.aggregate_name) {\n        results.push(_Object$assign({},\n        option, {\n          optionName: '_aggregate_' + option.aggregate_name }));\n\n      }\n      return results;\n    }, []);\n  }\n\n  isAutoGeneratedMetric(savedMetric) {\n    if (this.props.datasourceType === 'druid') {\n      return druidAutoGeneratedMetricRegex.test(savedMetric.verbose_name);\n    }\n    return sqlaAutoGeneratedMetricNameRegex.test(savedMetric.metric_name);\n  }\n\n  selectFilterOption({ data: option }, filterValue) {var _context15, _context16;\n    if (this.state.aggregateInInput) {var _context14;\n      let endIndex = filterValue.length;\n      if (_endsWithInstanceProperty(filterValue).call(filterValue, ')')) {\n        endIndex = filterValue.length - 1;\n      }\n      const valueAfterAggregate = filterValue.substring(\n      _indexOfInstanceProperty(filterValue).call(filterValue, '(') + 1,\n      endIndex);\n\n      return (\n        option.column_name &&\n        _indexOfInstanceProperty(_context14 = option.column_name.toLowerCase()).call(_context14, valueAfterAggregate) >= 0);\n\n    }\n    return (\n      option.optionName && (\n      !option.metric_name ||\n      !this.isAutoGeneratedMetric(option) ||\n      option.verbose_name) && (\n      _indexOfInstanceProperty(_context15 = option.optionName.toLowerCase()).call(_context15, filterValue) >= 0 ||\n      option.verbose_name &&\n      _indexOfInstanceProperty(_context16 = option.verbose_name.toLowerCase()).call(_context16, filterValue) >= 0));\n\n  }\n\n  render() {\n    // TODO figure out why the dropdown isnt appearing as soon as a metric is selected\n    return (\n      ___EmotionJSX(\"div\", { className: \"metrics-select\", __source: { fileName: _jsxFileName, lineNumber: 329 }, __self: this },\n      ___EmotionJSX(ControlHeader, _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 330 }, __self: this })),\n      ___EmotionJSX(OnPasteSelect, {\n        isMulti: this.props.multi,\n        name: \"select-\" + this.props.name,\n        placeholder: t('choose a column or aggregate function'),\n        options: this.state.options,\n        value: this.state.value,\n        labelKey: \"label\",\n        valueKey: \"optionName\",\n        clearable: this.props.clearable,\n        closeOnSelect: true,\n        onChange: this.onChange,\n        optionRenderer: this.optionRenderer,\n        valueRenderer: this.valueRenderer,\n        valueRenderedAsLabel: true,\n        onInputChange: this.checkIfAggregateInInput,\n        filterOption: this.selectFilterOption,\n        selectRef: this.selectRef, __source: { fileName: _jsxFileName, lineNumber: 331 }, __self: this })));\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\");reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\");reactHotLoader.register(columnsContainAllMetrics, \"columnsContainAllMetrics\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\");reactHotLoader.register(coerceAdhocMetrics, \"coerceAdhocMetrics\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\");reactHotLoader.register(getDefaultAggregateForColumn, \"getDefaultAggregateForColumn\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\");reactHotLoader.register(MetricsControl, \"MetricsControl\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/explore/components/controls/MetricsControl.jsx"],"names":["React","PropTypes","t","OnPasteSelect","ControlHeader","MetricDefinitionOption","MetricDefinitionValue","AdhocMetric","columnType","savedMetricType","adhocMetricType","AGGREGATES","AGGREGATES_OPTIONS","sqlaAutoGeneratedMetricNameRegex","druidAutoGeneratedMetricRegex","propTypes","name","string","isRequired","onChange","func","value","oneOfType","arrayOf","columns","savedMetrics","multi","bool","clearable","datasourceType","defaultProps","isDictionaryForAdhocMetric","expressionType","columnsContainAllMetrics","nextProps","columnNames","column_name","metric_name","metric","column","has","coerceAdhocMetrics","val","getDefaultAggregateForColumn","type","COUNT","SUM","match","COUNT_DISTINCT","MAX","MetricsControl","PureComponent","constructor","props","onMetricEdit","checkIfAggregateInInput","optionsForSelect","selectFilterOption","isAutoGeneratedMetric","optionRenderer","option","valueRenderer","select","selectRef","ref","state","aggregateInInput","options","UNSAFE_componentWillReceiveProps","setState","containsAllMetrics","changedMetric","newValue","optionName","opts","transformedOpts","optionValues","clearedAggregate","clearedAggregateInInput","isNew","aggregate","aggregate_name","inputRef","handleInputChange","currentTarget","focusInput","selectionStart","length","selectionEnd","input","lowercaseInput","toLowerCase","x","aggregates","results","push","savedMetric","test","verbose_name","data","filterValue","endIndex","valueAfterAggregate","substring","render"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/translation';\nimport { isEqual } from 'lodash';\n\nimport OnPasteSelect from 'src/components/Select/OnPasteSelect';\n\nimport ControlHeader from '../ControlHeader';\nimport MetricDefinitionOption from '../MetricDefinitionOption';\nimport MetricDefinitionValue from '../MetricDefinitionValue';\nimport AdhocMetric from '../../AdhocMetric';\nimport columnType from '../../propTypes/columnType';\nimport savedMetricType from '../../propTypes/savedMetricType';\nimport adhocMetricType from '../../propTypes/adhocMetricType';\nimport {\n  AGGREGATES,\n  AGGREGATES_OPTIONS,\n  sqlaAutoGeneratedMetricNameRegex,\n  druidAutoGeneratedMetricRegex,\n} from '../../constants';\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n    PropTypes.oneOfType([PropTypes.string, adhocMetricType]),\n  ]),\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasourceType: PropTypes.string,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: [],\n};\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\nfunction columnsContainAllMetrics(value, nextProps) {\n  const columnNames = new Set(\n    [...(nextProps.columns || []), ...(nextProps.savedMetrics || [])]\n      // eslint-disable-next-line camelcase\n      .map(({ column_name, metric_name }) => column_name || metric_name),\n  );\n\n  return (\n    (Array.isArray(value) ? value : [value])\n      .filter(metric => metric)\n      // find column names\n      .map(metric =>\n        metric.column\n          ? metric.column.column_name\n          : metric.column_name || metric,\n      )\n      .filter(name => name && typeof name === 'string')\n      .every(name => columnNames.has(name))\n  );\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map(val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nfunction getDefaultAggregateForColumn(column) {\n  const type = column.type;\n  if (typeof type !== 'string') {\n    return AGGREGATES.COUNT;\n  } else if (type === '' || type === 'expression') {\n    return AGGREGATES.SUM;\n  } else if (\n    type.match(/.*char.*/i) ||\n    type.match(/string.*/i) ||\n    type.match(/.*text.*/i)\n  ) {\n    return AGGREGATES.COUNT_DISTINCT;\n  } else if (\n    type.match(/.*int.*/i) ||\n    type === 'LONG' ||\n    type === 'DOUBLE' ||\n    type === 'FLOAT'\n  ) {\n    return AGGREGATES.SUM;\n  } else if (type.match(/.*bool.*/i)) {\n    return AGGREGATES.MAX;\n  } else if (type.match(/.*time.*/i)) {\n    return AGGREGATES.COUNT;\n  } else if (type.match(/unknown/i)) {\n    return AGGREGATES.COUNT;\n  }\n  return null;\n}\n\nexport default class MetricsControl extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onMetricEdit = this.onMetricEdit.bind(this);\n    this.checkIfAggregateInInput = this.checkIfAggregateInInput.bind(this);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.selectFilterOption = this.selectFilterOption.bind(this);\n    this.isAutoGeneratedMetric = this.isAutoGeneratedMetric.bind(this);\n    this.optionRenderer = option => <MetricDefinitionOption option={option} />;\n    this.valueRenderer = option => (\n      <MetricDefinitionValue\n        option={option}\n        onMetricEdit={this.onMetricEdit}\n        columns={this.props.columns}\n        multi={this.props.multi}\n        datasourceType={this.props.datasourceType}\n      />\n    );\n    this.select = null;\n    this.selectRef = ref => {\n      if (ref) {\n        this.select = ref.select;\n      } else {\n        this.select = null;\n      }\n    };\n    this.state = {\n      aggregateInInput: null,\n      options: this.optionsForSelect(this.props),\n      value: coerceAdhocMetrics(this.props.value),\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { value } = this.props;\n    if (\n      !isEqual(this.props.columns, nextProps.columns) ||\n      !isEqual(this.props.savedMetrics, nextProps.savedMetrics)\n    ) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n\n      // Remove metrics if selected value no longer a column\n      const containsAllMetrics = columnsContainAllMetrics(value, nextProps);\n\n      if (!containsAllMetrics) {\n        this.props.onChange([]);\n      }\n    }\n    if (value !== nextProps.value) {\n      this.setState({ value: coerceAdhocMetrics(nextProps.value) });\n    }\n  }\n\n  onMetricEdit(changedMetric) {\n    let newValue = this.state.value.map(value => {\n      if (value.optionName === changedMetric.optionName) {\n        return changedMetric;\n      }\n      return value;\n    });\n    if (!this.props.multi) {\n      newValue = newValue[0];\n    }\n    this.props.onChange(newValue);\n  }\n\n  onChange(opts) {\n    // if clear out options\n    if (opts === null) {\n      this.props.onChange(null);\n      return;\n    }\n\n    let transformedOpts;\n    if (Array.isArray(opts)) {\n      transformedOpts = opts;\n    } else {\n      transformedOpts = opts ? [opts] : [];\n    }\n    const optionValues = transformedOpts\n      .map(option => {\n        // pre-defined metric\n        if (option.metric_name) {\n          return option.metric_name;\n        }\n        // adding a new adhoc metric\n        if (option.column_name) {\n          const clearedAggregate = this.clearedAggregateInInput;\n          this.clearedAggregateInInput = null;\n          return new AdhocMetric({\n            isNew: true,\n            column: option,\n            aggregate: clearedAggregate || getDefaultAggregateForColumn(option),\n          });\n        }\n        // existing adhoc metric or custom SQL metric\n        if (option instanceof AdhocMetric) {\n          return option;\n        }\n        // start with selecting an aggregate function\n        if (option.aggregate_name && this.select) {\n          const newValue = `${option.aggregate_name}()`;\n          this.select.inputRef.value = newValue;\n          this.select.handleInputChange({ currentTarget: { value: newValue } });\n          // we need to set a timeout here or the selectionWill be overwritten\n          // by some browsers (e.g. Chrome)\n          setTimeout(() => {\n            this.select.focusInput();\n            this.select.inputRef.selectionStart = newValue.length - 1;\n            this.select.inputRef.selectionEnd = newValue.length - 1;\n          });\n        }\n        return null;\n      })\n      .filter(option => option);\n    this.props.onChange(this.props.multi ? optionValues : optionValues[0]);\n  }\n\n  checkIfAggregateInInput(input) {\n    const lowercaseInput = input.toLowerCase();\n    const aggregateInInput =\n      AGGREGATES_OPTIONS.find(x =>\n        lowercaseInput.startsWith(`${x.toLowerCase()}(`),\n      ) || null;\n    this.clearedAggregateInInput = this.state.aggregateInInput;\n    this.setState({ aggregateInInput });\n  }\n\n  optionsForSelect(props) {\n    const { columns, savedMetrics } = props;\n    const aggregates =\n      columns && columns.length\n        ? AGGREGATES_OPTIONS.map(aggregate => ({\n            aggregate_name: aggregate,\n          }))\n        : [];\n    const options = [\n      ...(columns || []),\n      ...aggregates,\n      ...(savedMetrics || []),\n    ];\n\n    return options.reduce((results, option) => {\n      if (option.metric_name) {\n        results.push({ ...option, optionName: option.metric_name });\n      } else if (option.column_name) {\n        results.push({ ...option, optionName: '_col_' + option.column_name });\n      } else if (option.aggregate_name) {\n        results.push({\n          ...option,\n          optionName: '_aggregate_' + option.aggregate_name,\n        });\n      }\n      return results;\n    }, []);\n  }\n\n  isAutoGeneratedMetric(savedMetric) {\n    if (this.props.datasourceType === 'druid') {\n      return druidAutoGeneratedMetricRegex.test(savedMetric.verbose_name);\n    }\n    return sqlaAutoGeneratedMetricNameRegex.test(savedMetric.metric_name);\n  }\n\n  selectFilterOption({ data: option }, filterValue) {\n    if (this.state.aggregateInInput) {\n      let endIndex = filterValue.length;\n      if (filterValue.endsWith(')')) {\n        endIndex = filterValue.length - 1;\n      }\n      const valueAfterAggregate = filterValue.substring(\n        filterValue.indexOf('(') + 1,\n        endIndex,\n      );\n      return (\n        option.column_name &&\n        option.column_name.toLowerCase().indexOf(valueAfterAggregate) >= 0\n      );\n    }\n    return (\n      option.optionName &&\n      (!option.metric_name ||\n        !this.isAutoGeneratedMetric(option) ||\n        option.verbose_name) &&\n      (option.optionName.toLowerCase().indexOf(filterValue) >= 0 ||\n        (option.verbose_name &&\n          option.verbose_name.toLowerCase().indexOf(filterValue) >= 0))\n    );\n  }\n\n  render() {\n    // TODO figure out why the dropdown isnt appearing as soon as a metric is selected\n    return (\n      <div className=\"metrics-select\">\n        <ControlHeader {...this.props} />\n        <OnPasteSelect\n          isMulti={this.props.multi}\n          name={`select-${this.props.name}`}\n          placeholder={t('choose a column or aggregate function')}\n          options={this.state.options}\n          value={this.state.value}\n          labelKey=\"label\"\n          valueKey=\"optionName\"\n          clearable={this.props.clearable}\n          closeOnSelect\n          onChange={this.onChange}\n          optionRenderer={this.optionRenderer}\n          valueRenderer={this.valueRenderer}\n          valueRenderedAsLabel\n          onInputChange={this.checkIfAggregateInInput}\n          filterOption={this.selectFilterOption}\n          selectRef={this.selectRef}\n        />\n      </div>\n    );\n  }\n}\n\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}