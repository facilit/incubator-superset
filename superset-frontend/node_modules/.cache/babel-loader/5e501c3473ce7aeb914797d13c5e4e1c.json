{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";import _mapValues from \"lodash/fp/mapValues\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'./getDashboardFilterKey';\nimport { CHART_TYPE } from '../util/componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return _includesInstanceProperty(allFilterBoxChartIds).call(allFilterBoxChartIds, chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {var _context;\n    const applicableFilters = _filterInstanceProperty(_context = _Object$entries(\n    activeFilters)).call(_context,\n    ([, { scope: chartIds }]) => _includesInstanceProperty(chartIds).call(chartIds, chartId));\n    appliedFilterValuesByChart[chartId] = _flow(\n    _keyBy(\n    ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column),\n\n    _mapValues(([, { values }]) => values))(\n    applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\nexport function getChartIdsInFilterScope({\n  filterScope = DASHBOARD_FILTER_SCOPE_GLOBAL })\n{\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n    component.type === CHART_TYPE &&\n    component.meta &&\n    component.meta.chartId &&\n    !_includesInstanceProperty(immuneChartIds).call(immuneChartIds, component.meta.chartId))\n    {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {var _context2;\n      _forEachInstanceProperty(_context2 = component.children).call(_context2, (child) =>\n      traverse(chartIds, allComponents[child], immuneChartIds));\n\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } = filterScope;\n  _forEachInstanceProperty(scopeComponentIds).call(scopeComponentIds, (componentId) =>\n  traverse(chartIds, allComponents[componentId], immuneChartIds));\n\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {var _context3, _context4;\n  allFilterBoxChartIds = _mapInstanceProperty(_context3 = _Object$values(dashboardFilters)).call(_context3,\n  filter => filter.chartId);\n\n\n  // clear cache\n  if (!_isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = _reduceInstanceProperty(_context4 = _Object$values(dashboardFilters)).call(_context4, (result, filter) => {var _context5;\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    _forEachInstanceProperty(_context5 = _Object$keys(columns)).call(_context5, column => {\n      if (\n      _Array$isArray(columns[column]) ?\n      columns[column].length :\n      columns[column] !== undefined)\n      {var _context6;\n        // remove filter itself\n        const scope = _filterInstanceProperty(_context6 = getChartIdsInFilterScope({\n          filterScope: scopes[column] })).call(_context6,\n        id => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope };\n\n      }\n    });\n\n    return _Object$assign({},\n    result, {},\n    nonEmptyFilters);\n\n  }, {});\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(allFilterBoxChartIds, \"allFilterBoxChartIds\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(activeFilters, \"activeFilters\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(appliedFilterValuesByChart, \"appliedFilterValuesByChart\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(allComponents, \"allComponents\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getActiveFilters, \"getActiveFilters\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(isFilterBox, \"isFilterBox\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getAppliedFilterValues, \"getAppliedFilterValues\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getChartIdsInFilterScope, \"getChartIdsInFilterScope\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(buildActiveFilters, \"buildActiveFilters\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}