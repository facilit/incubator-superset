{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _everyInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/every\";import _isEmpty from \"lodash/isEmpty\";import _flatMap from \"lodash/flatMap\";import _mapValues from \"lodash/fp/mapValues\";import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { CHART_TYPE, TAB_TYPE } from './componentTypes';\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\nfunction getTabChildrenScope({\n  tabScopes,\n  parentNodeValue,\n  forceAggregate = false,\n  hasChartSiblings = false,\n  immuneChartSiblings = [] })\n{var _context, _context2, _context3;\n  // if all sub-tabs are in scope, or forceAggregate =  true\n  // aggregate scope to parentNodeValue\n  if (\n  forceAggregate ||\n  !hasChartSiblings &&\n  _everyInstanceProperty(_context = _Object$entries(tabScopes)).call(_context,\n  ([key, { scope }]) => scope && scope.length && key === scope[0]))\n\n  {\n    return {\n      scope: [parentNodeValue],\n      immune: _flatMap(_Object$values(tabScopes), ({ immune }) => immune) };\n\n  }\n\n  const componentsInScope = _filterInstanceProperty(_context2 = _Object$values(tabScopes)).call(_context2,\n  ({ scope }) => scope && scope.length);\n\n  return {\n    scope: _flatMap(componentsInScope, ({ scope }) => scope),\n    immune: componentsInScope.length ?\n    _flatMap(componentsInScope, ({ immune }) => immune) :\n    _concatInstanceProperty(_context3 = _flatMap(_Object$values(tabScopes), ({ immune }) => immune)).call(_context3,\n    immuneChartSiblings) };\n\n\n}\n\nfunction traverse({ currentNode = {}, filterId, checkedChartIds = [] }) {var _context4;\n  if (!currentNode) {\n    return {};\n  }\n\n  const { value: currentValue, children } = currentNode;\n  const chartChildren = _filterInstanceProperty(children).call(children, ({ type }) => type === CHART_TYPE);\n  const tabChildren = _filterInstanceProperty(children).call(children, ({ type }) => type === TAB_TYPE);\n\n  const chartsImmune = _mapInstanceProperty(_context4 = _filterInstanceProperty(chartChildren).call(chartChildren,\n\n  ({ value }) => filterId !== value && !_includesInstanceProperty(checkedChartIds).call(checkedChartIds, value))).call(_context4,\n\n  ({ value }) => value);\n  const tabScopes = _flow(\n  _keyBy(child => child.value),\n  _mapValues((child) =>\n  traverse({\n    currentNode: child,\n    filterId,\n    checkedChartIds })))(\n\n\n  tabChildren);\n\n  // if any chart type child is in scope,\n  // no matter has tab children or not, current node should be scope\n  if (\n  !_isEmpty(chartChildren) &&\n  _someInstanceProperty(chartChildren).call(chartChildren, ({ value }) => _includesInstanceProperty(checkedChartIds).call(checkedChartIds, value)))\n  {\n    if (_isEmpty(tabChildren)) {\n      return { scope: [currentValue], immune: chartsImmune };\n    }\n\n    const { scope, immune } = getTabChildrenScope({\n      tabScopes,\n      parentNodeValue: currentValue,\n      forceAggregate: true });\n\n    return {\n      scope,\n      immune: _concatInstanceProperty(chartsImmune).call(chartsImmune, immune) };\n\n  }\n\n  // has tab children but only some sub-tab in scope\n  if (tabChildren.length) {\n    return getTabChildrenScope({\n      tabScopes,\n      parentNodeValue: currentValue,\n      hasChartSiblings: !_isEmpty(chartChildren),\n      immuneChartSiblings: chartsImmune });\n\n  }\n\n  // no tab children and no chart children in scope\n  return {\n    scope: [],\n    immune: chartsImmune };\n\n}\n\nexport default function getFilterScopeFromNodesTree({\n  filterKey,\n  nodes = [],\n  checkedChartIds = [] })\n{\n  if (nodes.length) {\n    const { chartId } = getChartIdAndColumnFromFilterKey(filterKey);\n    return traverse({\n      currentNode: nodes[0],\n      filterId: chartId,\n      checkedChartIds });\n\n  }\n\n  return {};\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getTabChildrenScope, \"getTabChildrenScope\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/getFilterScopeFromNodesTree.js\");reactHotLoader.register(traverse, \"traverse\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/getFilterScopeFromNodesTree.js\");reactHotLoader.register(getFilterScopeFromNodesTree, \"getFilterScopeFromNodesTree\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/getFilterScopeFromNodesTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}