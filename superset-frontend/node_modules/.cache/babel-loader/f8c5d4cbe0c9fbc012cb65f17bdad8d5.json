{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Licensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * specific language governing permissions and limitations\nunder the License.\nnimport { t } from '@superset-ui/translation';\n\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../modules/dates';\nimport {\naddToObject,\nalterInObject,\nalterInArr,\nremoveFromArr,\ngetFromArr,\naddToArr,\nextendArr } from\n'../../reduxUtils';\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {var _context;\n      const tabHistory = _sliceInstanceProperty(_context = state.tabHistory).call(_context);\n      tabHistory.push(action.queryEditor.id);\n      const newState = _Object$assign({}, state, { tabHistory });\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {var _context2;\n      const { query, result } = action;\n      const existing = _findInstanceProperty(_context2 = state.queryEditors).call(_context2, qe => qe.id === query.id);\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      {\n        remoteId: result.remoteId,\n        title: query.title },\n\n      'id');\n\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {var _context3;\n      const id = action.alterations.remoteId;\n      const existing = _findInstanceProperty(_context3 = state.queryEditors).call(_context3, qe => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      action.alterations,\n      'remoteId');\n\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {var _context4;\n      const progenitor = _findInstanceProperty(_context4 = state.queryEditors).call(_context4,\n      qe => qe.id === state.tabHistory[state.tabHistory.length - 1]);\n\n      const qe = {\n        remoteId: progenitor.remoteId,\n        title: t('Copy of %s', progenitor.title),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow };\n\n      return sqlLabReducer(state, actions.addQueryEditor(qe));\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {var _context5, _context6, _context7, _context8;\n      let newState = removeFromArr(state, 'queryEditors', action.queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = _mapInstanceProperty(_context5 = newState.queryEditors).call(_context5, qe => qe.id);\n\n      const queries = {};\n      _forEachInstanceProperty(_context6 = _Object$keys(state.queries)).call(_context6, k => {\n        const query = state.queries[k];\n        if (_indexOfInstanceProperty(qeIds).call(qeIds, query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = _sliceInstanceProperty(_context7 = state.tabHistory).call(_context7);\n      tabHistory = _filterInstanceProperty(tabHistory).call(tabHistory, id => _indexOfInstanceProperty(qeIds).call(qeIds, id) > -1);\n\n      // Remove associated table schemas\n      const tables = _filterInstanceProperty(_context8 = state.tables).call(_context8,\n      table => table.queryEditorId !== action.queryEditor.id);\n\n\n      newState = _Object$assign({}, newState, { tabHistory, tables, queries });\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = _Object$assign({}, state.queries);\n      delete newQueries[action.query.id];\n      return _Object$assign({}, state, { queries: newQueries });\n    },\n    [actions.RESET_STATE]() {\n      return _Object$assign({}, getInitialState());\n    },\n    [actions.MERGE_TABLE]() {var _context9;\n      const at = _Object$assign({}, action.table);\n      let existingTable;\n      _forEachInstanceProperty(_context9 = state.tables).call(_context9, xt => {\n        if (\n        xt.dbId === at.dbId &&\n        xt.queryEditorId === at.queryEditorId &&\n        xt.schema === at.schema &&\n        xt.name === at.name)\n        {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at);\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id });\n\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = _Object$assign({}, state.queries);\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null });\n\n      return _Object$assign({}, newState, { queries });\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {var _context10;\n      const queries = _Object$assign({}, state.queries);\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      _forEachInstanceProperty(_context10 = state.tables).call(_context10, xt => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push(_Object$assign({}, xt, { dataPreviewQueryId: action.newQuery.id }));\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return _Object$assign({},\n      state, {\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id });\n\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLE]() {\n      return removeFromArr(state, 'tables', action.table);\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [],\n          completed: false } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: action.results,\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n          {\n            line_number: 1,\n            start_column: 1,\n            end_column: 1,\n            message: \"The server failed to validate your query.\\n\" + action.message }],\n\n\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: true,\n          cost: action.json,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      let newState = _Object$assign({}, state);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: action.error } });\n\n\n      return newState;\n    },\n    [actions.START_QUERY]() {\n      let newState = _Object$assign({}, state);\n      if (action.query.sqlEditorId) {\n        const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = _Object$assign({},\n          state.queries[qe.latestQueryId].results, {\n            data: [],\n            query: null });\n\n          const q = _Object$assign({}, state.queries[qe.latestQueryId], { results: newResults });\n          const queries = _Object$assign({}, state.queries, { [q.id]: q });\n          newState = _Object$assign({}, state, { queries });\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      return alterInArr(newState, 'queryEditors', sqlEditor, {\n        latestQueryId: action.query.id });\n\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'stopped',\n        results: [] });\n\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = _Object$assign({}, action.query.results);\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true });\n\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'fetching' });\n\n    },\n    [actions.QUERY_SUCCESS]() {\n      let rows;\n      if (action.results.data) {\n        rows = action.results.data.length;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows,\n        state: 'success',\n        errorMessage: null,\n        cached: false };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        state: 'failed',\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {var _context11;\n      const qeIds = _mapInstanceProperty(_context11 = state.queryEditors).call(_context11, qe => qe.id);\n      if (\n      _indexOfInstanceProperty(qeIds).call(qeIds, action.queryEditor.id) > -1 &&\n      state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id)\n      {var _context12;\n        const tabHistory = _sliceInstanceProperty(_context12 = state.tabHistory).call(_context12);\n        tabHistory.push(action.queryEditor.id);\n        return _Object$assign({}, state, { tabHistory });\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, _Object$assign({},\n      action.queryEditor));\n\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return _Object$assign({}, state, { activeSouthPaneTab: action.tabId });\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {var _context13;\n      // remove migrated query editor from localStorage\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.queryEditors = _filterInstanceProperty(_context13 = sqlLab.queryEditors).call(_context13,\n      qe => qe.id !== action.oldQueryEditor.id);\n\n      localStorage.setItem('redux', _JSON$stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n      removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n      'queryEditors',\n      action.newQueryEditor);\n\n    },\n    [actions.MIGRATE_TABLE]() {var _context14;\n      // remove migrated table from localStorage\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.tables = _filterInstanceProperty(_context14 = sqlLab.tables).call(_context14,\n      table => table.id !== action.oldTable.id);\n\n      localStorage.setItem('redux', _JSON$stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n      removeFromArr(state, 'tables', action.oldTable),\n      'tables',\n      action.newTable);\n\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {var _context15, _context16;\n      // remove migrated tab from localStorage tabHistory\n      const sqlLab = JSON.parse(localStorage.getItem('redux')).sqlLab;\n      sqlLab.tabHistory = _filterInstanceProperty(_context15 = sqlLab.tabHistory).call(_context15,\n      tabId => tabId !== action.oldId);\n\n      localStorage.setItem('redux', _JSON$stringify({ sqlLab }));\n      const tabHistory = _filterInstanceProperty(_context16 = state.tabHistory).call(_context16,\n      tabId => tabId !== action.oldId);\n\n      tabHistory.push(action.newId);\n      return _Object$assign({}, state, { tabHistory });\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = _Object$assign({},\n      state.queries[action.queryId], {\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId });\n\n      const queries = _Object$assign({}, state.queries, { [query.id]: query });\n      return _Object$assign({}, state, { queries });\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        dbId: action.dbId });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schema: action.schema });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schemaOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TABLE_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        tableOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        title: action.title });\n\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        sql: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        queryLimit: action.queryLimit });\n\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        templateParams: action.templateParams });\n\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        selectedText: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        autorun: action.autorun });\n\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        northPercent: action.northPercent,\n        southPercent: action.southPercent });\n\n    },\n    [actions.SET_DATABASES]() {var _context17;\n      const databases = {};\n      _forEachInstanceProperty(_context17 = action.databases).call(_context17, db => {\n        databases[db.id] = db;\n      });\n      return _Object$assign({}, state, { databases });\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = _Object$assign({}, state.queries);\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let queriesLastUpdate = state.queriesLastUpdate;\n      for (const id in action.alteredQueries) {\n        const changedQuery = action.alteredQueries[id];\n        if (\n        !state.queries.hasOwnProperty(id) ||\n        state.queries[id].state !== 'stopped' &&\n        state.queries[id].state !== 'failed')\n        {\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          newQueries[id] = _Object$assign({}, state.queries[id], {}, changedQuery);\n          change = true;\n        }\n      }\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return _Object$assign({}, state, { queries: newQueries, queriesLastUpdate });\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return _Object$assign({}, state, { offline: action.offline });\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return _Object$assign({}, state, { isDatasourceLoading: true, errorMessage: null });\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return _Object$assign({},\n      state, {\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource });\n\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return _Object$assign({}, state, { isDatasourceLoading: false, errorMessage: action.err });\n    } };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sqlLabReducer, \"sqlLabReducer\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}