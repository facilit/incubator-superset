{"ast":null,"code":"import \"core-js/modules/es.string.replace\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import domToImage from 'dom-to-image';\nimport kebabCase from 'lodash/kebabCase';\nimport { t } from '@superset-ui/translation';\nimport { addWarningToast } from 'src/messageToasts/actions';\n/**\n                                                              * @remark\n                                                              * same as https://github.com/apache/incubator-superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/stylesheets/less/variables.less#L34\n                                                              */\nconst GRAY_BACKGROUND_COLOR = '#F5F5F5';\n/**\n                                          * generate a consistent file stem from a description and date\n                                          *\n                                          * @param description title or description of content of file\n                                          * @param date date when file was generated\n                                          */\nconst generateFileStem = (description, date = new Date()) => {\n  return kebabCase(description) + \"-\" + date.\n  toISOString().\n  replace(/[: ]/g, '-');\n};\n/**\n    * Create an event handler for turning an element into an image\n    *\n    * @param selector css selector of the parent element which should be turned into image\n    * @param description name or a short description of what is being printed.\n    *   Value will be normalized, and a date as well as a file extension will be added.\n    * @param backgroundColor background color to apply to screenshot document\n    * @returns event handler\n    */\nexport default function downloadAsImage(selector, description, backgroundColor = GRAY_BACKGROUND_COLOR) {\n  return event => {\n    const elementToPrint = event.currentTarget.closest(selector);\n    if (!elementToPrint)\n    return addWarningToast(t('Image download failed, please refresh and try again.'));\n    return domToImage.\n    toJpeg(elementToPrint, { quality: 0.95, bgcolor: backgroundColor }).\n    then(dataUrl => {\n      const link = document.createElement('a');\n      link.download = generateFileStem(description) + \".jpg\";\n      link.href = dataUrl;\n      link.click();\n    });\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(GRAY_BACKGROUND_COLOR, \"GRAY_BACKGROUND_COLOR\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/downloadAsImage.ts\");reactHotLoader.register(generateFileStem, \"generateFileStem\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/downloadAsImage.ts\");reactHotLoader.register(downloadAsImage, \"downloadAsImage\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/downloadAsImage.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/downloadAsImage.ts"],"names":[],"mappings":"kVAmBA,OAAO,UAAP,MAAuB,cAAvB;AACA,OAAO,SAAP,MAAsB,kBAAtB;AACA,SAAS,CAAT,QAAkB,0BAAlB;AACA,SAAS,eAAT,QAAgC,2BAAhC;AAEA;;;;AAIA,MAAM,qBAAqB,GAAG,SAA9B;AAEA;;;;;;AAMA,MAAM,gBAAgB,GAAG,CAAC,WAAD,EAAsB,IAAI,GAAG,IAAI,IAAJ,EAA7B,KAA2C;AAClE,SAAU,SAAS,CAAC,WAAD,CAAnB,SAAoC,IAAI;AACrC,EAAA,WADiC;AAEjC,EAAA,OAFiC,CAEzB,OAFyB,EAEhB,GAFgB,CAApC;AAGD,CAJD;AAMA;;;;;;;;;AASA,eAAc,SAAU,eAAV,CACZ,QADY,EAEZ,WAFY,EAGZ,eAAe,GAAG,qBAHN,EAG2B;AAEvC,SAAQ,KAAD,IAA0B;AAC/B,UAAM,cAAc,GAAG,KAAK,CAAC,aAAN,CAAoB,OAApB,CAA4B,QAA5B,CAAvB;AAEA,QAAI,CAAC,cAAL;AACE,WAAO,eAAe,CACpB,CAAC,CAAC,sDAAD,CADmB,CAAtB;AAIF,WAAO,UAAU;AACd,IAAA,MADI,CACG,cADH,EACmB,EAAE,OAAO,EAAE,IAAX,EAAiB,OAAO,EAAE,eAA1B,EADnB;AAEJ,IAAA,IAFI,CAEC,OAAO,IAAG;AACd,YAAM,IAAI,GAAG,QAAQ,CAAC,aAAT,CAAuB,GAAvB,CAAb;AACA,MAAA,IAAI,CAAC,QAAL,GAAmB,gBAAgB,CAAC,WAAD,CAAnC;AACA,MAAA,IAAI,CAAC,IAAL,GAAY,OAAZ;AACA,MAAA,IAAI,CAAC,KAAL;AACD,KAPI,CAAP;AAQD,GAhBD;AAiBD,C,iLA7CK,qB,yJAQA,gB,oJAekB,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SyntheticEvent } from 'react';\nimport domToImage from 'dom-to-image';\nimport kebabCase from 'lodash/kebabCase';\nimport { t } from '@superset-ui/translation';\nimport { addWarningToast } from 'src/messageToasts/actions';\n\n/**\n * @remark\n * same as https://github.com/apache/incubator-superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/stylesheets/less/variables.less#L34\n */\nconst GRAY_BACKGROUND_COLOR = '#F5F5F5';\n\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description: string, date = new Date()) => {\n  return `${kebabCase(description)}-${date\n    .toISOString()\n    .replace(/[: ]/g, '-')}`;\n};\n\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param backgroundColor background color to apply to screenshot document\n * @returns event handler\n */\nexport default function downloadAsImage(\n  selector: string,\n  description: string,\n  backgroundColor = GRAY_BACKGROUND_COLOR,\n) {\n  return (event: SyntheticEvent) => {\n    const elementToPrint = event.currentTarget.closest(selector);\n\n    if (!elementToPrint)\n      return addWarningToast(\n        t('Image download failed, please refresh and try again.'),\n      );\n\n    return domToImage\n      .toJpeg(elementToPrint, { quality: 0.95, bgcolor: backgroundColor })\n      .then(dataUrl => {\n        const link = document.createElement('a');\n        link.download = `${generateFileStem(description)}.jpg`;\n        link.href = dataUrl;\n        link.click();\n      });\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}