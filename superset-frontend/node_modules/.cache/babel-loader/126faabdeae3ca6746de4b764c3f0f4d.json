{"ast":null,"code":"import \"core-js/modules/es.string.replace\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import domToImage from 'dom-to-image';\nimport kebabCase from 'lodash/kebabCase';\nimport { t } from '@superset-ui/translation';\nimport { addWarningToast } from 'src/messageToasts/actions';\n/**\n                                                              * @remark\n                                                              * same as https://github.com/apache/incubator-superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/stylesheets/less/variables.less#L34\n                                                              */\nconst GRAY_BACKGROUND_COLOR = '#F5F5F5';\n/**\n                                          * generate a consistent file stem from a description and date\n                                          *\n                                          * @param description title or description of content of file\n                                          * @param date date when file was generated\n                                          */\nconst generateFileStem = (description, date = new Date()) => {\n  return kebabCase(description) + \"-\" + date.\n  toISOString().\n  replace(/[: ]/g, '-');\n};\n/**\n    * Create an event handler for turning an element into an image\n    *\n    * @param selector css selector of the parent element which should be turned into image\n    * @param description name or a short description of what is being printed.\n    *   Value will be normalized, and a date as well as a file extension will be added.\n    * @param backgroundColor background color to apply to screenshot document\n    * @returns event handler\n    */\nexport default function downloadAsImage(selector, description, backgroundColor = GRAY_BACKGROUND_COLOR) {\n  return event => {\n    const elementToPrint = event.currentTarget.closest(selector);\n    if (!elementToPrint)\n    return addWarningToast(t('Image download failed, please refresh and try again.'));\n    return domToImage.\n    toJpeg(elementToPrint, { quality: 0.95, bgcolor: backgroundColor }).\n    then(dataUrl => {\n      const link = document.createElement('a');\n      link.download = generateFileStem(description) + \".jpg\";\n      link.href = dataUrl;\n      link.click();\n    });\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(GRAY_BACKGROUND_COLOR, \"GRAY_BACKGROUND_COLOR\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/downloadAsImage.ts\");reactHotLoader.register(generateFileStem, \"generateFileStem\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/downloadAsImage.ts\");reactHotLoader.register(downloadAsImage, \"downloadAsImage\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/dashboard/util/downloadAsImage.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}