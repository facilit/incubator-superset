{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\nicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\nicense\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *\nnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\nneither express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\nnimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Badge, Col, Label, Tabs, Tab, Well } from 'react-bootstrap';\nimport shortid from 'shortid';\nimport { t } from '@superset-ui/translation';\nimport { SupersetClient } from '@superset-ui/connection';\nimport getClientErrorObject from '../utils/getClientErrorObject';\n\nimport Button from '../components/Button';\nimport Loading from '../components/Loading';\nimport TableSelector from '../components/TableSelector';\nimport CheckboxControl from '../explore/components/controls/CheckboxControl';\nimport TextControl from '../explore/components/controls/TextControl';\nimport SelectControl from '../explore/components/controls/SelectControl';\nimport TextAreaControl from '../explore/components/controls/TextAreaControl';\nimport SelectAsyncControl from '../explore/components/controls/SelectAsyncControl';\nimport SpatialControl from '../explore/components/controls/SpatialControl';\nimport CollectionTable from '../CRUD/CollectionTable';\nimport EditableTitle from '../components/EditableTitle';\nimport Fieldset from '../CRUD/Fieldset';\nimport Field from '../CRUD/Field';\n\nimport withToasts from '../messageToasts/enhancers/withToasts';\n\nimport './main.less';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst checkboxGenerator = (d, onChange) =>\n___EmotionJSX(CheckboxControl, { value: d, onChange: onChange });\n\nconst DATA_TYPES = ['STRING', 'NUMERIC', 'DATETIME'];\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    ___EmotionJSX(\"div\", null,\n    title, \" \", ___EmotionJSX(Badge, null, collection ? collection.length : 0)));\n\n\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array };\n\n\nfunction ColumnCollectionTable({\n  columns,\n  onChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator })\n{\n  return (\n    ___EmotionJSX(CollectionTable, {\n      collection: columns,\n      tableColumns: ['column_name', 'type', 'is_dttm', 'filterable', 'groupby'],\n      allowDeletes: true,\n      allowAddItem: allowAddItem,\n      itemGenerator: itemGenerator,\n      expandFieldset:\n      ___EmotionJSX(FormContainer, null,\n      ___EmotionJSX(Fieldset, { compact: true },\n      showExpression &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"expression\",\n        label: t('SQL Expression'),\n        control: ___EmotionJSX(TextControl, null) }),\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"verbose_name\",\n        label: t('Label'),\n        control: ___EmotionJSX(TextControl, null) }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control: ___EmotionJSX(TextControl, null) }),\n\n      allowEditDataType &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"type\",\n        label: t('Data Type'),\n        control:\n        ___EmotionJSX(SelectControl, { choices: DATA_TYPES, name: \"type\", freeForm: true }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"python_date_format\",\n        label: t('Datetime Format'),\n        descr:\n        /* Note the fragmented translations may not work. */\n        ___EmotionJSX(\"div\", null,\n        t('The pattern of timestamp format. For strings use '),\n        ___EmotionJSX(\"a\", { href: \"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\" },\n        t('python datetime string pattern')),\n\n        t(' expression which needs to adhere to the '),\n        ___EmotionJSX(\"a\", { href: \"https://en.wikipedia.org/wiki/ISO_8601\" },\n        t('ISO 8601')),\n\n        t(\" standard to ensure that the lexicographical ordering\\n                      coincides with the chronological ordering. If the\\n                      timestamp format does not adhere to the ISO 8601 standard\\n                      you will need to define an expression and type for\\n                      transforming the string into a date or timestamp. Note\\n                      currently time zones are not supported. If time is stored\\n                      in epoch format, put `epoch_s` or `epoch_ms`. If no pattern\\n                      is specified we fall back to using the optional defaults on a per\\n                      database/column name level via the extra parameter.\")),\n\n\n\n\n\n\n\n\n\n\n        control: ___EmotionJSX(TextControl, null) }))),\n\n\n\n\n      columnLabels: {\n        column_name: t('Column'),\n        type: t('Data Type'),\n        groupby: t('Is Dimension'),\n        is_dttm: t('Is Temporal'),\n        filterable: t('Is Filterable') },\n\n      onChange: onChange,\n      itemRenderers: {\n        column_name: (v, onItemChange) =>\n        editableColumnName ?\n        ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onItemChange }) :\n\n        v,\n\n        type: d => ___EmotionJSX(Label, { style: { fontSize: '75%' } }, d),\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator } }));\n\n\n\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func };\n\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: '<new column>',\n    filterable: true,\n    groupby: true }) };\n\n\n\nfunction StackedField({ label, formElement }) {\n  return (\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"strong\", null, label)),\n\n    ___EmotionJSX(\"div\", null, formElement)));\n\n\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node };\n\n\nfunction FormContainer({ children }) {\n  return ___EmotionJSX(Well, { style: { marginTop: 20 } }, children);\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node };\n\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  onChange: () => {} };\n\n\nexport class DatasourceEditor extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9;\n    super(props);\n    this.state = {\n      datasource: props.datasource,\n      errors: [],\n      isDruid: props.datasource.type === 'druid',\n      isSqla: props.datasource.type === 'table',\n      databaseColumns: _filterInstanceProperty(_context = props.datasource.columns).call(_context, col => !col.expression),\n      calculatedColumns: _filterInstanceProperty(_context2 = props.datasource.columns).call(_context2,\n      col => !!col.expression),\n\n      metadataLoading: false,\n      activeTabKey: 1 };\n\n\n    this.onChange = _bindInstanceProperty(_context3 = this.onChange).call(_context3, this);\n    this.onDatasourcePropChange = _bindInstanceProperty(_context4 = this.onDatasourcePropChange).call(_context4, this);\n    this.onDatasourceChange = _bindInstanceProperty(_context5 = this.onDatasourceChange).call(_context5, this);\n    this.syncMetadata = _bindInstanceProperty(_context6 = this.syncMetadata).call(_context6, this);\n    this.setColumns = _bindInstanceProperty(_context7 = this.setColumns).call(_context7, this);\n    this.validateAndChange = _bindInstanceProperty(_context8 = this.validateAndChange).call(_context8, this);\n    this.handleTabSelect = _bindInstanceProperty(_context9 = this.handleTabSelect).call(_context9, this);\n  }\n\n  onChange() {\n    const datasource = _Object$assign({},\n    this.state.datasource, {\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns] });\n\n    this.props.onChange(datasource, this.state.errors);\n  }\n  onDatasourceChange(datasource) {\n    this.setState({ datasource }, this.validateAndChange);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    const datasource = _Object$assign({}, this.state.datasource, { [attr]: value });\n    this.setState({ datasource }, this.onDatasourceChange(datasource));\n  }\n\n  setColumns(obj) {\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  mergeColumns(cols) {\n    let { databaseColumns } = this.state;\n    let hasChanged;\n    const currentColNames = _mapInstanceProperty(databaseColumns).call(databaseColumns, col => col.column_name);\n    _forEachInstanceProperty(cols).call(cols, col => {\n      if (_indexOfInstanceProperty(currentColNames).call(currentColNames, col.name) < 0) {\n        // Adding columns\n        databaseColumns = _concatInstanceProperty(databaseColumns).call(databaseColumns, [\n        {\n          id: shortid.generate(),\n          column_name: col.name,\n          type: col.type,\n          groupby: true,\n          filterable: true }]);\n\n\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      this.setColumns({ databaseColumns });\n    }\n  }\n  syncMetadata() {\n    const { datasource } = this.state;\n    // Handle carefully when the schema is empty\n    const endpoint =\n    \"/datasource/external_metadata/\" + datasource.type + \"/\" + datasource.id + \"/\" + (\"?db_id=\" +\n    datasource.database.id) + (\"&schema=\" + (\n    datasource.schema || '')) + (\"&table_name=\" +\n    datasource.datasource_name);\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint }).\n    then(({ json }) => {\n      this.mergeColumns(json);\n      this.props.addSuccessToast(t('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then(({ error, statusText }) => {\n      this.props.addDangerToast(\n      error || statusText || t('An error has occurred'));\n\n      this.setState({ metadataLoading: false });\n    }));\n\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    _forEachInstanceProperty(arr).call(arr, obj => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {var _context10;\n    let errors = [];\n    let dups;\n    const datasource = this.state.datasource;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, obj => obj.column_name);\n    errors = _concatInstanceProperty(errors).call(errors,\n    _mapInstanceProperty(dups).call(dups, name => t('Column name [%s] is duplicated', name)));\n\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, obj => obj.metric_name);\n    errors = _concatInstanceProperty(errors).call(errors,\n    _mapInstanceProperty(dups).call(dups, name => t('Metric name [%s] is duplicated', name)));\n\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = _filterInstanceProperty(_context10 = this.state.calculatedColumns).call(_context10,\n    col => !col.expression && !col.json);\n\n    errors = _concatInstanceProperty(errors).call(errors,\n    _mapInstanceProperty(noFilterCalcCols).call(noFilterCalcCols, (col) =>\n    t('Calculated column [%s] requires an expression', col.column_name)));\n\n\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  renderSettingsFieldset() {\n    const datasource = this.state.datasource;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Basic'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"tableSelector\",\n        label: t('Physical Table'),\n        control:\n        ___EmotionJSX(TableSelector, {\n          dbId: datasource.database.id,\n          schema: datasource.schema,\n          tableName: datasource.datasource_name,\n          onSchemaChange: (schema) =>\n          this.onDatasourcePropChange('schema', schema),\n\n          onDbChange: (database) =>\n          this.onDatasourcePropChange('database', database),\n\n          onTableChange: (table) =>\n          this.onDatasourcePropChange('datasource_name', table),\n\n          sqlLabMode: false,\n          clearable: false,\n          handleError: this.props.addDangerToast }),\n\n\n        descr: t(\n        'The pointer to a physical table. Keep in mind that the chart is ' +\n        'associated to this Superset logical table, and this logical table points ' +\n        'the physical table referenced here.') }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"markdown\", offerEditInModal: false }) }),\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"default_endpoint\",\n        label: t('Default URL'),\n        descr: t(\n        'Default URL to redirect to when accessing from the datasource list page'),\n\n        control: ___EmotionJSX(TextControl, null) }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"filter_select_enabled\",\n        label: t('Autocomplete filters'),\n        descr: t('Whether to populate autocomplete filters options'),\n        control: ___EmotionJSX(CheckboxControl, null) }),\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"fetch_values_predicate\",\n        label: t('Autocomplete Query Predicate'),\n        descr: t(\n        'When using \"Autocomplete filters\", this can be used to improve performance ' +\n        'of the query fetching the values. Use this option to apply a ' +\n        'predicate (WHERE clause) to the query selecting the distinct ' +\n        'values from the table. Typically the intent would be to limit the scan ' +\n        'by applying a relative time filter on a partitioned or indexed time-related field.'),\n\n        control: ___EmotionJSX(TextControl, null) }),\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"owners\",\n        label: t('Owners'),\n        descr: t('Owners of the datasource'),\n        control:\n        ___EmotionJSX(SelectAsyncControl, {\n          dataEndpoint: \"/users/api/read\",\n          multi: true,\n          mutator: data => {var _context11;return (\n              _mapInstanceProperty(_context11 = data.pks).call(_context11, (pk, i) => ({\n                value: pk,\n                label: data.result[i].first_name + \" \" + data.result[i].last_name })));} }),\n\n\n\n\n        controlProps: {} })));\n\n\n\n  }\n\n  renderAdvancedFieldset() {\n    const datasource = this.state.datasource;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Advanced'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"sql\",\n        label: t('SQL'),\n        descr: t(\n        'When specifying SQL, the datasource acts as a view. ' +\n        'Superset will use this statement as a subquery while grouping and filtering ' +\n        'on the generated parent queries.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"sql\", offerEditInModal: false }) }),\n\n\n\n      this.state.isDruid &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"json\",\n        label: t('JSON'),\n        descr:\n        ___EmotionJSX(\"div\", null, t('The JSON metric or post aggregation definition.')),\n\n        control:\n        ___EmotionJSX(TextAreaControl, { language: \"json\", offerEditInModal: false }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"cache_timeout\",\n        label: t('Cache Timeout'),\n        descr: t(\n        'The duration of time in seconds before the cache is invalidated'),\n\n        control: ___EmotionJSX(TextControl, null) }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"offset\",\n        label: t('Hours offset'),\n        control: ___EmotionJSX(TextControl, null) }),\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"template_params\",\n        label: t('Template parameters'),\n        descr: t(\n        'A set of parameters that become available in the query using Jinja templating syntax'),\n\n        control: ___EmotionJSX(TextControl, null) })));\n\n\n\n\n  }\n\n  renderSpatialTab() {var _context12;\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, { collection: spatials, title: t('Spatial') }),\n\n        eventKey: 4 },\n\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['name', 'config'],\n        onChange: _bindInstanceProperty(_context12 = this.onDatasourcePropChange).call(_context12, this, 'spatials'),\n        itemGenerator: () => ({\n          name: '<new spatial>',\n          type: '<no type>',\n          config: null }),\n\n        collection: spatials,\n        allowDeletes: true,\n        itemRenderers: {\n          name: (d, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: d, onSaveTitle: onChange }),\n\n          config: (v, onChange) =>\n          ___EmotionJSX(SpatialControl, { value: v, onChange: onChange, choices: allCols }) } })));\n\n\n\n\n\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {var _context13;\n      return (\n        ___EmotionJSX(Alert, { bsStyle: \"danger\" },\n        _mapInstanceProperty(_context13 = this.state.errors).call(_context13, (err) =>\n        ___EmotionJSX(\"div\", { key: err }, err))));\n\n\n\n    }\n    return null;\n  }\n\n  renderMetricCollection() {var _context14;\n    return (\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['metric_name', 'verbose_name', 'expression'],\n        columnLabels: {\n          metric_name: t('Metric'),\n          verbose_name: t('Label'),\n          expression: t('SQL Expression') },\n\n        expandFieldset:\n        ___EmotionJSX(FormContainer, null,\n        ___EmotionJSX(Fieldset, null,\n        ___EmotionJSX(Field, {\n          fieldKey: \"verbose_name\",\n          label: t('Label'),\n          control: ___EmotionJSX(TextControl, null) }),\n\n        ___EmotionJSX(Field, {\n          fieldKey: \"description\",\n          label: t('Description'),\n          control: ___EmotionJSX(TextControl, null) }),\n\n        ___EmotionJSX(Field, {\n          fieldKey: \"d3format\",\n          label: t('D3 Format'),\n          control: ___EmotionJSX(TextControl, null) }),\n\n        ___EmotionJSX(Field, {\n          label: t('Warning Message'),\n          fieldKey: \"warning_text\",\n          description: t(\n          'Warning message to display in the metric selector'),\n\n          control: ___EmotionJSX(TextControl, null) }))),\n\n\n\n\n        collection: this.state.datasource.metrics,\n        allowAddItem: true,\n        onChange: _bindInstanceProperty(_context14 = this.onDatasourcePropChange).call(_context14, this, 'metrics'),\n        itemGenerator: () => ({\n          metric_name: '<new metric>',\n          verbose_name: '',\n          expression: '' }),\n\n        itemRenderers: {\n          metric_name: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange }),\n\n          verbose_name: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange }),\n\n          expression: (v, onChange) =>\n          ___EmotionJSX(EditableTitle, {\n            canEdit: true,\n            title: v,\n            onSaveTitle: onChange,\n            extraClasses: ['datasource-sql-expression'],\n            multiLine: true }),\n\n\n          description: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }),\n\n\n          d3format: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }) },\n\n\n\n        allowDeletes: true }));\n\n\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    return (\n      ___EmotionJSX(\"div\", { className: \"Datasource\" },\n      this.renderErrors(),\n      ___EmotionJSX(Tabs, {\n        id: \"table-tabs\",\n        onSelect: this.handleTabSelect,\n        defaultActiveKey: activeTabKey },\n\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: datasource.metrics,\n          title: t('Metrics') }),\n\n\n        eventKey: 1 },\n\n      activeTabKey === 1 && this.renderMetricCollection()),\n\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.databaseColumns,\n          title: t('Columns') }),\n\n\n        eventKey: 2 },\n\n      activeTabKey === 2 &&\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ColumnCollectionTable, {\n        columns: this.state.databaseColumns,\n        onChange: (databaseColumns) =>\n        this.setColumns({ databaseColumns }) }),\n\n\n      ___EmotionJSX(Button, {\n        bsStyle: \"primary\",\n        onClick: this.syncMetadata,\n        className: \"sync-from-source\",\n        disabled: !!datasource.sql,\n        tooltip:\n        datasource.sql ?\n        t('This option is not yet available for views') :\n        null },\n\n\n      t('Sync columns from source')),\n\n      this.state.metadataLoading && ___EmotionJSX(Loading, null))),\n\n\n\n      ___EmotionJSX(Tab, {\n        title:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.calculatedColumns,\n          title: t('Calculated Columns') }),\n\n\n        eventKey: 3 },\n\n      activeTabKey === 3 &&\n      ___EmotionJSX(ColumnCollectionTable, {\n        columns: this.state.calculatedColumns,\n        onChange: (calculatedColumns) =>\n        this.setColumns({ calculatedColumns }),\n\n        editableColumnName: true,\n        showExpression: true,\n        allowAddItem: true,\n        allowEditDataType: true,\n        itemGenerator: () => ({\n          column_name: '<new column>',\n          filterable: true,\n          groupby: true,\n          expression: '<enter SQL expression here>',\n          __expanded: true }) })),\n\n\n\n\n      ___EmotionJSX(Tab, { eventKey: 4, title: t('Settings') },\n      activeTabKey === 4 &&\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"div\", { className: \"m-t-10\" },\n      ___EmotionJSX(Alert, { bsStyle: \"warning\" },\n      ___EmotionJSX(\"strong\", null, t('Be careful.'), \" \"),\n      t(\n      'Changing these settings will affect all charts using this datasource, including charts owned by other people.'))),\n\n\n\n      ___EmotionJSX(Col, { md: 6 },\n      ___EmotionJSX(FormContainer, null, this.renderSettingsFieldset())),\n\n      ___EmotionJSX(Col, { md: 6 },\n      ___EmotionJSX(FormContainer, null, this.renderAdvancedFieldset())))))));\n\n\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;const _default =\n\nwithToasts(DatasourceEditor);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(checkboxGenerator, \"checkboxGenerator\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATA_TYPES, \"DATA_TYPES\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(CollectionTabTitle, \"CollectionTabTitle\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnCollectionTable, \"ColumnCollectionTable\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(StackedField, \"StackedField\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(FormContainer, \"FormContainer\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(DatasourceEditor, \"DatasourceEditor\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");reactHotLoader.register(_default, \"default\", \"/home/tiago/git-facilit/incubator-superset/superset-frontend/src/datasource/DatasourceEditor.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":null,"metadata":{},"sourceType":"module"}