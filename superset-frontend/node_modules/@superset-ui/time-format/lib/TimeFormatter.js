"use strict";

exports.__esModule = true;
exports.default = exports.PREVIEW_TIME = void 0;

var _core = require("@superset-ui/core");

var _stringifyTimeInput = _interopRequireDefault(require("./utils/stringifyTimeInput"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PREVIEW_TIME = new Date(Date.UTC(2017, 1, 14, 11, 22, 33)); // Use type augmentation to indicate that
// an instance of TimeFormatter is also a function

exports.PREVIEW_TIME = PREVIEW_TIME;

class TimeFormatter extends _core.ExtensibleFunction {
  constructor(config) {
    super(value => this.format(value));

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "label", void 0);

    _defineProperty(this, "description", void 0);

    _defineProperty(this, "formatFunc", void 0);

    _defineProperty(this, "useLocalTime", void 0);

    const {
      id = (0, _core.isRequired)('config.id'),
      label,
      description = '',
      formatFunc = (0, _core.isRequired)('config.formatFunc'),
      useLocalTime = false
    } = config;
    this.id = id;
    this.label = label != null ? label : id;
    this.description = description;
    this.formatFunc = formatFunc;
    this.useLocalTime = useLocalTime;
  }

  format(value) {
    return (0, _stringifyTimeInput.default)(value, time => this.formatFunc(time));
  }

  preview(value = PREVIEW_TIME) {
    return value.toUTCString() + " => " + this.format(value);
  }

}

var _default = TimeFormatter;
exports.default = _default;